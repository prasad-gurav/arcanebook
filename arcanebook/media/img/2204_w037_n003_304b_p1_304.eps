%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 4/12/2022
%%BoundingBox: 0 0 634 400
%%HiResBoundingBox: 0 0 633.0491 400
%%CropBox: 0 0 633.0491 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 84 8%%BeginData: 14781 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFD13FFCBFFFFFFCBFFFFFFCBFFFFFFCBFD0B
%FFCBFFFFFFCBFFFFFFCBFFFFFFCBFD0FFFCBFFFFFFCBFFFFFFCBFFFFFFCB
%FD0BFFCBFFFFFFCBFFFFFFCBFFFFFFCBFD0BFFCBFFFFFFCBFFFFFFCBFFFF
%FFCBFD0CFFA8CBA8CBA8FFA8CBA8FFA8CBA8FFA8CBA8FFA8FD07FFA8CBA8
%FFA8CBA8FFA8CBA8FFA8CBA8FFA8CBA8FD05FFA9CBA8FFA8CBA8FFA8CBA8
%FFA8CBA8FFA8CBA8FD07FFA8FFA8CBA8FFA8CBA8FFA8CBA8FFA8CBA8CBA8
%FD05FFA9FFA8CBA8FFA8CBA8FFA8CBA8FFA8CBA8FFA8FD0AFFA9FFA9FFCB
%FFA9FD05FFA9FFA9FFCBFD09FFA9FFA9FFCBFFCBFFCBFFCBFFA9FFCBFFA9
%FD07FFA9FFCBFFA9FFCBFFA9FFFFFFA9FFCBFFA9FD09FFCBFFA9FFCBFFA9
%FFCBFFCBCBCBFFA9FFA9FD07FFCBFFA9FFCBFFCBFFA8FFFFFFCBFFA9FFCB
%FFCBFD08FFA8FFA8CBA8FFA9CB7DFD04A8FFA8CBA8FFA8FD07FFA8CBA8FF
%A82752FFA8A8A8FFA8CBA8FFA8CBA8FD05FFCBCBA8FFA8CBA8FFCBFF7D7D
%A8FFA8FFA8CBA8FD07FFA8FFA8CBA8FFA8FFA9FFFF53F87DCBFFA8FFA9FD
%07FFA8CBA8FFA9A8F800007D7DCBCBCBA8FFA8FD0AFFA8FFA9FFA9CB27FD
%04F8CBA9FFA9FFA8FD07FFCBFFA9FFFF7DF8F85227F8277DFFA9FFA8FFA9
%FD07FFA9FFA8FFA9FFA87D27F8F87DFFFFA8FFA9FFCBFD07FFA8FFA9FFA8
%FFA87D2752F8F827FFCBFFA8FD07FFA8FFA9FFA8FF7DFD06F8A8FFFFA8FF
%CBFD08FFA8CBA8FFA8FF52F8F8274AA0A8CBA8FFA8CBA8FD07FFA8FFA8FF
%7DFD06F827A8FFA8CBA8FFA9FD05FFA8FFA8CBA8FF7DFD05F87DFFA8CBA8
%FFA8FD07FFA8CBA8FFA8FFA827FD05F87DA9FFA8CBA8FD06FFCBA8FFA8CB
%A8A86F75FD04F821FFA8CBA8FD0AFFA9FFCBFFFF7DF8F86FC29AFFA9FFCB
%FFA9FD09FFCBFFA9FF7DF8F8F8209A75FFCBFFA9FFA9FD07FFA9FFA9FFFF
%52F8F8F84B4BFFCBFFA9FFCBFD09FFA9FFCBFFCBA94B26F8F8F87DFFFFCB
%FFA9FD07FFA9FFCBFFA9FFA1759A4B204BF827CBFFA9FD0AFFA8CBA8FFA8
%FF7D4B4B9A7576A8FFA8FFA8CBA8FD07FFA8FFA8FFA827F84B4A9A7575A8
%FFA8CBA8FFCBFD05FFA8FFA8CBA8FF5220F8274B4BA2FFA8CBA8FFA8FD07
%FFA8CBA8FFA8FFA29A4BF8F820A8FFA8FFA8CBA8FD06FFCBA8FFA8CBA9C9
%6FC299756FF8F8CBCBCBA8FD0AFFA9FFA8FFA9CA6FC2C29A75FFA9FFA8FF
%A9FD09FFA8FFFF52F84B75C2BC9A99CAFFFFA9FFA8FD07FFA8FFA9FFA9CB
%4B7575764BA8A9FFA9FFA8FD09FFA9FFA8FFCBCA6F9A75754BFFCBFFA8FF
%A9FD07FFA9FFA8FFA9FFC3BC9AC29A75F8F827FFCBFFA9FD08FFA8FFA8CB
%A8FFA8C999C26FC2A8FFA8CBA8FFA8FD07FFA8CBA8A8F8F8F876A0BC6FC2
%27A8A9FFA8CBA8FD05FFA9CBA8FFA8CBA8A16F764B76A2FFA8FFA8CBA8FD
%07FFA8FFA8CBA8FFA17575C2999AA8FFA8CBA8FFA8FD05FFA8FFA8CBA8FF
%A8CB9A99994BFD04F852FFA8FD0AFFA9FFA9FFCBFFCAC2759AC9FFCBFFA9
%FFCBFD09FFA9FF52FD04F87675A04BF827FFCBFFA9FD07FFA9FFCBFFCBFF
%FF764B76A1FFCBFFCBFFA9FD09FFCBFFA9FFA9FF99C2BCC3CAFFCBFFA9FF
%A9FD07FFCBFFA9FFCBFFFFA86FC275FD04F827A9FFCBFD08FFA8FFA8CBA8
%FFA8A9A09A76A9A8FFA8CBA8FFA8FD07FFA8CBCB53F8F8002F76BC7551F8
%F877FFA8CBA8FD05FFCBCBA8FFCBA97D7E766F207EA8A9A8FFA8CBA8FD07
%FFA8FFA8CBA8FFA9CA6F75A0FFA8FFA8CBA8FFA9FD07FFA8CBA8FFA8C9A1
%C3A1C99F4BF8F8F8FFA8FD0AFFA8FFCBA97E857FFFA8FF85857EFFCBFFA8
%FD07FFCBFFA9FF52F82F616084A1A75A5AF87DFFFFA9FD07FFA9FFCBA82E
%2F287DA1A1282F2FA8CBFFA9FFCBFD07FFA8FFA9FFA9A97E9ABBC37EA9CB
%FFA9FFA8FD07FFA8FFA9FFA7C8C1CA85CFC2C8C251F853CBFFCBFD08FFA8
%CBA8A95A7F5A8584857E855A7F7EFFA8CBA8FD07FFA8FFCB7E2F615A6036
%6136605A5A7EFFA8FFA9FD05FFA8FFA8A8282F282F2853282F282E28A8A8
%FFA8FD07FFA8CBA8FFA87E2F7DA0A17C59537EA8FFA8CBA8FD06FFCBA8FF
%A7C29FC9A8C99FC8A0C89F7CA8FFA8FD0AFFA9FF85857E857F8585857F85
%7E85A9FFA9FD09FFCBFF848560615A8560615A846085A8FFA9FD07FFA9FF
%532F2E532853285328532E2F53FFCBFD09FFA9FFCB7E535A7D7E537D535A
%537EA9FFA9FD07FFA9FFCAC8C2C9C8C9C2C9C2C8C2C8C8FFA9FD0AFFA8FF
%A8857E855A857E857E857E855A85A8FFA8FD07FFA8FF84605A605A605A60
%5A605A843685A8FFCBFD05FFA8FFA82F282F282F282F282F282F282FA8FF
%A8FD07FFA8CBA8A82F53535453532F5A53532F7EA9CBA8FD06FFCBA9C9C2
%C9A0C8C2C8A0C8C2C8A0C8A0FFA8FD0AFFCBA95A857F857E8585857E8585
%A95AA9CBFD09FFA8615A615A615A615A615A617D845AAFA8FD07FFCB7E28
%5328532853285328532853287ECBFD09FFCBA9537E7D5A535A535A535A53
%5A53A9CBFD07FFA9FFC2C9C9C8C2C8C2C8C2C8C2C8C2C8CAFFA9FD08FFA8
%FF7E7F5A857E855A857E855A85847F5ACBA8FD07FFA88436605A605A605A
%605A605A845A6084CBA8FD05FFCBCB2E2F282F282F282F282F282F282F2E
%A9A8FD07FFA8FF7E53537DFD0B53FFA8FD05FFA8FFA7C2A7C9A0C8A0C8A0
%C8A0C8A0C89FC9A8FD0AFFA9857E857F857E8585857E857FA97E8585FD09
%FF5A615A615A615A615A615A617D845A85A8FD07FFA85328532853285328
%5328532853282F7EFD09FFA95A537E7D5A535A535A535A535A535AA8FD07
%FFA9C9C1C9C8C8C2C8C2C8C2C8C2C8C2C8C2FFA9FD09FFAF7E857E857E85
%7E8585857E8584857E85A8FD07FFA8605A615A605A605A605A615A845A85
%5AA9FD07FFA82853282F2853282F2853282F2853287ECBFD07FFA8A95353
%537D535A537E535A535A53595384FD08FFC2C8A7C9C2C8A0C9C2C8A0C8C2
%C8A0C8A8FD26FFAFFFFFFFAFFFFFFFAFFD0FFFA9FFA9FFA8FFA9FFA8FFA9
%FFA9FD0FFFA9FD07FFA9FD0FFFCFFD07FFCFFFFFFFCFFDFCFFFDFCFFFD12
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA9FD07FFA9FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FD09FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FD07FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD09FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FD0AFFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9
%FD09FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA8FD07FFA8FFA9FFA9FFA9
%FFA9FFA9FFA9FFA9FFA9FD09FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9
%FD07FFCBFFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FFCBFD08FFA8FFA8CBA8
%FFA8CBA8FFA9FFA8FFA8CBA8FFA8FD07FFA8CBA8FFA8CBA8FFCBFFA9FFA8
%CBA8FFA8CBA8FD05FFCBCBA8FFA8CBA8FFA8FFCBFFA9CBA8FFA8CBA8FD07
%FFA8FFA8CBA8FFA8FFA9FFA8CBA8FFA8CBA8FFA9FD07FFA8CBA8FFA8FFCB
%FFCBFFA8FFA8CBA8FFA8FD0AFFA8FFA9FFA8FFFFFFA2A9FFFFA8FFA9FFA8
%FD07FFCBFFA9FFA8FFCBFF7D52277DCBFFA9FFA8FFA9FD07FFA9FFA8FFA9
%FFA8FFA85352FFFFFFA8FFA9FFCBFD07FFA8FFA9FFA8FFA2A8A8FFFFFFA8
%FFA9FFA8FD07FFA8FFA9FFA8FF7D52527DA8FFA8FFA9FFA8FFCBFD08FFA8
%CBA8FFA8FFA87D52F8F82752FFA8FFA8CBA8FD07FFA8FFA8CBA8FF52FD04
%F87DA9FFA8CBA8FFA9FD05FFA8FFA8CBA8FFA8FF7DFD04F8A8A8CBA8FFA8
%FD07FFA8CBA8FFA8FF7DF8F8F828A8A8CBA8FFA8CBA8FD06FFCBA8FFA8FF
%A827FD04F87DFFA8FFA8CBA8FD0AFFA9FFCBFFFF7DFD05F852FFFFCBFFA9
%FD09FFCBFFA9FF7DFD06F8FFCBFFA9FFA9FD07FFA9FFA9FFCBFFCB52F8F8
%F84B7DFFA9FFCBFD09FFA9FFCBFFCBA199764AF8F8A8CBFFCBFFA9FD07FF
%A9FFCBFFFFA8F84BF8F8F852A8FFFFFFA9FD0AFFA8CBA8FFA8FF52F8F8F8
%204B7DFFA8FFA8CBA8FD07FFA8FFA8FFA827F8F8207575207DFFA8CBA8FF
%CBFD05FFA8FFA8CBA8FFA9CBFD04F86F7DCBCBA8FFA8FD07FFA8CBA8FFA8
%FF76999999F8F8A8FFA8FFA8CBA8FD06FFCBA8FFA8FF52206F20FD04F827
%A8CBCBA8FD0AFFA9FFA8FFA8F8F800279A9AA8A9FFA8FFA9FD09FFA8FFCB
%FF274B6FC2999A2652FFFFA9FFA8FD07FFA8FFA9FFCBFF7D26204B757576
%FFA9FFA8FD09FFA9FFA8FFCBA06FC26F204BFFCBFFA8FFA9FD07FFA9FFA8
%FFFFA84B7676764B4BF8F8F8CBFFFFA9FD08FFA8FFA8CBA8FF274B757752
%5353FFA8CBA8FFA8FD07FFA8CBA8FFA8276F9ABCBC6F6F27FFA8FFA8CBA8
%FD05FFA9CBA8FFA9A827F84B75BCC26FA0A8FFA8CBA8FD07FFA8FFA8CBA8
%A8204B2020209AA8FFA8CBA8FFA8FD05FFA8FFA8CBA8FFA8A14B9A9A764B
%F8F8F827FFA8FD0AFFA9FFA9FFFFFF6F9AC27675CAFFFFA9FFCBFD09FFA9
%FFCBFFF86F99C29AA04B27A8FFCBFFA9FD07FFA9FFFFA8F8F8F84B9AC29A
%75A0FFCBFFA9FD09FFCBFFA9FFA827F8F8F875C9FFCBFFA9FFA9FD07FFCB
%FFA9FFCBFF7D9A9A9A7E52F8F8F827A8FFCBFD08FFA8FFA8CBA8FFA9CA9A
%C299BCA1FFA8CBA8FFA8FD07FFA8CBA8FFA8F8F84B999A6FF8F8A9A8FFA8
%CBA8FD05FFCBCBA8FF52FD04F820999A994BA8FFA8CBA8FD07FFA8FFA8CB
%A8FF52F8F820A1FFA8FFA8CBA8FFA9FD07FFA8CBA8FFA9A9766F6F5900FD
%04F8A8A9FD0AFFA8FFA9FFA8FFFFC3759AC3FFA9FFA9FFA8FD07FFCBFFA9
%FFA9FFF8F876C2994BF827A8FFA8FFA9FD07FFA9FFFF7DF8F8F82751C26F
%75F87DCBFFA9FFCBFD07FFA8FFA9FFA9FF4B4B99C9A2CBA9FFA9FFA8FD07
%FFA8FFA9FFCBA9A2A176A1764C00F8F827A8FFCBFD08FFA8CBA8FFA8FFA8
%FF779A4BA8A9CBA8FFA8CBA8FD07FFA8FFA8FF7E2E2F7EA1C97D53287EA9
%CBA8FFA9FD05FFA8FFFFFF52F8F82E5AC9C9C3C2A07DFFA8FFA8FD07FFA8
%CBA8FFA8A276A0C2C2767777A8A8FFA8CBA8FD06FFCBA8FFA97E2852FD04
%9A282F05277DFFA8FD0AFFA9FFCBFFA8A8A1A8A1A1A1FFA9FFCBFFA9FD09
%FFCBFF7E5A535A535A535A537E53A9CBFFA9FD07FFA87D5227F8598585A1
%C8C8C9C8C9A8FFCBFD09FFA9FFA9A276A177A177A1777D76A2CBFFA8FD07
%FFA9FFFFA828532E535277282F285353FFCBFD0AFFA9CBA8FFA277767D77
%7D767D77A8A8FFA8CBA8FD07FFA8FFA853535A53535354FD0553A9A8FFCB
%FD05FF7DFD04F85385855AA8C2C8A0C8C2A8A9FFA8FD07FFA8FFA8A27677
%767D7777767D777776A2A8CBA8FD06FFCBA8FF282F282F282F282F282F28
%2F53FFA8FD0AFFA9FFA87D777D77A1777D777D77CBA9FFA9FD09FFA97E53
%5A535A535A535A535A53547EFFA8FD06FF7DF8F8F85285857F857EC8C2C8
%C2C8A1A9A8FD09FFCBA876A1777D77A1777D77A1777D76A8CBFD07FFA9FF
%7D2F53532853285328532853282FA8FFA9FD08FFA8FFA87D767D7677767D
%7677767777CBA8FFA8FD07FFA8A82FFD0A537E535AA8CBA8FD05FF7DF8F8
%277E855A855A849FC8A0C89FC87EA9A8FD07FFA8FF7777767D7677767D76
%77767D767777FFA8FD05FFA8FFA82F2853282F282F282F282F282F067DA8
%FD0AFFCBA876A177A177A177A177A1777DA2FFCBFD09FF7E5A535A537E53
%5A537E53547E7E53A8CBFD06FF7DF8F859857E857F85A1C8C2C8C2C8C285
%85FD09FFA87D77A177A177A177A177A177A177A1A8FD08FF7E2853535328
%532E5328532E5328532FFFCBFD08FFA8CB7777767D7677767D7677767D76
%77A8FFA8FD07FFA8532F5353532F5353532F532F7E535353CBA9FD05FF7D
%F800857E855A855AA1C1C8C2C2C1C87E85A8FD07FFA8A27677767D767776
%7776777677767776A8FD08FF282828532F28282F2828282FFD04287EFD0A
%FFA8A27DA17DA27DA17DA27DA17DA27DA8A9FD08FFA95A7E597E597E597E
%7E7E597E7E7E597EA9FD07FF27597EA985A97EA8C9C9C8C9C9C9A0A985AF
%FD08FF7DA27DA17DA27DA17DA27DA27DA27DA1A8FD07FFA8595359535953
%59535953595359535953A8FD0BFFCBFFCBFFA8FFCBFFA8FFCBFD0DFFAFFF
%FFFFA8FFA9FD09FFA9FD09FFA9FFA8FFCFFFCAFD07FFA8FD0FFFA8FD13FF
%CBFFFFFFA8FD07FFA8FDFCFFFDFCFFFD95FFA8FFA8CBA8FFA8CBA8FFA8CB
%A8FFA8CBA8FFA8FD07FFA8CBA8FFA8CBA8FFA8CBA8FFA8CBA8FFA8CBA9FD
%06FFCBA8FFA8CBA8FFA8CBA8FFA8CBA8FFA8CBA8FD07FFA8FFA8CBA8FFA8
%CBA8FFA8CBA8FFA8CBA8FFA9FD07FFA8CBA8FFA8CBA8FFA8CBA8FFA8CBA8
%FFA8FD0AFFA8FFA9FFA8FFCBFFA9FFCBFFA8FFA9FFA8FD07FFCBFFA9FFA8
%FFA9FD05FFA9FFA9FFA8FFA9FD07FFA9FFA8FFA9FFA9FFFFFFA9FFA9FFA8
%FFA9FFCBFD07FFA8FFA9FFA8FFA9FFA8FFCBFFA8FFA9FFA8FD07FFA8FFA9
%FFA8FFCBCBA9FFFFFFA8FFA9FFA8FFCBFD08FFA8CBA8FFA8CBA8CB7E7E59
%A9A8CBA8FFA8CBA8FD07FFA8FFA8CBA8FFA97D27527DCBA8FFA8CBA8FFA9
%FD05FFA8FFA8CBA8FFFD04A8A2CBA8FFA8CBA8FFA8FD07FFA8CBA8FFA8CB
%A8FFA17D77A8A8CBA8FFA8CBA8FD06FFCBA8FFA8CBA97EF8272752A8FFA8
%FFA8CBA8FD0AFFA9FFCBFFA9FF7E54532E28A9CBFFCBFFA9FD09FFCBFFA9
%FFCB52FD04F827FFCBFFA9FFA9FD07FFA9FFA9FFFFA900F8F8F827FFFFFF
%A9FFCBFD09FFA9FFCBFFA9FFA27777A177A8A9FFCBFFA9FD07FFA9FFCBFF
%A9FF52FD04F852FFFFCBFFA9FD0AFFA9CBA8FFA8FF7E535327F84B59FFA8
%FFA8CBA8FD07FFA8FFA8FFA852F8F8F84B20F87DFFA8CBA8FFCBFD05FFA8
%FFA8CBA8FFA9764A26F8F827FFA8CBA8FFA8FD07FFA8CBA8FFA8FFA87D4B
%52777D76A9A8FFA8CBA8FD06FFCBA8FFA8CBA8A84B4BF8F8F87DA9FFA8CB
%A8FD0AFFA9FFA8FFFF7E5353F84B4B7DFFFFA8FFA9FD09FFA8FFFFA8F8F8
%F8269975F852CBFFA9FFA8FD07FFA8FFA9FFA8FFA1C24BF8F8F853FFA9FF
%A8FD09FFA9FFA8FFCBFF4B4BF87677A1A8FFA8FFA9FD07FFA9FFA8FFA9FF
%A89A75F8F8F827FFA9FFA9FFA9FD08FFA8FFA8CBA8FF7D534C76764B52FF
%A8CBA8FFA8FD07FFA8CBA8FF53204A756F9A6F6FF852A9FFA8CBA8FD05FF
%A9CBA8FFA8CBA8A06F9A204B207DA9FFA8CBA8FD07FFA8FFA8CBA8FFA8FD
%044B76A2FFA8CBA8FFA8FD05FFA8FFA8CBA8FFA9CA4B9A99754476A9CBA8
%FFA8FD0AFFA9FFA9FFFF842FA1BC9A6F7EA9FFA9FFCBFD09FFA9FFFF5220
%9AC2C275C27526F8FFCBFFA9FD07FFA9FFCBFFA9FF9A75BCC3759AA8FFCB
%FFA9FD09FFCBFFA9FFFFCA4B76766F27FFCBFFA9FFA9FD07FFCBFFA9FFCB
%FFC99A75C2999ACAFFA9FFCBFFCBFD08FFA8FFA8CBA8FF7E53539B767653
%FFA8CBA8FFA8FD07FFA8FFA852F8F84AC299759A4BF8F8A8FFA8CBA8FD05
%FFCBCBA8FFA8FFA8C3999ABC9AA1FFA8FFA8CBA8FD07FFA8FFA8CBA8FFA8
%764B7676A2A8FFA8CBA8FFA9FD07FFA8CBA8FFA9CABCC299C2CAFFA8CBA8
%FFA8FD0AFFA8FFA9FFCBA92F53537D537EA8FFA9FFA8FD07FFCBFFFF52FD
%04F84BC29A4BF8F827CBFFFFA9FD07FFA9FFA8FFA9FFC9C2999AA0FFFFFF
%A8FFA9FFCBFD07FFA8FFA9FFA9FF7D4B4BA1CAFFA9FFA9FFA8FD07FFA8FF
%A9FFA9FFA9A14B9AA1FFA8FFCBFFA8FFCBFD08FFA8CBA8FFA8CB53532F53
%2F532FA2A8FFA8CBA8FD07FFA8A9FD04F826754B754BFD04F87DA8FFA9FD
%05FFA8FFA8CBA8FFA9A84B75997D7DA9A9CBA8FFA8FD07FFA8CBA8FFA8CA
%A0A04B9BA0C8A0C9A8FFA8CBA8FD06FFCBA8FFA8A97D5A7CC299C8535A7D
%CBA8CBA8FD0AFFA9FFA9FFC8C9535A53532F7DA0C9CBFFA9FD09FF7EF8F8
%4BA0C9A0A176C3C275F8F8F8A2FD08FFA9FFA9FFA97E287DC3A1532F2FA8
%CBFFCBFD09FFA9FFA9C9C2C8A7A984C9C2C8C2C9A9FFA8FD07FFA9FFFFA9
%535A53C9A0C8C27E535A59FFCBFD0AFFA9CBA8FFA1C2C2C8A07D537D77A0
%C1C9A9CBA8FD07FFA9A8F851C2C8C2C8A0C8C2C8C2A0F8F827FD07FFA8FF
%A8FFA853282E537E7753282F287EA8FFA8FD07FFA8CBA9CAC2C8A0845B85
%A0C8C2C89FCAA9CBA8FD06FFCBA8A95353535977537C7DFD0553FFA8FD0A
%FFA9FFA8C8C2C8C2C8A07D77A177C8C2CAA9FD09FFA876C8C8C2C8C2C8C2
%C8C2C8C876F852CBFD07FFA8FFFF7D2853287777A1532F285328A8CBFD09
%FFA9FFC2C8C2C87E857EC9C2C8C2C8C2FFA9FD07FFA9FF7E5A535A535A53
%5A535A535A535AA8FFA9FD08FFA8FFA8C99FC8A0C8C1A177777677A0C8A0
%FFA8FD07FFA8CAC2C8A0C8A0C8A0C8A0C8A0C8C24B7DFFA8FD05FFA9CBA8
%A8282F282F52777653282F282F28A9A8FD07FFA8FFA7C2A0C8A0855A85A0
%C8A0C8A0C2A1FFA8FD05FFA8FFA8FD0D532F7EA8FD0AFFA9CFC2C9C2C8C2
%C8A07D77A177A1C2C8CAFD09FFC9C8C2C8C2C9C2C8C2C9C2C8C2C8C9FFA9
%FD07FFA9FF532F28532E7D77A1532F28532E2F7EFD09FFCBC9C2C9C2C97F
%857EC9C2C8C2C8C2C9A8FD08FF84535A535A537E535A537E535A535A53A9
%FD09FFA8FFA7C2A0C8C2C8C2A17777767D77C2C1C9A9FD07FFA8C8A0C8C2
%C8A0C8C2C8A0C8C2C8A0C8A7FFA8FD05FFCBFF7D2F282F2853777D765328
%2F282F2853A8FD07FFA8CAC2C8A0C8A1855A85A0C8A0C9C2C8A0CAA9FD07
%FF5353537D5353535A5353535AFD04537EFD0AFFA8C9C2C8C2C8C2C8A07D
%777D777DA0C8C2FD07FFCBC9C2C8C2C8C2C8C2C8C2C8C2C8C2C8C1C9A9FD
%07FFA853282F282F287D77A1522F282F282F28A9FD08FFA7C8C2C8C1A85B
%857EC8C1C9C9C8C2C8A7FD07FF7E53535977545353535A5353535A535353
%5AA9FD09FFCAA0C9A0C9A0C9A0A177A1777D77A1C2C8A8FD07FFA0C9C2C9
%A0C9C2C9A0C9C2C9A0C9C2C9A0FD08FFA8FD0553597DA17D7D2FFD0553A8
%FD07FFA8C9A0C9C2C97D857EA8A0C9C9C9A0C9C2CAA9FD06FFA8537E7D7D
%537E597E537E597E537E597E53AFFDFCFFFDFCFFFDFCFFFDFCFFFD13FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164460, 2020/05/12-16:04:17        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 24.2 (Windows)"
   xmp:CreateDate="2022-04-12T16:24:14+03:00"
   xmp:ModifyDate="2022-04-12T16:24:15+03:00"
   xmp:MetadataDate="2022-04-12T16:24:15+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:26820f87-d132-d94b-9557-cea3566ac01f"
   xmpMM:InstanceID="xmp.iid:26820f87-d132-d94b-9557-cea3566ac01f"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">2204.w037.n003.302B.p1.302</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="164"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgApAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqg5NUgRyvFjxN&#xA;KimS4E0t/S8P8jfhh4Fp36Xh/kb8MeBad+l4f5G/DHgWlSHUYZZBGFZS3QmlMBitIrIoQ9zexW7B&#xA;WBLEVoPDJCNppR/S8P8AI34YeBad+l4f5G/DHgWnfpeH+Rvwx4Fpw1aCv2G/D+uPAtI5WDKGHQio&#xA;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"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:4c687d7e-b9d2-3245-adb0-b8a7031d4a4c"
    stRef:documentID="xmp.did:4c687d7e-b9d2-3245-adb0-b8a7031d4a4c"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88"
      stEvt:when="2021-11-02T18:45:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:4c687d7e-b9d2-3245-adb0-b8a7031d4a4c"
      stEvt:when="2022-04-12T16:24:12+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:26820f87-d132-d94b-9557-cea3566ac01f"
      stEvt:when="2022-04-12T16:24:15+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="633.049000"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                 
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
633.049 400 li
633.049 0 li
cp
clp
633.049 400 mo
-7.36265e-06 400 li
-7.36265e-06 0 li
633.049 0 li
633.049 400 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
363.32 38.4399 mo
363.32 118.44 li
363.32 120.93 361.93 123.1 359.89 124.2 cv
358.96 124.71 357.91 124.99 356.78 124.99 cv
276.78 124.99 li
276.31 124.99 275.86 124.94 275.42 124.84 cv
274.39 124.63 273.44 124.17 272.65 123.52 cv
271.17 122.33 270.23 120.49 270.23 118.44 cv
270.23 38.4399 li
270.23 34.8301 273.16 31.8999 276.78 31.8999 cv
356.78 31.8999 li
360.39 31.8999 363.32 34.8301 363.32 38.4399 cv
cp
.909804 .882353 .937255 rgb
f
353.29 124.99 mo
276.78 124.99 li
276.31 124.99 275.86 124.94 275.42 124.84 cv
279.8 103.19 288.3 88.8999 295.87 86.3799 cv
305.19 83.27 322.39 85.7598 330.479 87.2202 cv
333.47 87.7598 336.22 88.29 338.22 90.5698 cv
343.07 96.0698 350.77 109.93 353.29 124.99 cv
cp
.25098 .313726 .498039 rgb
f
339.78 124.99 mo
286.82 124.99 li
286.97 109.26 287.94 95.27 290.75 91.7998 cv
292.23 89.96 294 88.5298 295.87 87.4199 cv
300.2 84.8599 305.04 84 308.22 83.71 cv
310.33 83.52 311.7 83.5898 311.7 83.5898 cv
311.7 83.5898 314.53 83.7402 318.33 84.3101 cv
319.38 84.4902 320.439 84.6699 321.55 84.8901 cv
328.02 86.1602 333.45 87.3501 334.91 88.0801 cv
338.24 89.75 339.439 108.45 339.78 124.99 cv
cp
f
325.354 59.165 mo
306.084 73.7549 li
306.084 73.7549 295.584 63.2148 299.854 57.1948 cv
302.504 53.4448 307.864 51.645 311.534 50.8149 cv
311.954 50.7251 312.344 50.645 312.714 50.5747 cv
314.294 50.2651 315.354 50.1748 315.354 50.1748 cv
315.364 50.2349 li
316.034 49.9849 322.714 45.1548 326.374 46.7549 cv
331.403 48.9448 325.354 59.165 325.354 59.165 cv
cp
0 0 0 rgb
f
308.083 76.0342 mo
307.448 86.3877 li
307.448 86.3877 309.132 89.479 315.159 90.3428 cv
319.648 90.9863 321.297 90.0635 321.297 90.0635 cv
320.989 84.7813 li
320.683 79.6299 li
309.893 76.5527 li
308.083 76.0342 li
cp
.627451 .345098 .321569 rgb
f
309.893 76.5527 mo
309.902 76.8369 309.989 77.1772 310.133 77.5703 cv
312.132 82.8843 318.397 84.3882 320.989 84.7813 cv
320.683 79.6299 li
309.893 76.5527 li
cp
0 0 0 rgb
f
324.439 56.1719 mo
324.439 56.1719 329.077 69.4863 326.492 76.5674 cv
323.907 83.6484 317.401 82.002 313.564 80.2993 cv
309.727 78.5967 308.082 76.0366 308.082 76.0366 cv
308.082 76.0366 304.3 77.0024 302.099 73.3862 cv
299.898 69.7695 301.718 65.9512 303.892 65.2114 cv
306.065 64.4712 308.451 66.1831 308.451 66.1831 cv
306.778 62.2886 li
306.778 62.2886 316.493 43.8984 324.439 56.1719 cv
cp
.627451 .345098 .321569 rgb
f
307.75 71.8369 mo
307.639 71.8369 307.526 71.7998 307.434 71.7241 cv
302.976 68.0835 li
302.762 67.9087 302.73 67.5938 302.904 67.3799 cv
303.08 67.1655 303.396 67.1353 303.608 67.3091 cv
308.066 70.9497 li
308.28 71.1245 308.312 71.4395 308.138 71.6533 cv
308.038 71.7744 307.895 71.8369 307.75 71.8369 cv
cp
0 0 0 rgb
f
303.501 71.5186 mo
303.267 71.5186 303.058 71.3525 303.011 71.1133 cv
302.959 70.8423 303.136 70.5801 303.407 70.5278 cv
306.528 69.9253 li
306.796 69.8721 307.061 70.0493 307.114 70.3213 cv
307.166 70.5923 306.989 70.8545 306.718 70.9067 cv
303.597 71.5093 li
303.564 71.5156 303.533 71.5186 303.501 71.5186 cv
cp
f
315.47 61.7427 mo
315.353 61.7427 315.235 61.7021 315.141 61.6191 cv
314.933 61.4375 314.911 61.1216 315.094 60.9136 cv
316.648 59.1372 318.551 59.5996 319.341 60.0908 cv
319.575 60.2368 319.646 60.5449 319.501 60.7793 cv
319.355 61.0142 319.046 61.084 318.814 60.9409 cv
318.649 60.8423 317.197 60.0283 315.846 61.5718 cv
315.747 61.6851 315.608 61.7427 315.47 61.7427 cv
cp
f
325.529 61.3179 mo
325.407 61.3179 325.284 61.2734 325.188 61.1831 cv
324.199 60.2578 323.063 60.8027 323.017 60.8262 cv
322.77 60.9492 322.471 60.8481 322.347 60.6025 cv
322.224 60.3569 322.32 60.0586 322.564 59.9341 cv
322.638 59.8975 324.363 59.0449 325.871 60.4526 cv
326.072 60.6411 326.083 60.9575 325.895 61.1592 cv
325.796 61.2646 325.663 61.3179 325.529 61.3179 cv
cp
f
323.182 71.0605 mo
323.125 71.0605 323.066 71.0508 323.01 71.0303 cv
322.751 70.9351 322.617 70.6479 322.712 70.3887 cv
324.026 66.7959 322.315 64.7134 322.242 64.6265 cv
322.064 64.4165 322.089 64.1016 322.298 63.9224 cv
322.507 63.7441 322.821 63.7661 323.001 63.9751 cv
323.09 64.0786 325.176 66.5635 323.651 70.7324 cv
323.577 70.9351 323.386 71.0605 323.182 71.0605 cv
cp
f
325.177 66.2896 mo
324.945 66.2896 324.737 66.1274 324.688 65.8911 cv
324.187 63.4766 li
324.179 63.4424 324.176 63.4082 324.176 63.3745 cv
324.176 63.1426 324.338 62.9346 324.574 62.8853 cv
324.84 62.8335 325.108 63.0024 325.165 63.2734 cv
325.667 65.688 li
325.675 65.7222 325.678 65.7563 325.678 65.79 cv
325.678 66.022 325.516 66.23 325.279 66.2793 cv
325.245 66.2861 325.211 66.2896 325.177 66.2896 cv
cp
f
317.613 66.4653 mo
317.382 66.4653 317.174 66.3032 317.125 66.0669 cv
316.623 63.6528 li
316.566 63.3828 316.74 63.1182 317.011 63.0615 cv
317.276 63.0078 317.545 63.1782 317.602 63.4497 cv
318.104 65.8638 li
318.16 66.1338 317.986 66.3984 317.716 66.4551 cv
317.682 66.4619 317.647 66.4653 317.613 66.4653 cv
cp
f
325.35 59.1641 mo
325.35 59.1641 324.354 57.0137 321.771 56.8374 cv
319.19 56.6611 317.57 58.3877 317.57 58.3877 cv
317.57 58.3877 318.437 62.8066 314.783 64.9014 cv
311.129 66.9961 308.451 66.1831 308.451 66.1831 cv
305.959 65.1191 li
304.319 61.2817 li
312.176 53.792 li
322.023 49.3428 li
326.613 54.0537 li
325.35 59.1641 li
cp
f
320.324 75.0259 mo
319.921 75.0259 317.537 74.9243 316.606 72.5781 cv
316.505 72.3218 316.63 72.0313 316.887 71.9292 cv
317.145 71.8271 317.434 71.9531 317.536 72.21 cv
318.27 74.0605 320.275 74.0342 320.347 74.0254 cv
320.63 74.0254 320.853 74.2397 320.861 74.5103 cv
320.869 74.7856 320.654 75.0156 320.38 75.0249 cv
320.372 75.0254 320.354 75.0259 320.324 75.0259 cv
cp
f
318.471 91.147 mo
311.691 91.147 306.533 86.4521 306.283 86.2207 cv
306.081 86.0332 306.068 85.7173 306.256 85.5146 cv
306.444 85.312 306.76 85.2993 306.963 85.4868 cv
307.03 85.5493 313.783 91.689 321.644 89.7661 cv
321.908 89.6997 322.182 89.8652 322.247 90.1333 cv
322.313 90.4014 322.148 90.6724 321.88 90.7378 cv
320.711 91.0234 319.568 91.147 318.471 91.147 cv
cp
1 1 1 rgb
f
611.95 158.85 mo
611.95 238.85 li
611.95 241 610.91 242.91 609.3 244.09 cv
608.33 244.83 607.12 245.29 605.82 245.37 cv
605.68 245.39 605.54 245.39 605.4 245.39 cv
525.41 245.39 li
524.63 245.39 523.88 245.25 523.189 245 cv
520.66 244.09 518.86 241.68 518.86 238.85 cv
518.86 158.85 li
518.86 155.23 521.79 152.3 525.41 152.3 cv
605.4 152.3 li
609.02 152.3 611.95 155.23 611.95 158.85 cv
cp
.909804 .882353 .937255 rgb
f
549.83 245.39 mo
525.41 245.39 li
524.63 245.39 523.88 245.25 523.189 245 cv
529.689 224.93 541.16 206.97 550.43 206.27 cv
562.01 206.49 556.46 227.73 549.83 245.39 cv
cp
.25098 .313726 .498039 rgb
f
570.592 178.535 mo
570.592 178.535 583.937 174.944 593.862 187.101 cv
603.789 199.257 597.62 214.222 581.895 213.792 cv
566.169 213.362 562.513 197.291 562.513 197.291 cv
570.592 178.535 li
cp
0 0 0 rgb
f
591.81 241.44 mo
589.479 242.95 587 244.28 584.42 245.39 cv
544.87 245.39 li
540.4 243.47 536.27 240.91 532.59 237.83 cv
533.6 226.56 535.74 220.78 537.55 218.17 cv
541.36 212.68 545.07 207.39 550.34 206.27 cv
553.15 205.69 556.13 205.38 559.35 204.92 cv
564.07 204.26 569.76 204.4 574.85 204.98 cv
574.91 204.98 li
579.89 205.56 582.66 207.12 585.79 208.89 cv
587.67 209.96 590.46 223.77 591.81 241.44 cv
cp
.25098 .313726 .498039 rgb
f
553.421 196.448 mo
552.863 198.998 551.332 200.829 550.001 200.537 cv
548.671 200.246 548.044 197.943 548.603 195.393 cv
549.16 192.843 550.691 191.012 552.022 191.303 cv
553.354 191.595 553.979 193.897 553.421 196.448 cv
cp
.572549 .705882 .917647 rgb
f
605.82 245.37 mo
605.68 245.39 605.54 245.39 605.4 245.39 cv
581.31 245.39 li
572.35 204.98 li
572.35 204.98 573.26 204.91 574.85 204.98 cv
574.91 204.98 li
579.9 205.26 598.28 209.14 605.82 245.37 cv
cp
.25098 .313726 .498039 rgb
f
550.558 188.54 mo
550.558 188.54 546.764 184.506 547.711 178.123 cv
548.354 173.796 550.246 172.363 550.246 172.363 cv
550.246 172.363 547.209 166.532 555.919 166.721 cv
564.629 166.911 571.765 166.167 575.646 173.659 cv
577.933 178.073 577.022 187.66 577.022 187.66 cv
550.558 188.54 li
cp
0 0 0 rgb
f
569.801 195.343 mo
569.739 205.973 li
569.739 205.973 567.805 209.017 561.584 209.485 cv
556.949 209.835 555.497 207.447 555.497 207.447 cv
556.673 198.153 li
567.915 195.749 li
569.801 195.343 li
cp
.788235 .435294 .435294 rgb
f
569.789 194.695 mo
569.76 194.985 569.647 195.327 569.474 195.719 cv
567.064 201.015 558.682 203.175 556.006 203.399 cv
556.673 198.153 li
569.789 194.695 li
cp
0 0 0 rgb
f
554.444 173.912 mo
554.444 173.912 548.788 187.206 550.944 194.623 cv
553.1 202.04 559.864 200.804 563.904 199.327 cv
567.945 197.85 569.803 195.346 569.803 195.346 cv
569.803 195.346 573.603 196.593 576.102 193.047 cv
578.6 189.501 577.002 185.472 574.83 184.566 cv
572.659 183.66 570.103 185.247 570.103 185.247 cv
572.081 181.38 li
572.081 181.38 563.412 161.91 554.444 173.912 cv
cp
.788235 .435294 .435294 rgb
f
570.103 185.247 mo
570.103 185.247 564.433 186.504 560.356 180.247 cv
556.281 173.989 556.594 171.381 556.594 171.381 cv
552.78 177.996 li
552.78 177.996 551.813 173.479 553.57 170.553 cv
555.328 167.628 557.222 168.191 557.222 168.191 cv
569.832 171.085 li
573.33 181.081 li
570.103 185.247 li
cp
0 0 0 rgb
f
555.211 190.805 mo
555.001 190.805 554.805 190.671 554.735 190.46 cv
553.802 187.608 555.77 184.666 555.854 184.542 cv
556.01 184.315 556.32 184.256 556.548 184.41 cv
556.776 184.564 556.836 184.875 556.682 185.104 cv
556.663 185.13 554.906 187.769 555.687 190.149 cv
555.772 190.412 555.629 190.694 555.366 190.78 cv
555.314 190.797 555.263 190.805 555.211 190.805 cv
cp
f
570.76 191.523 mo
570.64 191.523 570.519 191.48 570.423 191.393 cv
570.219 191.207 570.204 190.89 570.391 190.686 cv
573.924 186.817 li
574.11 186.614 574.427 186.6 574.63 186.786 cv
574.834 186.972 574.849 187.288 574.662 187.492 cv
571.129 191.361 li
571.03 191.469 570.896 191.523 570.76 191.523 cv
cp
f
574.55 190.44 mo
574.527 190.44 574.505 190.439 574.482 190.436 cv
571.989 190.1 li
571.715 190.063 571.523 189.812 571.561 189.538 cv
571.597 189.264 571.853 189.072 572.122 189.109 cv
574.615 189.445 li
574.89 189.482 575.081 189.733 575.044 190.007 cv
575.011 190.258 574.796 190.44 574.55 190.44 cv
cp
f
552.453 180.014 mo
552.219 180.014 552.01 179.848 551.963 179.609 cv
551.911 179.338 552.088 179.076 552.359 179.023 cv
554.702 178.569 li
554.961 178.516 555.234 178.693 555.288 178.965 cv
555.34 179.236 555.163 179.499 554.892 179.551 cv
552.549 180.005 li
552.518 180.011 552.485 180.014 552.453 180.014 cv
cp
f
562.254 181.369 mo
562.181 181.369 562.106 181.353 562.037 181.319 cv
558.145 179.441 li
557.896 179.322 557.791 179.022 557.911 178.774 cv
558.031 178.524 558.333 178.421 558.578 178.541 cv
562.471 180.419 li
562.72 180.539 562.824 180.838 562.704 181.086 cv
562.618 181.265 562.439 181.369 562.254 181.369 cv
cp
f
552.559 185.447 mo
552.514 185.447 552.467 185.441 552.421 185.428 cv
552.155 185.352 552.002 185.075 552.078 184.81 cv
552.691 182.664 li
552.114 181.984 li
551.936 181.773 551.961 181.458 552.171 181.279 cv
552.384 181.101 552.698 181.127 552.876 181.336 cv
553.627 182.22 li
553.735 182.348 553.772 182.521 553.727 182.682 cv
553.039 185.085 li
552.977 185.304 552.776 185.447 552.559 185.447 cv
cp
f
559.257 185.96 mo
559.212 185.96 559.165 185.954 559.119 185.941 cv
558.854 185.865 558.7 185.588 558.776 185.323 cv
559.389 183.184 li
558.535 182.226 li
558.352 182.02 558.369 181.704 558.575 181.521 cv
558.782 181.336 559.098 181.355 559.281 181.561 cv
560.318 182.725 li
560.433 182.853 560.474 183.03 560.426 183.195 cv
559.737 185.598 li
559.675 185.817 559.475 185.96 559.257 185.96 cv
cp
f
557.133 194.256 mo
556.814 194.256 556.502 194.19 556.205 194.035 cv
555.96 193.907 555.865 193.604 555.993 193.36 cv
556.123 193.116 556.428 193.021 556.668 193.149 cv
557.697 193.685 559.59 192.048 560.171 191.43 cv
560.361 191.229 560.677 191.219 560.878 191.408 cv
561.079 191.598 561.089 191.914 560.899 192.115 cv
560.662 192.368 558.83 194.256 557.133 194.256 cv
cp
f
555.904 205.25 mo
551.012 206.142 li
551.012 206.142 550.906 213.851 560.904 214.364 cv
571.272 214.896 576.107 205.097 576.107 205.097 cv
566.73 204.036 li
555.904 205.25 li
cp
.788235 .435294 .435294 rgb
f
574.988 197.044 mo
575.15 199.649 574.179 201.83 572.819 201.914 cv
571.46 201.999 570.227 199.956 570.064 197.35 cv
569.903 194.745 570.874 192.564 572.233 192.48 cv
573.593 192.396 574.826 194.439 574.988 197.044 cv
cp
.572549 .705882 .917647 rgb
f
545.407 241.589 mo
545.274 241.589 545.142 241.536 545.044 241.432 cv
535.852 231.686 543.576 221.788 543.655 221.689 cv
543.827 221.476 544.144 221.44 544.357 221.611 cv
544.573 221.784 544.608 222.099 544.437 222.314 cv
544.137 222.69 537.184 231.641 545.771 240.746 cv
545.96 240.946 545.951 241.263 545.75 241.452 cv
545.653 241.544 545.53 241.589 545.407 241.589 cv
cp
f
611.95 279.21 mo
611.95 359.21 li
611.95 361.15 611.11 362.9 609.76 364.09 cv
608.86 364.91 607.72 365.47 606.46 365.67 cv
606.12 365.73 605.76 365.76 605.4 365.76 cv
525.41 365.76 li
524.02 365.76 522.72 365.33 521.67 364.58 cv
519.97 363.4 518.86 361.44 518.86 359.21 cv
518.86 279.21 li
518.86 275.6 521.79 272.67 525.41 272.67 cv
605.4 272.67 li
609.02 272.67 611.95 275.6 611.95 279.21 cv
cp
.909804 .882353 .937255 rgb
f
557.271 300.124 mo
557.271 300.124 548.935 293.459 552.73 287.936 cv
556.526 282.412 564.664 288.032 564.664 288.032 cv
564.664 288.032 567.834 284.86 572.319 287.427 cv
576.804 289.993 577.316 296.251 577.316 296.251 cv
577.316 296.251 581.885 296.147 582.146 301.706 cv
582.407 307.266 576.424 312.216 576.424 312.216 cv
557.271 300.124 li
cp
0 0 0 rgb
f
598.36 361.73 mo
596.67 363.18 594.9 364.53 593.04 365.76 cv
538.53 365.76 li
537.939 331.04 li
551.87 320.98 565.39 323.49 565.39 323.49 cv
565.39 323.49 583.14 321.41 592.41 330.13 cv
593.76 331.41 594.91 332.87 595.81 334.6 cv
597.29 337.45 598.02 348.88 598.36 361.73 cv
cp
.407843 .462745 .666667 rgb
f
571.905 315.275 mo
572.01 325.868 li
572.01 325.868 570.13 328.933 563.938 329.497 cv
559.325 329.918 557.692 328.891 557.692 328.891 cv
558.283 323.52 li
558.866 318.281 li
570.031 315.709 li
571.905 315.275 li
cp
.956863 .517647 .384314 rgb
f
570.031 315.709 mo
570.008 315.998 569.901 316.341 569.734 316.734 cv
567.416 322.049 560.947 323.254 558.283 323.52 cv
558.866 318.281 li
570.031 315.709 li
cp
0 0 0 rgb
f
556.265 294.159 mo
556.265 294.159 550.837 307.495 553.102 314.853 cv
555.366 322.211 562.088 320.873 566.091 319.338 cv
570.095 317.803 571.906 315.277 571.906 315.277 cv
571.906 315.277 575.712 316.461 578.147 312.888 cv
580.582 309.315 578.926 305.325 576.748 304.456 cv
574.569 303.588 572.047 305.208 572.047 305.208 cv
573.958 301.324 li
573.958 301.324 565.014 282.058 556.265 294.159 cv
cp
.956863 .517647 .384314 rgb
f
572.491 311.002 mo
572.338 311.002 572.187 310.932 572.088 310.798 cv
571.925 310.575 571.973 310.263 572.195 310.099 cv
576.934 306.619 li
577.154 306.457 577.468 306.502 577.633 306.727 cv
577.796 306.949 577.748 307.262 577.525 307.426 cv
572.787 310.905 li
572.698 310.971 572.595 311.002 572.491 311.002 cv
cp
0 0 0 rgb
f
576.84 310.899 mo
576.801 310.899 576.761 310.895 576.72 310.885 cv
573.569 310.107 li
573.302 310.041 573.138 309.771 573.204 309.502 cv
573.27 309.235 573.533 309.07 573.81 309.137 cv
576.96 309.914 li
577.228 309.98 577.392 310.251 577.325 310.52 cv
577.27 310.747 577.064 310.899 576.84 310.899 cv
cp
f
565.188 299.736 mo
565.132 299.736 565.074 299.727 565.018 299.706 cv
564.234 299.421 561.981 299.295 561.179 299.271 cv
560.903 299.262 560.687 299.031 560.694 298.755 cv
560.703 298.484 560.925 298.271 561.194 298.271 cv
561.521 298.28 564.284 298.374 565.359 298.767 cv
565.619 298.861 565.753 299.148 565.658 299.407 cv
565.584 299.61 565.393 299.736 565.188 299.736 cv
cp
f
554.908 299.34 mo
554.667 299.34 554.454 299.164 554.415 298.918 cv
554.372 298.645 554.559 298.389 554.831 298.346 cv
556.23 298.126 556.649 298.146 556.722 298.151 cv
556.997 298.175 557.2 298.417 557.177 298.692 cv
557.153 298.965 556.916 299.17 556.645 299.148 cv
556.614 299.146 556.244 299.137 554.987 299.334 cv
554.961 299.338 554.935 299.34 554.908 299.34 cv
cp
f
557.604 311.123 mo
557.39 311.123 557.192 310.985 557.126 310.771 cv
555.803 306.484 558.009 303.4 558.104 303.271 cv
558.266 303.05 558.576 302.998 558.801 303.163 cv
559.023 303.325 559.072 303.638 558.911 303.86 cv
558.891 303.889 556.912 306.685 558.081 310.476 cv
558.163 310.739 558.015 311.02 557.751 311.101 cv
557.702 311.116 557.652 311.123 557.604 311.123 cv
cp
f
555.007 304.43 mo
554.965 304.43 554.923 304.425 554.88 304.413 cv
554.612 304.343 554.453 304.069 554.523 303.803 cv
555.163 301.366 li
555.233 301.099 555.503 300.935 555.773 301.01 cv
556.041 301.08 556.2 301.354 556.13 301.62 cv
555.49 304.057 li
555.432 304.281 555.229 304.43 555.007 304.43 cv
cp
f
561.712 304.494 mo
561.67 304.494 561.628 304.489 561.585 304.478 cv
561.317 304.407 561.158 304.134 561.229 303.867 cv
561.868 301.431 li
561.938 301.163 562.208 301.002 562.479 301.074 cv
562.746 301.145 562.905 301.418 562.835 301.685 cv
562.195 304.121 li
562.137 304.346 561.934 304.494 561.712 304.494 cv
cp
f
555.18 297.163 mo
555.18 297.163 556.309 295.021 558.951 294.978 cv
561.593 294.934 563.154 296.779 563.154 296.779 cv
563.154 296.779 562.039 301.24 565.656 303.568 cv
569.272 305.897 572.047 305.208 572.047 305.208 cv
574.645 304.254 li
576.519 300.426 li
568.897 292.375 li
559.088 287.32 li
554.159 291.885 li
555.18 297.163 li
cp
f
559.642 313.598 mo
559.515 313.598 559.435 313.592 559.417 313.59 cv
559.143 313.566 558.94 313.325 558.963 313.051 cv
558.985 312.776 559.229 312.571 559.501 312.594 cv
559.59 312.604 561.627 312.737 562.474 310.883 cv
562.589 310.633 562.887 310.523 563.137 310.636 cv
563.388 310.751 563.498 311.048 563.384 311.299 cv
562.417 313.415 560.333 313.598 559.642 313.598 cv
cp
f
558.283 323.52 mo
558.283 323.52 556.099 325.836 554.797 330.109 cv
554.059 332.532 554.239 336.11 554.748 336.114 cv
555.258 336.118 559.071 330.216 561.504 329.856 cv
563.938 329.497 565.973 336.563 567.012 336.811 cv
568.051 337.059 572.09 334.278 573.523 330.253 cv
574.957 326.228 572.386 323.633 572.386 323.633 cv
572.386 323.633 559.827 333.164 558.283 323.52 cv
cp
.968627 .701961 .411765 rgb
f
548.53 365.76 mo
525.41 365.76 li
524.02 365.76 522.72 365.33 521.67 364.58 cv
529.15 338.66 537.939 331.04 537.939 331.04 cv
548.53 365.76 li
cp
.407843 .462745 .666667 rgb
f
609.76 364.09 mo
608.86 364.91 607.72 365.47 606.46 365.67 cv
606.12 365.73 605.76 365.76 605.4 365.76 cv
587.59 365.76 li
595.05 333 li
595.05 333 600.67 340.82 607.05 357.67 cv
607.84 359.63 608.8 361.88 609.76 364.09 cv
cp
f
539.73 365.195 mo
539.713 365.195 539.695 365.194 539.679 365.192 cv
539.403 365.164 539.204 364.919 539.232 364.645 cv
540.214 355.104 li
540.242 354.827 540.509 354.625 540.762 354.657 cv
541.037 354.686 541.236 354.931 541.208 355.205 cv
540.227 364.746 li
540.2 365.004 539.983 365.195 539.73 365.195 cv
cp
.968627 .701961 .411765 rgb
f
363.32 158.85 mo
363.32 238.85 li
363.32 241.78 361.39 244.26 358.74 245.1 cv
358.6 245.14 358.479 245.17 358.35 245.2 cv
357.85 245.33 357.32 245.39 356.78 245.39 cv
276.78 245.39 li
276.61 245.39 276.45 245.38 276.29 245.37 cv
272.9 245.12 270.23 242.29 270.23 238.85 cv
270.23 158.85 li
270.23 155.23 273.16 152.3 276.78 152.3 cv
356.78 152.3 li
360.39 152.3 363.32 155.23 363.32 158.85 cv
cp
.909804 .882353 .937255 rgb
f
358.35 245.2 mo
357.85 245.33 357.32 245.39 356.78 245.39 cv
337.9 245.39 li
337.26 243.88 336.63 242.69 336.06 242.95 cv
335.61 243.16 335.15 243.36 334.68 243.55 cv
332.09 225.54 338.22 211.83 338.22 211.83 cv
338.22 211.83 350.51 222.58 358.35 245.2 cv
cp
.572549 .705882 .917647 rgb
f
317.871 194.101 mo
306.951 194.101 li
296.104 223.237 li
337.787 220.139 li
337.787 220.139 340.261 207.122 333.445 194.88 cv
326.631 182.639 317.871 194.101 317.871 194.101 cv
cp
0 0 0 rgb
f
316.53 183.25 mo
301.84 219.08 li
301.84 219.08 294.55 233.05 287.73 245.39 cv
276.78 245.39 li
276.61 245.39 276.45 245.38 276.29 245.37 cv
272.9 245.12 270.23 242.29 270.23 238.85 cv
270.23 220.88 li
271.63 219.37 272.89 218.25 273.55 217.87 cv
281.4 213.31 285.06 217.32 288.36 213.58 cv
292.76 208.62 287.7 205.27 290.05 198.6 cv
292.46 191.8 297.63 191.94 302.38 189.18 cv
306.77 186.65 307.34 180.92 307.83 178.63 cv
308.09 177.39 316.53 183.25 316.53 183.25 cv
cp
f
308.284 181.795 mo
307.837 180.805 307.665 179.705 307.832 178.631 cv
308.011 177.484 308.36 176.254 308.615 175.58 cv
309.873 172.246 313.447 166.077 322.511 166.988 cv
334.843 168.228 333.445 190.367 333.445 190.367 cv
311.393 188.682 li
308.284 181.795 li
cp
f
347.01 245.39 mo
296.2 245.39 li
295.85 245.2 295.49 245 295.14 244.8 cv
294.37 244.38 293.61 243.92 292.87 243.43 cv
292.56 243.23 292.25 243.03 291.96 242.81 cv
292.89 232.44 294.92 223.07 298.85 217.75 cv
302.53 212.8 306.63 209.62 310.47 207.59 cv
318.45 203.38 325.41 204.08 325.41 204.08 cv
337.21 205.65 343.64 218.68 345.15 227.03 cv
345.43 228.57 346.49 238.54 347.01 245.39 cv
cp
.968627 .701961 .411765 rgb
f
329.178 210.376 mo
329.178 210.376 328.49 211.715 324.455 211.343 cv
318.244 210.767 316.254 207.996 316.254 207.996 cv
315.976 197.396 li
317.872 197.769 li
329.122 199.944 li
329.141 205.113 li
329.178 210.376 li
cp
.956863 .517647 .384314 rgb
f
329.141 205.113 mo
326.185 204.816 320.513 203.589 318.207 198.773 cv
318.021 198.401 317.909 198.047 317.872 197.769 cv
329.122 199.944 li
329.141 205.113 li
cp
0 0 0 rgb
f
330.881 175.74 mo
330.881 175.74 336.774 188.884 334.768 196.319 cv
332.761 203.755 325.993 202.652 321.938 201.257 cv
317.881 199.862 315.981 197.401 315.981 197.401 cv
315.981 197.401 312.218 198.718 309.659 195.231 cv
307.1 191.744 308.616 187.697 310.763 186.752 cv
312.91 185.808 315.489 187.34 315.489 187.34 cv
313.443 183.523 li
313.443 183.523 321.71 163.948 330.881 175.74 cv
cp
.956863 .517647 .384314 rgb
f
332.82 186.906 mo
332.577 186.906 332.363 186.728 332.326 186.479 cv
331.966 184.026 li
331.945 183.883 331.987 183.738 332.08 183.629 cv
333.064 182.475 li
333.245 182.264 333.562 182.24 333.77 182.418 cv
333.979 182.598 334.005 182.913 333.826 183.123 cv
332.988 184.105 li
333.316 186.333 li
333.356 186.607 333.167 186.861 332.894 186.901 cv
332.869 186.905 332.845 186.906 332.82 186.906 cv
cp
0 0 0 rgb
f
323.229 182.778 mo
323.151 182.778 323.073 182.76 323 182.722 cv
322.754 182.596 322.657 182.294 322.784 182.049 cv
323.707 180.256 325.97 180.722 326.063 180.744 cv
326.333 180.802 326.504 181.067 326.446 181.336 cv
326.39 181.606 326.126 181.776 325.854 181.722 cv
325.789 181.707 324.243 181.399 323.673 182.507 cv
323.584 182.679 323.409 182.778 323.229 182.778 cv
cp
f
332.641 181.258 mo
332.481 181.258 332.325 181.182 332.228 181.041 cv
332.133 180.903 331.788 180.514 331.459 180.514 cv
331.188 180.515 330.935 180.801 330.771 181.041 cv
330.614 181.27 330.303 181.327 330.076 181.171 cv
329.849 181.015 329.79 180.704 329.945 180.476 cv
330.383 179.838 330.892 179.514 331.459 179.514 cv
332.375 179.516 332.987 180.379 333.055 180.478 cv
333.209 180.706 333.15 181.017 332.922 181.172 cv
332.836 181.23 332.737 181.258 332.641 181.258 cv
cp
f
315.489 187.34 mo
315.489 187.34 321.264 187.494 325.207 181.178 cv
329.15 174.861 328.688 173.258 328.688 173.258 cv
332.617 179.779 li
332.617 179.779 333.496 175.258 331.688 172.375 cv
329.879 169.493 328.002 170.09 328.002 170.09 cv
315.487 173.217 li
312.191 183.249 li
315.489 187.34 li
cp
f
325.52 187.492 mo
325.271 187.492 325.057 187.308 325.024 187.055 cv
324.711 184.596 li
324.691 184.439 324.746 184.282 324.86 184.173 cv
326.129 182.95 li
326.327 182.758 326.644 182.764 326.836 182.963 cv
327.027 183.162 327.021 183.479 326.822 183.67 cv
325.734 184.719 li
326.017 186.929 li
326.052 187.203 325.857 187.453 325.584 187.488 cv
325.563 187.491 325.541 187.492 325.52 187.492 cv
cp
f
331.5 191.765 mo
331.227 191.765 331.004 191.545 331 191.272 cv
330.964 188.721 329.45 185.393 329.436 185.36 cv
329.32 185.109 329.431 184.812 329.682 184.697 cv
329.93 184.582 330.229 184.69 330.344 184.943 cv
330.41 185.087 331.961 188.498 332 191.257 cv
332.004 191.534 331.783 191.761 331.507 191.765 cv
331.505 191.765 331.502 191.765 331.5 191.765 cv
cp
f
326.889 194.768 mo
327.224 195.253 327.7 195.732 328.252 195.772 cv
328.813 195.813 329.257 195.523 329.565 195.227 cv
326.889 194.768 li
cp
328.363 196.776 mo
328.304 196.776 328.243 196.773 328.181 196.769 cv
326.44 196.645 325.53 194.38 325.493 194.284 cv
325.427 194.116 325.456 193.925 325.57 193.786 cv
325.685 193.646 325.867 193.58 326.043 193.608 cv
330.56 194.383 li
330.718 194.411 330.854 194.513 330.925 194.658 cv
330.995 194.802 330.991 194.973 330.914 195.114 cv
330.876 195.184 329.994 196.776 328.363 196.776 cv
cp
f
315.009 192.901 mo
314.879 192.901 314.748 192.85 314.65 192.75 cv
311.034 189.031 li
310.842 188.833 310.846 188.516 311.044 188.324 cv
311.243 188.132 311.559 188.136 311.751 188.333 cv
315.367 192.052 li
315.56 192.25 315.556 192.567 315.357 192.759 cv
315.26 192.854 315.135 192.901 315.009 192.901 cv
cp
f
310.67 192.901 mo
310.464 192.901 310.271 192.772 310.198 192.566 cv
310.106 192.306 310.243 192.021 310.504 191.929 cv
313.737 190.793 li
313.999 190.701 314.283 190.838 314.375 191.099 cv
314.467 191.359 314.33 191.645 314.069 191.736 cv
310.836 192.873 li
310.781 192.892 310.725 192.901 310.67 192.901 cv
cp
f
326.016 211.932 mo
319.612 211.932 316.081 208.528 315.902 208.352 cv
315.706 208.157 315.704 207.842 315.898 207.646 cv
316.093 207.448 316.41 207.446 316.604 207.64 cv
316.655 207.688 321.714 212.532 330.575 210.357 cv
330.847 210.293 331.115 210.456 331.18 210.724 cv
331.246 210.992 331.082 211.263 330.813 211.328 cv
329.07 211.756 327.469 211.932 326.016 211.932 cv
cp
1 1 1 rgb
f
313.2 236.94 mo
312.11 240.36 310.53 243.14 308.71 245.39 cv
304.19 245.39 li
303.44 245.18 li
303.4 245.17 303.37 245.16 303.33 245.15 cv
302.05 244.76 300.77 244.32 299.54 243.82 cv
299.5 243.8 299.46 243.79 299.42 243.77 cv
298.54 243.42 297.67 243.04 296.82 242.63 cv
296.25 242.37 295.69 242.09 295.14 241.79 cv
294.37 241.4 293.61 240.97 292.87 240.52 cv
292.56 240.34 292.25 240.15 291.96 239.95 cv
292.89 230.34 294.92 221.66 298.85 216.74 cv
302.53 212.15 306.63 209.21 310.47 207.33 cv
312.9 212.71 317.13 224.68 313.2 236.94 cv
cp
.572549 .705882 .917647 rgb
f
306.8 209.43 mo
303.81 245.39 li
279.01 245.39 li
279.74 242.8 281.55 238.14 284.06 233.72 cv
292.26 218.45 306.8 209.43 306.8 209.43 cv
cp
f
114.69 158.85 mo
114.69 238.85 li
114.69 239.31 114.64 239.77 114.55 240.21 cv
113.92 243.17 111.29 245.39 108.15 245.39 cv
28.1499 245.39 li
27.9097 245.39 27.6699 245.38 27.4399 245.35 cv
24.1499 245 21.6001 242.22 21.6001 238.85 cv
21.6001 158.85 li
21.6001 155.23 24.5298 152.3 28.1499 152.3 cv
108.15 152.3 li
111.76 152.3 114.69 155.23 114.69 158.85 cv
cp
.909804 .882353 .937255 rgb
f
101.86 245.39 mo
28.1499 245.39 li
27.9097 245.39 27.6699 245.38 27.4399 245.35 cv
32.73 231.83 40.3999 219.52 47.5498 216.64 cv
47.5498 216.64 58.1201 213.74 58.71 213.72 cv
75.54 213.07 84.5 219.75 85.02 220.15 cv
85.0698 220.18 95.7197 230.53 101.86 245.39 cv
cp
.639216 .482353 .564706 rgb
f
61.8144 190.966 mo
61.8144 190.966 65.6265 190.023 67.4131 187.83 cv
69.2002 185.635 69.4946 180.208 69.4946 180.208 cv
69.4946 180.208 76.3975 183.799 78.2119 183.4 cv
80.0264 183.001 83.582 174.874 81.187 171.363 cv
78.7915 167.852 73.9448 172.199 73.9448 172.199 cv
73.9448 172.199 72.9502 167.183 67.6504 168.354 cv
61.4297 169.727 59.8203 176.044 59.8203 176.044 cv
59.8203 176.044 59.4023 169.189 55.0747 172.199 cv
50.7466 175.208 52.3047 183.066 52.3047 183.066 cv
52.3047 183.066 48.8423 184.568 49.5347 187.83 cv
50.2275 191.091 54.9014 194.23 54.9014 194.23 cv
61.8144 190.966 li
cp
0 0 0 rgb
f
61.1968 200.806 mo
60.2895 211.142 li
60.2895 211.142 61.959 214.271 68.1772 215.275 cv
72.8091 216.022 74.5371 215.139 74.5371 215.139 cv
74.3462 209.851 li
74.1528 204.693 li
63.0581 201.366 li
61.1968 200.806 li
cp
.956863 .517647 .384314 rgb
f
63.0581 201.366 mo
63.0605 201.65 63.1421 201.993 63.2817 202.389 cv
65.2231 207.748 71.6728 209.397 74.3462 209.851 cv
74.1528 204.693 li
63.0581 201.366 li
cp
0 0 0 rgb
f
78.6069 181.329 mo
78.6069 181.329 83.0864 194.748 80.2402 201.767 cv
77.3945 208.786 70.6992 206.988 66.7676 205.197 cv
62.8364 203.406 61.1953 200.808 61.1953 200.808 cv
61.1953 200.808 57.2578 201.686 55.0659 198.019 cv
52.8745 194.353 54.8511 190.578 57.1186 189.888 cv
59.3867 189.199 61.8144 190.966 61.8144 190.966 cv
60.1763 187.034 li
60.1763 187.034 70.6758 168.875 78.6069 181.329 cv
cp
.956863 .517647 .384314 rgb
f
60.9648 196.602 mo
60.853 196.602 60.7397 196.564 60.647 196.487 cv
56.1191 192.744 li
55.9062 192.568 55.876 192.253 56.0522 192.041 cv
56.2275 191.828 56.543 191.796 56.7559 191.974 cv
61.2837 195.717 li
61.4966 195.893 61.5268 196.208 61.3506 196.42 cv
61.2519 196.54 61.1089 196.602 60.9648 196.602 cv
cp
0 0 0 rgb
f
69.2798 187.021 mo
69.1562 187.021 69.0322 186.976 68.9355 186.884 cv
68.7353 186.694 68.727 186.377 68.917 186.177 cv
70.5561 184.449 72.499 184.95 73.2974 185.456 cv
73.5308 185.604 73.6001 185.913 73.4521 186.146 cv
73.3047 186.378 72.9971 186.447 72.7642 186.302 cv
72.688 186.256 71.1113 185.317 69.6426 186.866 cv
69.5439 186.969 69.4121 187.021 69.2798 187.021 cv
cp
f
79.6235 186.499 mo
79.5 186.499 79.3765 186.454 79.2803 186.362 cv
78.2646 185.403 77.0591 185.93 77.0083 185.952 cv
76.7573 186.066 76.4614 185.955 76.3472 185.704 cv
76.2329 185.454 76.3403 185.159 76.5898 185.043 cv
76.665 185.01 78.4512 184.203 79.9668 185.636 cv
80.1675 185.825 80.1768 186.142 79.9868 186.342 cv
79.8887 186.446 79.7563 186.499 79.6235 186.499 cv
cp
f
76.0649 196.185 mo
76.0019 196.185 75.9385 196.173 75.8765 196.148 cv
75.6211 196.044 75.4976 195.752 75.6016 195.496 cv
77.0029 192.049 75.4038 190.808 75.335 190.757 cv
75.1152 190.593 75.0649 190.282 75.2256 190.06 cv
75.3867 189.839 75.6934 189.785 75.916 189.943 cv
76.0117 190.01 78.2456 191.647 76.5283 195.873 cv
76.4492 196.067 76.2622 196.185 76.0649 196.185 cv
cp
f
79.1392 191.461 mo
78.9038 191.461 78.6943 191.294 78.6484 191.055 cv
78.1865 188.63 li
78.1348 188.358 78.313 188.097 78.584 188.045 cv
78.8603 187.996 79.1172 188.172 79.1689 188.442 cv
79.6309 190.868 li
79.6826 191.139 79.5044 191.401 79.2334 191.453 cv
79.2017 191.458 79.1699 191.461 79.1392 191.461 cv
cp
f
71.3852 191.461 mo
71.1499 191.461 70.9404 191.294 70.8945 191.055 cv
70.4326 188.63 li
70.3809 188.358 70.5591 188.097 70.8301 188.045 cv
71.105 187.996 71.3638 188.172 71.415 188.442 cv
71.8769 190.868 li
71.9287 191.139 71.7505 191.401 71.4795 191.453 cv
71.4477 191.458 71.416 191.461 71.3852 191.461 cv
cp
f
73.9385 200.083 mo
73.7148 200.083 71.0688 200.029 70.1221 197.554 cv
70.0229 197.296 70.1523 197.007 70.4101 196.909 cv
70.666 196.811 70.957 196.939 71.0557 197.197 cv
71.7671 199.055 73.8213 199.083 73.9385 199.083 cv
74.2173 199.083 74.4414 199.304 74.4434 199.579 cv
74.4453 199.854 74.2251 200.08 73.9497 200.083 cv
73.9473 200.083 73.9434 200.083 73.9385 200.083 cv
cp
f
61.8144 190.966 mo
61.8144 190.966 65.9023 190.255 67.4131 186.911 cv
68.9238 183.567 68.7021 180.558 68.7021 180.558 cv
68.7021 180.558 70.7661 182.82 74.3462 182.441 cv
77.9263 182.063 78.9087 178.385 78.9087 178.385 cv
75.6284 174.539 li
75.6284 174.539 62.1494 177.384 61.8144 176.964 cv
61.48 176.545 56.5757 185.289 56.5757 185.289 cv
61.8144 190.966 li
cp
f
88.6401 245.39 mo
39.4697 245.39 li
41.3599 233.3 44.3701 219.4 45.8198 218.3 cv
46.1699 218.05 47.5801 216.64 47.5801 216.64 cv
49.6201 215.52 52.21 214.96 54.3701 214.68 cv
54.52 214.66 54.6499 214.63 54.7998 214.62 cv
55.02 214.59 55.2397 214.57 55.46 214.55 cv
55.6597 214.53 55.8701 214.52 56.0698 214.5 cv
56.3599 214.48 56.6401 214.46 56.8901 214.45 cv
58 214.38 58.6997 214.39 58.6997 214.39 cv
58.6997 214.39 58.6997 214.37 58.71 214.31 cv
58.7598 213.6 59.1997 208.07 60.5601 208.19 cv
62 208.33 65.5 210.99 69.1997 211.33 cv
72.9097 211.66 74.8901 211.29 75.6299 211.29 cv
76.3799 211.29 76.5298 215.67 76.5298 215.67 cv
76.5298 215.67 81.5 217.54 85.02 221.43 cv
85.0698 221.46 85.1001 221.51 85.1299 221.55 cv
85.2998 221.75 85.6997 222.24 86.29 222.99 cv
86.7397 223.62 87.1299 224.27 87.46 224.98 cv
88.4497 227.12 88.73 235.4 88.6401 245.39 cv
cp
.639216 .482353 .564706 rgb
f
66.5518 215.938 mo
63.1211 215.938 58.7451 214.341 58.5283 214.261 cv
58.269 214.166 58.1367 213.878 58.2319 213.619 cv
58.3276 213.36 58.6157 213.228 58.874 213.323 cv
58.9341 213.345 64.9077 215.526 68.0635 214.788 cv
68.3315 214.728 68.6006 214.894 68.6636 215.162 cv
68.7261 215.431 68.5591 215.7 68.29 215.763 cv
67.7617 215.885 67.1724 215.938 66.5518 215.938 cv
cp
1 1 1 rgb
f
56.5762 196.51 mo
56.3975 196.51 56.2246 196.415 56.1348 196.246 cv
56.0044 196.002 56.0967 195.699 56.3398 195.569 cv
58.939 194.181 li
59.1836 194.051 59.4858 194.142 59.6157 194.386 cv
59.7461 194.629 59.6538 194.933 59.4106 195.063 cv
56.8115 196.451 li
56.7363 196.491 56.6558 196.51 56.5762 196.51 cv
cp
0 0 0 rgb
f
68.147 188.644 mo
67.9404 188.644 67.772 188.812 67.772 189.019 cv
67.772 191.412 li
67.772 192.441 68.6094 193.279 69.6392 193.279 cv
71.9458 193.279 li
72.9756 193.279 73.813 192.441 73.813 191.412 cv
73.813 189.019 li
73.813 188.812 73.6445 188.644 73.4375 188.644 cv
68.147 188.644 li
cp
71.9458 194.279 mo
69.6392 194.279 li
68.0581 194.279 66.772 192.993 66.772 191.412 cv
66.772 189.019 li
66.772 188.261 67.3887 187.644 68.147 187.644 cv
73.4375 187.644 li
74.1958 187.644 74.813 188.261 74.813 189.019 cv
74.813 191.412 li
74.813 192.993 73.5268 194.279 71.9458 194.279 cv
cp
.407843 .462745 .666667 rgb
f
77.9614 188.764 mo
77.7954 188.764 77.6601 188.899 77.6601 189.065 cv
77.6601 191.731 li
77.6601 192.651 78.4082 193.399 79.3281 193.399 cv
80.8984 193.399 li
81.8184 193.399 82.5664 192.651 82.5664 191.731 cv
82.5664 189.065 li
82.5664 188.899 82.4311 188.764 82.2646 188.764 cv
77.9614 188.764 li
cp
80.8984 194.399 mo
79.3281 194.399 li
77.8569 194.399 76.6601 193.202 76.6601 191.731 cv
76.6601 189.065 li
76.6601 188.348 77.2441 187.764 77.9614 187.764 cv
82.2646 187.764 li
82.9824 187.764 83.5664 188.348 83.5664 189.065 cv
83.5664 191.731 li
83.5664 193.202 82.3696 194.399 80.8984 194.399 cv
cp
f
73.5351 191.461 mo
73.3525 191.461 73.1768 191.361 73.0884 191.188 cv
72.9639 190.942 73.0605 190.642 73.3061 190.516 cv
73.3877 190.475 75.3433 189.494 77.3486 190.308 cv
77.6045 190.412 77.7275 190.704 77.6235 190.96 cv
77.519 191.215 77.2266 191.338 76.9717 191.235 cv
75.4018 190.594 73.7764 191.399 73.7602 191.407 cv
73.688 191.444 73.6108 191.461 73.5351 191.461 cv
cp
f
57.8638 190.249 mo
57.6655 190.249 57.478 190.13 57.3999 189.935 cv
57.2969 189.678 57.4214 189.387 57.6777 189.285 cv
63.0166 187.142 67.313 189.21 67.4936 189.3 cv
67.7407 189.423 67.8418 189.722 67.7202 189.969 cv
67.5986 190.216 67.2983 190.318 67.0513 190.197 cv
67.0112 190.178 62.9595 188.244 58.0498 190.212 cv
57.9888 190.237 57.9258 190.249 57.8638 190.249 cv
cp
f
239 279.21 mo
239 359.21 li
239 361.37 237.96 363.29 236.35 364.48 cv
235.84 364.86 235.27 365.16 234.66 365.38 cv
234.14 365.57 233.58 365.69 233.01 365.74 cv
232.83 365.75 232.65 365.76 232.46 365.76 cv
152.46 365.76 li
152 365.76 151.56 365.71 151.13 365.62 cv
150.45 365.48 149.81 365.24 149.23 364.9 cv
148.8 364.66 148.41 364.37 148.05 364.04 cv
146.74 362.85 145.92 361.12 145.92 359.21 cv
145.92 279.21 li
145.92 275.6 148.85 272.67 152.46 272.67 cv
232.46 272.67 li
236.07 272.67 239 275.6 239 279.21 cv
cp
.909804 .882353 .937255 rgb
f
224.69 347.595 mo
224.69 347.595 232.312 345.301 229.994 334.157 cv
227.994 324.542 215.404 323.078 215.404 323.078 cv
215.404 323.078 219.365 317.134 216.327 309.94 cv
213.411 303.035 209.348 301.724 209.348 301.724 cv
209.348 301.724 209.693 296.125 205.282 291.732 cv
200.87 287.339 194.858 291.941 194.858 291.941 cv
194.858 291.941 183.453 289.459 176.416 295.515 cv
169.379 301.57 172.104 311.993 172.104 311.993 cv
172.104 311.993 160.901 316.038 158.176 327.88 cv
155.451 339.722 162.513 346.081 162.513 346.081 cv
224.69 347.595 li
cp
0 0 0 rgb
f
233.01 365.74 mo
232.83 365.75 232.65 365.76 232.46 365.76 cv
152.46 365.76 li
152 365.76 151.56 365.71 151.13 365.62 cv
150.45 365.48 149.81 365.24 149.23 364.9 cv
148.8 364.66 148.41 364.37 148.05 364.04 cv
151.95 354.88 158.75 341.64 166.01 336.17 cv
178.05 327.07 181.21 325.42 200.42 327.45 cv
212.76 328.75 225.8 343.54 233.01 365.74 cv
cp
.968627 .701961 .411765 rgb
f
186.306 321.158 mo
185.813 328.941 li
185.813 328.941 188.605 331.607 192.359 331.879 cv
197.428 332.245 199.461 329.568 199.461 329.568 cv
199.897 319.317 li
186.306 321.158 li
cp
.956863 .517647 .384314 rgb
f
186.307 321.146 mo
186.307 321.146 188.411 328.699 194.727 327.116 cv
199.287 325.974 199.833 320.147 199.833 320.147 cv
186.307 321.146 li
cp
0 0 0 rgb
f
203.257 299.838 mo
203.257 299.838 205.176 313.919 200.279 320.338 cv
195.381 326.756 189.603 324.475 187.076 322.3 cv
183.668 319.367 183.148 315.53 183.148 315.53 cv
183.148 315.53 178.202 316.234 176.791 312.154 cv
175.308 307.868 178.542 304.654 181 304.59 cv
183.458 304.525 183.719 304.986 183.719 304.986 cv
183.248 300.472 li
183.248 300.472 199.037 284.757 203.257 299.838 cv
cp
.956863 .517647 .384314 rgb
f
200.54 306.237 mo
200.54 306.237 208.131 303.48 208.391 309.255 cv
208.693 315.945 200.738 315.567 200.738 315.567 cv
200.54 306.237 li
cp
f
182.499 305.362 mo
182.499 305.362 185.024 306.584 190.704 302.895 cv
196.383 299.206 195.059 294.402 195.059 294.402 cv
195.059 294.402 202.267 299.488 203.618 305.424 cv
204.969 311.36 206.782 291.819 198.288 291.733 cv
189.794 291.647 176.812 296.468 182.499 305.362 cv
cp
0 0 0 rgb
f
203.926 312.493 mo
203.832 312.493 203.736 312.467 203.651 312.41 cv
203.421 312.259 203.357 311.948 203.509 311.718 cv
206.219 307.612 li
206.371 307.382 206.681 307.317 206.912 307.471 cv
207.142 307.622 207.206 307.933 207.054 308.163 cv
204.344 312.269 li
204.248 312.414 204.089 312.493 203.926 312.493 cv
cp
f
182.584 311.462 mo
182.459 311.462 182.335 311.416 182.238 311.323 cv
178.641 307.876 li
178.441 307.685 178.435 307.368 178.626 307.169 cv
178.817 306.969 179.133 306.963 179.333 307.153 cv
182.93 310.601 li
183.129 310.792 183.136 311.108 182.945 311.308 cv
182.847 311.41 182.715 311.462 182.584 311.462 cv
cp
f
179.064 311.865 mo
178.903 311.865 178.744 311.787 178.648 311.644 cv
178.494 311.414 178.556 311.104 178.786 310.949 cv
181.107 309.396 li
181.336 309.244 181.647 309.306 181.8 309.534 cv
181.954 309.764 181.892 310.074 181.663 310.229 cv
179.341 311.781 li
179.256 311.838 179.16 311.865 179.064 311.865 cv
cp
f
206.876 311.38 mo
206.84 311.379 204.726 311.227 204.726 311.227 cv
204.451 311.206 204.244 310.967 204.264 310.691 cv
204.284 310.416 204.532 310.203 204.798 310.229 cv
206.912 310.381 li
207.188 310.401 207.395 310.641 207.375 310.916 cv
207.356 311.179 207.136 311.38 206.876 311.38 cv
cp
f
195.181 314.292 mo
195.145 314.292 195.108 314.288 195.072 314.28 cv
194.802 314.22 194.632 313.952 194.693 313.684 cv
195.47 310.197 194.4 307.243 194.389 307.213 cv
194.293 306.955 194.425 306.667 194.684 306.57 cv
194.943 306.477 195.23 306.605 195.326 306.864 cv
195.375 306.995 196.514 310.114 195.668 313.9 cv
195.617 314.134 195.41 314.292 195.181 314.292 cv
cp
f
192.152 316.529 mo
192.462 316.863 192.859 317.148 193.298 317.148 cv
193.714 317.147 194.12 317.025 194.469 316.868 cv
192.152 316.529 li
cp
193.298 318.148 mo
191.634 318.148 190.688 316.166 190.648 316.082 cv
190.57 315.915 190.59 315.72 190.7 315.572 cv
190.81 315.425 190.99 315.353 191.173 315.375 cv
195.946 316.073 li
196.138 316.102 196.296 316.238 196.353 316.425 cv
196.408 316.61 196.352 316.813 196.207 316.941 cv
196.151 316.99 194.84 318.146 193.301 318.148 cv
193.3 318.148 193.299 318.148 193.298 318.148 cv
cp
f
200.139 303.063 mo
200.018 303.063 199.897 303.02 199.801 302.932 cv
199.055 302.249 197.627 302.224 197.613 302.224 cv
197.337 302.22 197.116 301.994 197.119 301.718 cv
197.122 301.442 197.338 301.211 197.623 301.224 cv
197.697 301.225 199.445 301.251 200.476 302.193 cv
200.68 302.38 200.694 302.696 200.508 302.899 cv
200.409 303.008 200.274 303.063 200.139 303.063 cv
cp
f
189.228 303.535 mo
189.098 303.535 188.968 303.484 188.87 303.384 cv
188.677 303.186 188.682 302.869 188.879 302.677 cv
189.881 301.703 191.627 301.622 191.701 301.619 cv
191.964 301.617 192.208 301.823 192.22 302.099 cv
192.232 302.374 192.018 302.606 191.742 302.619 cv
191.728 302.619 190.302 302.688 189.577 303.394 cv
189.479 303.488 189.354 303.535 189.228 303.535 cv
cp
f
192.995 332.731 mo
187.458 332.731 185.318 329.613 185.229 329.48 cv
185.076 329.251 185.139 328.94 185.368 328.787 cv
185.599 328.634 185.908 328.695 186.062 328.926 cv
186.139 329.039 188.024 331.731 192.995 331.731 cv
193.018 331.731 193.041 331.731 193.063 331.731 cv
198.647 331.705 199.775 328.667 199.82 328.537 cv
199.911 328.278 200.194 328.143 200.455 328.228 cv
200.715 328.316 200.855 328.597 200.768 328.857 cv
200.715 329.015 199.411 332.702 193.068 332.731 cv
193.044 332.731 193.019 332.731 192.995 332.731 cv
cp
.25098 .313726 .498039 rgb
f
203.618 305.424 mo
203.618 305.424 210.299 296.95 205.282 291.732 cv
200.264 286.514 185.813 283.907 178.987 293.765 cv
174.147 300.754 182.499 305.362 182.499 305.362 cv
191.781 295.84 li
195.059 294.402 li
200.54 295.84 li
203.618 305.424 li
cp
0 0 0 rgb
f
189.64 308.347 mo
189.372 308.347 189.149 308.134 189.141 307.863 cv
189.06 305.46 li
189.054 305.297 189.129 305.141 189.26 305.042 cv
190.802 303.894 li
191.024 303.729 191.337 303.774 191.502 303.996 cv
191.667 304.218 191.621 304.531 191.4 304.696 cv
190.067 305.688 li
190.14 307.83 li
190.149 308.105 189.933 308.337 189.657 308.347 cv
189.651 308.347 189.646 308.347 189.64 308.347 cv
cp
f
198.436 308.347 mo
198.168 308.347 197.946 308.134 197.937 307.863 cv
197.856 305.46 li
197.85 305.297 197.925 305.141 198.057 305.042 cv
199.599 303.894 li
199.821 303.729 200.133 303.774 200.298 303.996 cv
200.463 304.218 200.417 304.531 200.196 304.696 cv
198.864 305.688 li
198.936 307.83 li
198.945 308.105 198.729 308.337 198.454 308.347 cv
198.448 308.347 198.442 308.347 198.436 308.347 cv
cp
f
487.63 158.85 mo
487.63 238.85 li
487.63 241.29 486.29 243.42 484.3 244.54 cv
483.64 244.91 482.91 245.18 482.14 245.3 cv
482.05 245.32 481.97 245.33 481.88 245.33 cv
481.62 245.37 481.36 245.39 481.09 245.39 cv
401.09 245.39 li
400.33 245.39 399.59 245.26 398.91 245.01 cv
398.37 244.82 397.87 244.57 397.41 244.25 cv
395.68 243.08 394.55 241.09 394.55 238.85 cv
394.55 158.85 li
394.55 155.23 397.479 152.3 401.09 152.3 cv
481.09 152.3 li
484.7 152.3 487.63 155.23 487.63 158.85 cv
cp
.909804 .882353 .937255 rgb
f
457.6 231.7 mo
436.22 245.39 li
401.3 245.39 li
405.31 227.06 415.62 210.7 430.97 206.37 cv
434.49 205.38 437.6 205.48 440.32 206.34 cv
453.31 210.45 457.6 231.7 457.6 231.7 cv
cp
.639216 .482353 .564706 rgb
f
481.88 245.33 mo
481.62 245.37 481.36 245.39 481.09 245.39 cv
417.76 245.39 li
417.03 245.02 416.3 244.63 415.59 244.22 cv
416.729 229.9 417.87 218.46 418.76 216.1 cv
420.52 211.39 432.3 208.08 440.32 206.34 cv
444.61 205.42 447.83 204.95 447.83 204.95 cv
447.83 204.95 459.15 205.66 471.64 218.41 cv
479.25 226.18 481.45 236.91 481.88 245.33 cv
cp
f
430.337 171.545 mo
430.337 171.545 425.487 177.031 428.153 183.079 cv
430.819 189.126 433.679 172.092 433.679 172.092 cv
430.337 171.545 li
cp
0 0 0 rgb
f
446.646 196.194 mo
446.831 207.075 li
446.831 207.075 444.922 210.236 438.564 210.862 cv
433.829 211.327 432.146 210.284 432.146 210.284 cv
432.713 204.762 li
433.273 199.376 li
444.726 196.653 li
446.646 196.194 li
cp
.956863 .517647 .384314 rgb
f
444.726 196.653 mo
444.703 196.951 446.477 197.886 446.308 198.291 cv
443.965 203.768 435.236 206.521 432.502 206.813 cv
433.273 199.376 li
444.726 196.653 li
cp
0 0 0 rgb
f
432.404 172.088 mo
430.91 173.304 429.864 174.978 429.246 176.803 cv
427.824 181.002 424.954 190.807 426.835 196.819 cv
429.278 204.632 436.322 203.169 440.51 201.513 cv
444.698 199.857 446.578 197.161 446.578 197.161 cv
446.578 197.161 450.584 198.397 453.107 194.583 cv
455.631 190.768 453.856 186.534 451.562 185.623 cv
449.268 184.711 446.635 186.45 446.635 186.45 cv
448.605 182.307 li
448.605 182.307 440.675 165.355 432.404 172.088 cv
cp
.956863 .517647 .384314 rgb
f
447.214 191.786 mo
447.062 191.786 446.911 191.717 446.813 191.585 cv
446.647 191.363 446.693 191.05 446.915 190.885 cv
450.889 187.924 li
451.108 187.759 451.423 187.803 451.589 188.026 cv
451.754 188.248 451.708 188.561 451.486 188.726 cv
447.513 191.687 li
447.423 191.754 447.318 191.786 447.214 191.786 cv
cp
0 0 0 rgb
f
451.682 191.649 mo
451.644 191.649 451.604 191.645 451.565 191.636 cv
448.322 190.86 li
448.054 190.795 447.888 190.526 447.952 190.257 cv
448.016 189.989 448.283 189.823 448.555 189.887 cv
451.798 190.663 li
452.066 190.728 452.232 190.997 452.168 191.266 cv
452.113 191.495 451.908 191.649 451.682 191.649 cv
cp
f
429.201 184.813 mo
429.161 184.813 429.119 184.808 429.078 184.797 cv
428.811 184.729 428.648 184.457 428.717 184.189 cv
429.355 181.682 li
429.424 181.415 429.692 181.25 429.963 181.321 cv
430.23 181.389 430.393 181.662 430.324 181.929 cv
429.686 184.437 li
429.628 184.663 429.425 184.813 429.201 184.813 cv
cp
f
436.095 185.179 mo
436.055 185.179 436.013 185.174 435.972 185.163 cv
435.704 185.095 435.542 184.823 435.61 184.555 cv
436.249 182.048 li
436.316 181.781 436.587 181.616 436.856 181.687 cv
437.124 181.755 437.286 182.027 437.218 182.295 cv
436.579 184.802 li
436.521 185.028 436.318 185.179 436.095 185.179 cv
cp
f
428.807 179.34 mo
428.555 179.34 428.338 179.15 428.311 178.894 cv
428.281 178.619 428.479 178.373 428.754 178.343 cv
430.818 178.119 li
431.092 178.094 431.34 178.287 431.369 178.563 cv
431.398 178.837 431.2 179.083 430.926 179.113 cv
428.861 179.337 li
428.843 179.339 428.825 179.34 428.807 179.34 cv
cp
f
438.171 180.998 mo
438.106 180.998 438.041 180.986 437.978 180.959 cv
435.171 179.785 li
434.916 179.678 434.797 179.385 434.903 179.13 cv
435.01 178.875 435.302 178.754 435.558 178.862 cv
438.364 180.037 li
438.619 180.144 438.738 180.437 438.632 180.691 cv
438.552 180.883 438.366 180.998 438.171 180.998 cv
cp
f
446.635 186.45 mo
446.635 186.45 445.507 190.979 444.638 190.427 cv
443.77 189.875 442.958 183.345 443.605 180.422 cv
444.252 177.499 444.725 176.029 444.725 176.029 cv
444.725 176.029 432.838 174.973 429.704 172.148 cv
426.571 169.323 433.19 167.5 439.96 168.783 cv
446.729 170.064 449.398 172.608 449.398 172.608 cv
449.398 172.608 453.641 171.976 455.226 174.563 cv
456.811 177.151 453.203 186.982 453.203 186.982 cv
453.203 186.982 452.134 184.515 446.635 186.45 cv
cp
f
423.964 191.127 mo
423.964 191.127 427.285 187.45 428.976 188.001 cv
430.666 188.553 431.281 191.025 431.281 191.025 cv
431.281 191.025 433.287 188.247 435.5 189.029 cv
437.713 189.81 442.458 190.1 442.508 190.867 cv
442.558 191.635 441.185 191.91 441.185 191.91 cv
441.185 191.91 430.017 193.2 423.964 191.127 cv
cp
f
446.635 186.45 mo
446.635 186.45 446.436 193.794 446.578 197.161 cv
446.72 200.527 437.361 205.779 430.896 202.878 cv
424.433 199.978 426.205 191.507 426.205 191.507 cv
431.966 192.039 li
431.966 192.039 433.294 191.286 434.804 190.976 cv
436.313 190.665 438.325 191.487 438.325 191.487 cv
446.635 186.45 li
cp
f
432.87 193.717 mo
432.64 193.717 432.441 193.542 432.417 193.308 cv
432.391 193.057 432.572 192.832 432.823 192.805 cv
432.843 192.802 434.797 192.575 435.51 191.149 cv
435.623 190.923 435.9 190.833 436.123 190.945 cv
436.35 191.058 436.44 191.333 436.328 191.559 cv
435.389 193.438 433.019 193.704 432.918 193.714 cv
432.902 193.716 432.887 193.717 432.87 193.717 cv
cp
f
431.076 190.254 mo
430.894 190.254 430.717 190.153 430.629 189.978 cv
429.011 186.745 431.336 183.346 431.436 183.203 cv
431.592 182.976 431.903 182.92 432.131 183.079 cv
432.357 183.236 432.413 183.548 432.256 183.774 cv
432.235 183.805 430.174 186.834 431.523 189.531 cv
431.646 189.777 431.547 190.078 431.3 190.202 cv
431.229 190.237 431.151 190.254 431.076 190.254 cv
cp
f
435.59 211.401 mo
432.399 211.401 429.933 210.78 429.714 210.724 cv
429.447 210.653 429.287 210.381 429.356 210.113 cv
429.425 209.848 429.697 209.686 429.966 209.755 cv
430.078 209.783 441.255 212.585 446.832 205.978 cv
447.011 205.766 447.327 205.741 447.536 205.918 cv
447.747 206.096 447.774 206.411 447.596 206.622 cv
444.325 210.499 439.433 211.401 435.59 211.401 cv
cp
.968627 .701961 .411765 rgb
f
429.899 193.195 mo
429.899 193.195 431.132 194.617 432.264 194.617 cv
433.396 194.617 434.392 192.687 434.392 192.687 cv
429.899 193.195 li
cp
.94902 .494118 .392157 rgb
f
487.63 279.21 mo
487.63 359.21 li
487.63 361.88 486.04 364.17 483.75 365.19 cv
483.2 365.44 482.6 365.62 481.97 365.69 cv
481.68 365.74 481.38 365.76 481.08 365.76 cv
401.09 365.76 li
401.03 365.76 400.97 365.76 400.91 365.75 cv
399.77 365.73 398.7 365.4 397.78 364.85 cv
395.84 363.73 394.54 361.62 394.54 359.21 cv
394.54 279.21 li
394.54 275.6 397.47 272.67 401.09 272.67 cv
481.08 272.67 li
484.7 272.67 487.63 275.6 487.63 279.21 cv
cp
.909804 .882353 .937255 rgb
f
452.33 365.76 mo
423.09 365.76 li
429.35 326.16 li
449.84 323.35 li
452.33 365.76 li
cp
.572549 .705882 .917647 rgb
f
433.67 323.35 mo
433.51 323.78 433.38 324.16 433.3 324.52 cv
433.3 324.52 430.66 333.16 427.53 357.35 cv
427.16 360.21 426.82 363.03 426.51 365.76 cv
413.31 365.76 li
415.01 349.85 417.27 332.08 419.13 329.53 cv
421.75 325.95 429.88 324.05 433.67 323.35 cv
cp
.968627 .701961 .411765 rgb
f
481.97 365.69 mo
481.68 365.74 481.38 365.76 481.08 365.76 cv
444.95 365.76 li
446.56 326.84 li
446.32 321.87 li
456.57 321.52 464.3 325.05 474.07 338.84 cv
478.74 345.43 480.96 355.88 481.97 365.69 cv
cp
f
447.546 316.529 mo
446.551 326.703 li
446.551 326.703 444.43 329.448 438.432 329.35 cv
433.963 329.276 432.503 328.121 432.503 328.121 cv
433.625 323.029 li
434.727 318.064 li
445.704 316.752 li
447.546 316.529 li
cp
.627451 .345098 .321569 rgb
f
445.704 316.752 mo
445.65 317.027 445.514 317.345 445.313 317.705 cv
442.538 322.563 436.208 323.051 433.625 323.029 cv
434.727 318.064 li
445.704 316.752 li
cp
0 0 0 rgb
f
434.727 294.654 mo
434.727 294.654 428.14 306.887 429.551 314.18 cv
430.962 321.473 437.549 320.884 441.548 319.825 cv
445.547 318.767 447.547 316.532 447.547 316.532 cv
447.547 316.532 451.075 318.062 453.781 314.886 cv
456.486 311.71 455.31 307.711 453.311 306.652 cv
451.311 305.594 448.723 306.887 448.723 306.887 cv
450.958 303.358 li
450.958 303.358 444.371 283.951 434.727 294.654 cv
cp
.627451 .345098 .321569 rgb
f
448.602 312.511 mo
448.43 312.511 448.262 312.422 448.169 312.262 cv
448.03 312.023 448.111 311.717 448.351 311.578 cv
453.256 308.73 li
453.492 308.592 453.8 308.671 453.939 308.912 cv
454.078 309.15 453.997 309.457 453.758 309.596 cv
448.853 312.443 li
448.773 312.489 448.688 312.511 448.602 312.511 cv
cp
0 0 0 rgb
f
452.784 312.863 mo
452.728 312.863 452.67 312.854 452.613 312.833 cv
449.671 311.761 li
449.411 311.666 449.277 311.379 449.372 311.12 cv
449.467 310.86 449.752 310.729 450.013 310.821 cv
452.955 311.894 li
453.215 311.988 453.349 312.275 453.254 312.534 cv
453.18 312.737 452.988 312.863 452.784 312.863 cv
cp
f
442.762 300.948 mo
442.596 300.948 442.433 300.865 442.338 300.714 cv
441.238 298.96 439.629 299.61 439.562 299.64 cv
439.306 299.747 439.013 299.627 438.906 299.373 cv
438.799 299.118 438.919 298.825 439.173 298.718 cv
440.022 298.361 441.949 298.211 443.186 300.183 cv
443.332 300.417 443.262 300.726 443.027 300.872 cv
442.944 300.924 442.853 300.948 442.762 300.948 cv
cp
f
432.941 299.505 mo
432.781 299.505 432.623 299.428 432.526 299.284 cv
432.372 299.055 432.433 298.744 432.662 298.59 cv
434.356 297.45 435.903 298.553 435.968 298.602 cv
436.19 298.764 436.239 299.077 436.076 299.3 cv
435.913 299.522 435.602 299.572 435.381 299.41 cv
435.335 299.379 434.319 298.679 433.221 299.42 cv
433.135 299.478 433.038 299.505 432.941 299.505 cv
cp
f
434.307 311.087 mo
434.072 311.087 433.863 310.921 433.816 310.683 cv
432.989 306.426 435.431 303.688 435.535 303.574 cv
435.72 303.369 436.036 303.356 436.239 303.541 cv
436.444 303.727 436.459 304.042 436.274 304.247 cv
436.253 304.271 434.07 306.744 434.799 310.491 cv
434.852 310.763 434.674 311.025 434.403 311.078 cv
434.371 311.084 434.339 311.087 434.307 311.087 cv
cp
f
432.509 304.397 mo
432.449 304.397 432.39 304.387 432.331 304.364 cv
432.072 304.267 431.943 303.978 432.042 303.72 cv
432.907 301.449 li
433.005 301.19 433.297 301.062 433.552 301.16 cv
433.811 301.258 433.939 301.547 433.841 301.805 cv
432.976 304.075 li
432.9 304.275 432.71 304.397 432.509 304.397 cv
cp
f
438.935 305.153 mo
438.875 305.153 438.815 305.143 438.757 305.12 cv
438.499 305.022 438.369 304.733 438.468 304.476 cv
439.333 302.204 li
439.431 301.944 439.722 301.818 439.978 301.915 cv
440.235 302.013 440.365 302.302 440.267 302.56 cv
439.401 304.831 li
439.326 305.031 439.136 305.153 438.935 305.153 cv
cp
f
433.374 297.424 mo
433.374 297.424 434.679 295.487 437.218 295.718 cv
439.758 295.949 441.064 297.881 441.064 297.881 cv
441.064 297.881 439.533 302.046 442.762 304.653 cv
445.99 307.261 448.723 306.887 448.723 306.887 cv
451.313 306.24 li
453.507 302.762 li
447.029 294.25 li
438.504 289.805 li
433.304 293.674 li
433.374 297.424 li
cp
f
436.421 313.693 mo
436.033 313.693 435.771 313.645 435.737 313.638 cv
435.466 313.585 435.289 313.322 435.343 313.052 cv
435.396 312.779 435.659 312.605 435.928 312.656 cv
436.016 312.673 437.941 313.009 438.938 311.332 cv
439.078 311.094 439.386 311.016 439.622 311.157 cv
439.86 311.298 439.938 311.604 439.797 311.842 cv
438.849 313.438 437.308 313.693 436.421 313.693 cv
cp
f
432.083 300.448 mo
432.083 300.448 433.311 297.063 435.025 295.038 cv
436.741 293.013 443.423 296.264 445.704 300.448 cv
447.984 304.634 448.723 306.887 448.723 306.887 cv
448.723 306.887 452.058 305.43 453.311 306.652 cv
454.563 307.874 454.563 307.874 454.563 307.874 cv
454.563 307.874 457.45 303.661 457.681 302.762 cv
457.912 301.863 457.912 301.863 457.912 301.863 cv
457.912 301.863 458.604 302.396 459.759 300.976 cv
460.913 299.555 460.017 291.001 450.455 286.846 cv
440.893 282.69 435.184 289.254 432.941 292.255 cv
430.699 295.256 432.083 300.448 432.083 300.448 cv
cp
.639216 .482353 .564706 rgb
f
437.919 329.978 mo
434.483 329.978 432.337 328.609 432.23 328.54 cv
431.999 328.39 431.934 328.081 432.084 327.85 cv
432.233 327.618 432.542 327.553 432.775 327.701 cv
432.804 327.72 435.648 329.518 439.943 328.81 cv
444.373 328.079 446.192 325.922 446.21 325.9 cv
446.387 325.688 446.7 325.657 446.913 325.83 cv
447.127 326.004 447.159 326.317 446.986 326.531 cv
446.905 326.632 444.941 328.999 440.105 329.796 cv
439.33 329.924 438.6 329.978 437.919 329.978 cv
cp
1 1 1 rgb
f
457.912 302.363 mo
457.709 302.363 457.518 302.238 457.443 302.036 cv
456.654 299.899 li
456.559 299.641 456.69 299.354 456.95 299.258 cv
457.207 299.16 457.496 299.294 457.592 299.554 cv
458.381 301.69 li
458.477 301.949 458.345 302.236 458.085 302.332 cv
458.028 302.354 457.97 302.363 457.912 302.363 cv
cp
1 .65098 .231373 rgb
f
419.08 365.76 mo
401.09 365.76 li
401.03 365.76 400.97 365.76 400.91 365.75 cv
404.13 355.93 411.42 335.81 419.13 329.53 cv
426.33 323.67 422.22 349.58 419.08 365.76 cv
cp
.968627 .701961 .411765 rgb
f
461.188 354.854 mo
461.14 354.854 461.08 354.859 461.008 354.874 cv
459.112 355.241 458.838 359.87 459.124 363.613 cv
460.651 360.099 462.099 355.826 461.415 354.944 cv
461.393 354.914 461.346 354.854 461.188 354.854 cv
cp
458.819 365.995 mo
458.794 365.995 458.769 365.993 458.742 365.989 cv
458.523 365.955 458.354 365.781 458.324 365.563 cv
458.172 364.446 456.955 354.641 460.818 353.892 cv
461.565 353.751 461.988 354.051 462.206 354.331 cv
463.665 356.214 460.017 364.14 459.271 365.71 cv
459.188 365.886 459.01 365.995 458.819 365.995 cv
cp
1 1 1 rgb
f
114.72 279.84 mo
114.72 359.84 li
114.72 362 113.68 363.92 112.07 365.11 cv
111.58 365.48 111.03 365.77 110.44 365.99 cv
110.42 366 110.4 366 110.38 366.01 cv
109.69 366.26 108.95 366.39 108.18 366.39 cv
28.1797 366.39 li
27.7197 366.39 27.2798 366.34 26.8501 366.25 cv
26.1699 366.11 25.5298 365.87 24.9497 365.53 cv
22.9697 364.41 21.6401 362.28 21.6401 359.84 cv
21.6401 279.84 li
21.6401 276.23 24.5698 273.3 28.1797 273.3 cv
108.18 273.3 li
111.79 273.3 114.72 276.23 114.72 279.84 cv
cp
.909804 .882353 .937255 rgb
f
110.44 365.99 mo
110.42 366 110.4 366 110.38 366.01 cv
109.69 366.26 108.95 366.39 108.18 366.39 cv
75.46 366.39 li
75.02 366.32 74.7798 366.29 74.7798 366.29 cv
62.2998 339.55 li
57.3701 326.72 li
75.1797 324.64 li
75.1797 324.64 84.73 317.51 100.67 341.38 cv
103.79 346.06 107.67 356.56 110.44 365.99 cv
cp
.968627 .701961 .411765 rgb
f
95.6309 366.285 mo
55.1016 366.285 li
61.4194 323.618 li
75.4424 327.01 li
75.4424 327.01 88.2681 331.161 93.2085 351.73 cv
94.3769 356.595 95.1465 361.506 95.6309 366.285 cv
cp
.639216 .482353 .564706 rgb
f
80.8828 310.504 mo
80.8828 310.504 81.3574 301.784 80.5351 295.625 cv
79.978 291.449 72.5171 289.146 72.5171 289.146 cv
72.5171 289.146 58.3872 289.778 56.5181 294.186 cv
54.6489 298.593 56.1421 305.238 56.1421 305.238 cv
80.8828 310.504 li
cp
0 0 0 rgb
f
61.8379 315.147 mo
61.7466 325.383 li
61.7466 325.383 63.5659 328.342 69.5498 328.882 cv
74.0068 329.284 75.4394 327.006 75.4394 327.006 cv
74.439 318.04 li
63.6484 315.565 li
61.8379 315.147 li
cp
.988235 .639216 .592157 rgb
f
61.8589 314.523 mo
61.8823 314.804 61.9858 315.135 62.1479 315.515 cv
64.3926 320.647 72.4331 322.847 75.0073 323.101 cv
74.439 318.04 li
61.8589 314.523 li
cp
0 0 0 rgb
f
76.9292 294.73 mo
76.9292 294.73 82.1865 307.611 80.0054 314.722 cv
77.8242 321.833 71.3286 320.547 67.459 319.067 cv
63.5898 317.588 61.8364 315.15 61.8364 315.15 cv
61.8364 315.15 58.1601 316.298 55.8042 312.848 cv
53.4482 309.397 55.0449 305.541 57.1484 304.699 cv
59.2519 303.858 61.6909 305.422 61.6909 305.422 cv
59.8413 301.67 li
59.8413 301.67 68.4639 283.047 76.9292 294.73 cv
cp
.788235 .435294 .435294 rgb
f
61.6909 305.422 mo
61.6909 305.422 67.1323 306.714 71.146 300.746 cv
75.1592 294.778 74.895 292.263 74.895 292.263 cv
78.4731 298.686 li
78.4731 298.686 79.4692 294.351 77.8184 291.509 cv
76.1675 288.667 74.3359 289.182 74.3359 289.182 cv
62.1528 291.789 li
58.6421 301.364 li
61.6909 305.422 li
cp
0 0 0 rgb
f
75.9575 311.004 mo
75.7266 311.004 75.519 310.843 75.4687 310.607 cv
75.4116 310.338 75.584 310.072 75.854 310.015 cv
76.4219 309.895 76.7646 309.653 76.9023 309.279 cv
77.3472 308.07 75.7915 305.649 75.2114 304.897 cv
75.043 304.679 75.0835 304.364 75.3022 304.196 cv
75.5195 304.027 75.8335 304.066 76.0034 304.286 cv
76.2666 304.628 78.5561 307.677 77.8413 309.624 cv
77.6611 310.114 77.2065 310.75 76.062 310.993 cv
76.0268 311 75.9922 311.004 75.9575 311.004 cv
cp
f
60.9761 311.361 mo
60.8696 311.361 60.7632 311.317 60.6865 311.231 cv
57.3398 307.456 li
57.1977 307.296 57.2124 307.052 57.3726 306.91 cv
57.5312 306.769 57.7759 306.783 57.9184 306.942 cv
61.2656 310.718 li
61.4072 310.878 61.3926 311.122 61.2324 311.264 cv
61.1592 311.329 61.0674 311.361 60.9761 311.361 cv
cp
f
57.3423 310.265 mo
57.1494 310.265 56.9824 310.12 56.959 309.924 cv
56.9336 309.712 57.085 309.52 57.2969 309.494 cv
59.7021 309.206 li
59.915 309.176 60.1064 309.332 60.1318 309.544 cv
60.1572 309.756 60.0059 309.948 59.7939 309.974 cv
57.3887 310.262 li
57.373 310.264 57.3574 310.265 57.3423 310.265 cv
cp
f
78.7666 300.652 mo
78.7329 300.652 78.6982 300.649 78.6636 300.642 cv
76.4141 300.171 li
76.144 300.114 75.9707 299.85 76.0273 299.579 cv
76.0835 299.31 76.3433 299.13 76.6191 299.192 cv
78.8686 299.663 li
79.1387 299.72 79.312 299.984 79.2554 300.255 cv
79.206 300.49 78.998 300.652 78.7666 300.652 cv
cp
f
69.311 301.818 mo
69.1221 301.818 68.9419 301.711 68.8569 301.529 cv
68.7407 301.278 68.8496 300.981 69.1001 300.865 cv
72.8745 299.112 li
73.1255 298.995 73.4228 299.106 73.5386 299.354 cv
73.6548 299.605 73.5459 299.902 73.2954 300.019 cv
69.521 301.771 li
69.4531 301.804 69.3813 301.818 69.311 301.818 cv
cp
f
78.5874 305.883 mo
78.3672 305.883 78.1655 305.736 78.105 305.514 cv
77.477 303.189 li
77.4336 303.027 77.4736 302.854 77.584 302.729 cv
78.3198 301.89 li
78.5019 301.681 78.8174 301.661 79.0254 301.843 cv
79.2329 302.024 79.2539 302.341 79.0718 302.548 cv
78.5127 303.187 li
79.0708 305.252 li
79.1426 305.519 78.9849 305.794 78.7183 305.865 cv
78.6748 305.877 78.6309 305.883 78.5874 305.883 cv
cp
f
71.623 306.281 mo
71.4028 306.281 71.2012 306.135 71.1411 305.912 cv
70.5127 303.589 li
70.4678 303.423 70.5107 303.246 70.6265 303.12 cv
71.6411 302.014 li
71.8281 301.81 72.1435 301.797 72.3476 301.983 cv
72.5513 302.17 72.5649 302.486 72.3784 302.689 cv
71.5498 303.593 li
72.1059 305.65 li
72.1782 305.917 72.0205 306.191 71.7539 306.264 cv
71.7104 306.275 71.6665 306.281 71.623 306.281 cv
cp
f
67.1103 366.285 mo
30.2388 366.285 li
29.8018 366.285 29.3838 366.237 28.9751 366.152 cv
29.9443 360.224 32.1577 353.336 35.9199 345.336 cv
47.2353 321.271 61.4194 323.618 61.4194 323.618 cv
68.0034 333.194 67.3003 361.06 67.1103 366.285 cv
cp
.968627 .701961 .411765 rgb
f
70.1875 329.513 mo
66.6265 329.513 63.1055 327.838 62.8765 327.727 cv
62.6841 327.634 62.604 327.402 62.6968 327.211 cv
62.79 327.018 63.021 326.937 63.2134 327.031 cv
63.2959 327.07 71.5386 330.988 75.145 326.755 cv
75.2842 326.592 75.5288 326.572 75.6904 326.712 cv
75.8525 326.851 75.8721 327.094 75.7339 327.257 cv
74.2793 328.963 72.2266 329.513 70.1875 329.513 cv
cp
1 1 1 rgb
f
80.1309 294.347 mo
80.1309 294.347 73.4556 287.485 65.542 297.343 cv
57.6289 307.199 62.4624 313.488 62.4624 313.488 cv
62.4624 313.488 67.2275 322.957 76.4292 319.451 cv
82.6509 317.081 80.5351 295.625 80.5351 295.625 cv
80.5351 295.625 86.5845 312.955 81.8804 324.643 cv
77.1763 336.328 65.0391 335.288 59.3027 333.242 cv
53.5659 331.196 50.3501 326.576 50.3501 326.576 cv
53.4805 323.101 li
53.4805 323.101 48.4507 299.736 55.6494 291.879 cv
63.0454 283.805 77.0049 284.318 80.1309 294.347 cv
cp
.407843 .462745 .666667 rgb
f
74.0937 314.582 mo
72.8472 314.582 71.9487 313.784 71.5937 313.253 cv
71.4404 313.023 71.5024 312.713 71.7319 312.56 cv
71.9629 312.408 72.2715 312.468 72.4243 312.696 cv
72.4668 312.758 73.333 313.985 74.8384 313.445 cv
75.0972 313.353 75.3843 313.486 75.4775 313.747 cv
75.5708 314.008 75.4355 314.294 75.1753 314.387 cv
74.792 314.524 74.4302 314.582 74.0937 314.582 cv
cp
0 0 0 rgb
f
81.5391 321.615 mo
86.771 326.302 li
86.771 326.302 84.3442 332.808 73.7026 333.242 cv
63.0615 333.677 81.5391 321.615 81.5391 321.615 cv
cp
.407843 .462745 .666667 rgb
f
74.5249 332.894 mo
74.3306 332.894 74.146 332.779 74.0649 332.59 cv
73.9565 332.336 74.0747 332.042 74.3281 331.934 cv
74.3809 331.911 79.623 329.618 81.4082 324.478 cv
81.4985 324.218 81.7832 324.079 82.0444 324.169 cv
82.3052 324.26 82.4434 324.545 82.3525 324.806 cv
80.4194 330.374 74.9521 332.755 74.7202 332.854 cv
74.6562 332.881 74.5898 332.894 74.5249 332.894 cv
cp
.25098 .313726 .498039 rgb
f
71.98 329.993 mo
60.4268 329.993 53.229 323.548 53.1426 323.47 cv
52.9394 323.283 52.9253 322.967 53.1118 322.764 cv
53.2974 322.559 53.6152 322.545 53.8179 322.731 cv
53.918 322.823 64.0146 331.834 79.459 328.078 cv
79.7246 328.011 79.9971 328.177 80.063 328.445 cv
80.1284 328.714 79.9639 328.984 79.6953 329.049 cv
76.9536 329.716 74.3726 329.993 71.98 329.993 cv
cp
f
76.248 329.416 mo
64.0215 329.416 53.563 316.072 53.085 315.453 cv
52.916 315.234 52.9565 314.921 53.1748 314.752 cv
53.3935 314.583 53.7075 314.623 53.876 314.842 cv
54 315.002 66.4453 330.871 79.4717 328.075 cv
79.7432 328.018 80.0078 328.188 80.0659 328.458 cv
80.124 328.728 79.9526 328.994 79.6826 329.052 cv
78.5273 329.302 77.3794 329.416 76.248 329.416 cv
cp
f
363.32 279.21 mo
363.32 359.21 li
363.32 361.92 361.67 364.25 359.33 365.25 cv
359.16 365.32 358.979 365.39 358.8 365.45 cv
358.21 365.63 357.6 365.74 356.95 365.75 cv
356.89 365.76 356.84 365.76 356.78 365.76 cv
276.78 365.76 li
276.28 365.76 275.79 365.7 275.32 365.59 cv
275 365.52 274.7 365.42 274.4 365.3 cv
274.37 365.29 274.34 365.28 274.31 365.26 cv
271.92 364.3 270.23 361.96 270.23 359.21 cv
270.23 279.21 li
270.23 275.6 273.16 272.67 276.78 272.67 cv
356.78 272.67 li
360.39 272.67 363.32 275.6 363.32 279.21 cv
cp
.909804 .882353 .937255 rgb
f
328.91 365.76 mo
299.71 365.76 li
302.63 332.04 li
320.68 327.15 li
327.86 329.59 li
328.91 365.76 li
cp
.639216 .482353 .564706 rgb
f
322.713 320.698 mo
318.188 319.856 305.235 299.021 305.235 299.021 cv
305.235 299.021 298.788 291.072 300.528 290.02 cv
302.27 288.977 303.924 290.574 303.924 290.574 cv
303.924 290.574 309.693 289.665 314.974 289.455 cv
315.643 289.427 316.303 289.407 316.944 289.407 cv
318.886 289.397 320.646 289.522 321.861 289.866 cv
326.654 291.225 329.868 299.079 329.868 299.079 cv
329.868 299.079 332.27 298.858 333.283 302.131 cv
334.307 305.411 327.228 321.54 322.713 320.698 cv
cp
0 0 0 rgb
f
322.658 318.101 mo
322.88 329.073 li
322.88 329.073 320.965 332.268 314.556 332.919 cv
309.782 333.404 308.08 332.357 308.08 332.357 cv
308.634 326.786 li
309.182 321.354 li
320.722 318.569 li
322.658 318.101 li
cp
.956863 .517647 .384314 rgb
f
320.722 318.569 mo
320.7 318.87 320.594 319.226 320.425 319.635 cv
318.08 325.166 311.392 326.483 308.634 326.786 cv
309.182 321.354 li
320.722 318.569 li
cp
0 0 0 rgb
f
306.23 296.392 mo
306.23 296.392 300.75 310.266 303.174 317.864 cv
305.599 325.462 312.548 324.004 316.679 322.371 cv
320.81 320.738 322.659 318.103 322.659 318.103 cv
322.659 318.103 326.615 319.288 329.099 315.561 cv
331.583 311.833 329.824 307.718 327.559 306.841 cv
325.293 305.964 322.697 307.67 322.697 307.67 cv
324.635 303.626 li
324.635 303.626 315.164 283.763 306.23 296.392 cv
cp
.956863 .517647 .384314 rgb
f
306.23 296.392 mo
306.23 296.392 310.5 294.673 312.323 296.18 cv
314.145 297.685 316.293 310.404 322.697 307.67 cv
329.102 304.936 325.788 296.787 325.788 296.787 cv
325.788 296.787 309.68 282.993 306.23 296.392 cv
cp
0 0 0 rgb
f
308.72 325.95 mo
308.72 325.95 307.18 345.34 305.18 365.76 cv
276.78 365.76 li
276.28 365.76 275.79 365.7 275.32 365.59 cv
275 365.52 286.803 339.333 295.43 333.254 cv
302.637 328.174 308.72 325.95 308.72 325.95 cv
cp
.25098 .313726 .498039 rgb
f
356.95 365.75 mo
356.89 365.76 356.84 365.76 356.78 365.76 cv
324.71 365.76 li
323.61 348.32 322.81 325.57 322.81 325.57 cv
322.81 325.57 351.36 327.12 356.95 365.75 cv
cp
f
323.188 313.818 mo
323.063 313.818 322.938 313.771 322.841 313.678 cv
322.643 313.486 322.637 313.17 322.829 312.971 cv
326.286 309.392 li
326.478 309.193 326.794 309.188 326.993 309.38 cv
327.191 309.571 327.197 309.888 327.005 310.087 cv
323.548 313.666 li
323.45 313.768 323.319 313.818 323.188 313.818 cv
cp
0 0 0 rgb
f
327.864 312.944 mo
327.823 312.944 327.78 312.939 327.738 312.928 cv
324.754 312.148 li
324.486 312.079 324.326 311.806 324.396 311.539 cv
324.466 311.272 324.736 311.105 325.006 311.182 cv
327.99 311.961 li
328.258 312.03 328.418 312.304 328.348 312.57 cv
328.289 312.796 328.087 312.944 327.864 312.944 cv
cp
f
305.325 302.652 mo
305.219 302.652 305.112 302.619 305.022 302.55 cv
304.808 302.384 304.762 302.079 304.924 301.86 cv
304.961 301.811 305.874 300.623 308.151 300.953 cv
308.425 300.993 308.614 301.246 308.575 301.52 cv
308.535 301.793 308.275 301.975 308.009 301.943 cv
306.351 301.699 305.746 302.432 305.721 302.464 cv
305.622 302.587 305.474 302.652 305.325 302.652 cv
cp
f
315.661 302.783 mo
315.548 302.783 315.435 302.745 315.341 302.667 cv
314.14 301.667 312.762 302.035 312.747 302.038 cv
312.479 302.116 312.205 301.956 312.132 301.69 cv
312.058 301.424 312.214 301.148 312.479 301.075 cv
312.558 301.054 314.386 300.568 315.981 301.899 cv
316.193 302.076 316.222 302.392 316.045 302.604 cv
315.946 302.722 315.804 302.783 315.661 302.783 cv
cp
f
305.78 308.121 mo
305.464 308.097 305.259 307.855 305.281 307.581 cv
305.488 305.026 li
305.51 304.751 305.761 304.553 306.026 304.568 cv
306.302 304.591 306.507 304.832 306.484 305.106 cv
306.277 307.661 li
306.257 307.923 306.038 308.121 305.78 308.121 cv
cp
f
313.336 308.433 mo
313.02 308.408 312.814 308.167 312.837 307.893 cv
313.044 305.338 li
313.065 305.063 313.313 304.863 313.582 304.88 cv
313.857 304.902 314.063 305.144 314.04 305.418 cv
313.833 307.973 li
313.813 308.234 313.594 308.433 313.336 308.433 cv
cp
f
307.614 314.219 mo
307.423 314.219 307.241 314.108 307.158 313.923 cv
305.549 310.322 307.962 307.419 308.065 307.297 cv
308.243 307.089 308.558 307.061 308.769 307.24 cv
308.979 307.418 309.006 307.733 308.828 307.944 cv
308.741 308.047 306.724 310.5 308.07 313.515 cv
308.184 313.767 308.07 314.063 307.818 314.175 cv
307.752 314.205 307.683 314.219 307.614 314.219 cv
cp
f
310.604 316.515 mo
310.327 316.515 310.104 316.291 310.104 316.015 cv
310.104 315.739 310.327 315.516 310.603 315.515 cv
310.681 315.514 312.246 315.48 312.81 314.135 cv
312.916 313.88 313.208 313.762 313.464 313.867 cv
313.719 313.974 313.838 314.267 313.731 314.521 cv
312.906 316.492 310.697 316.515 310.604 316.515 cv
cp
f
312.542 333.956 mo
310.014 333.956 308.177 333.481 308.134 333.471 cv
307.867 333.398 307.71 333.125 307.781 332.858 cv
307.853 332.592 308.132 332.438 308.393 332.504 cv
308.485 332.529 317.581 334.866 322.808 328.734 cv
322.988 328.523 323.305 328.499 323.513 328.678 cv
323.723 328.857 323.748 329.173 323.569 329.383 cv
320.368 333.139 315.86 333.956 312.542 333.956 cv
cp
.572549 .705882 .917647 rgb
f
239 158.85 mo
239 238.85 li
239 241.88 236.94 244.42 234.15 245.17 cv
233.65 245.3 233.14 245.38 232.6 245.39 cv
152.46 245.39 li
152.22 245.39 151.98 245.38 151.75 245.35 cv
150.59 245.23 149.53 244.8 148.64 244.15 cv
146.99 242.97 145.92 241.03 145.92 238.85 cv
145.92 158.85 li
145.92 155.23 148.85 152.3 152.46 152.3 cv
232.46 152.3 li
236.07 152.3 239 155.23 239 158.85 cv
cp
.909804 .882353 .937255 rgb
f
213.012 212.257 mo
213.012 212.257 212.191 167.849 196.484 166.248 cv
180.776 164.647 178.915 175.686 178.915 175.686 cv
178.915 175.686 175 177.081 174.207 183.051 cv
173.415 189.021 173.043 212.84 173.043 212.84 cv
208.513 214.87 li
213.012 212.257 li
cp
0 0 0 rgb
f
232.6 245.39 mo
173.79 245.39 li
171.21 244.85 169.55 244.45 169.25 244.29 cv
169.21 244.27 169.17 244.24 169.13 244.22 cv
168.92 244.11 168.71 243.99 168.51 243.87 cv
168.19 243.69 167.86 243.5 167.55 243.3 cv
164.43 230.91 163.19 219.7 167.07 215.14 cv
167.26 214.88 167.5 214.65 167.75 214.44 cv
168.66 213.64 169.65 212.93 170.66 212.26 cv
170.71 212.24 170.74 212.22 170.77 212.2 cv
172.47 211.09 174.3 210.14 176.22 209.33 cv
176.24 209.31 176.27 209.3 176.28 209.3 cv
188.66 204.14 204.622 206.211 213.322 209.851 cv
218.382 211.951 227.87 226.68 232.6 245.39 cv
cp
.407843 .462745 .666667 rgb
f
185.611 196.349 mo
185.611 207.256 li
185.611 207.256 187.578 210.392 193.958 210.91 cv
198.712 211.297 200.217 208.856 200.217 208.856 cv
199.066 199.312 li
187.544 196.776 li
185.611 196.349 li
cp
.956863 .517647 .384314 rgb
f
185.628 195.684 mo
185.655 195.981 185.769 196.333 185.945 196.736 cv
188.385 202.185 196.974 204.452 199.719 204.698 cv
199.066 199.312 li
185.628 195.684 li
cp
0 0 0 rgb
f
201.499 174.449 mo
201.499 174.449 207.223 188.125 204.966 195.723 cv
202.709 203.321 195.775 202.012 191.638 200.472 cv
187.501 198.932 185.61 196.351 185.61 196.351 cv
185.61 196.351 181.703 197.608 179.16 193.955 cv
176.617 190.3 178.282 186.176 180.516 185.259 cv
182.75 184.343 185.363 185.986 185.363 185.986 cv
183.356 182.006 li
183.356 182.006 192.369 162.08 201.499 174.449 cv
cp
.956863 .517647 .384314 rgb
f
200.614 191.767 mo
200.562 191.767 200.508 191.758 200.456 191.741 cv
200.193 191.653 200.052 191.37 200.14 191.108 cv
200.956 188.664 199.165 185.94 199.147 185.913 cv
198.994 185.684 199.055 185.373 199.285 185.22 cv
199.514 185.066 199.825 185.126 199.978 185.356 cv
200.063 185.483 202.062 188.51 201.088 191.425 cv
201.018 191.634 200.823 191.767 200.614 191.767 cv
cp
0 0 0 rgb
f
184.653 192.41 mo
184.517 192.41 184.381 192.354 184.282 192.245 cv
180.68 188.254 li
180.495 188.049 180.511 187.733 180.716 187.548 cv
180.921 187.363 181.236 187.379 181.422 187.584 cv
185.024 191.575 li
185.209 191.78 185.193 192.096 184.988 192.281 cv
184.893 192.368 184.773 192.41 184.653 192.41 cv
cp
f
180.771 191.276 mo
180.523 191.276 180.308 191.092 180.275 190.84 cv
180.24 190.566 180.434 190.315 180.708 190.28 cv
183.268 189.95 li
183.543 189.921 183.793 190.108 183.828 190.382 cv
183.863 190.656 183.67 190.906 183.396 190.942 cv
180.835 191.272 li
180.814 191.274 180.792 191.276 180.771 191.276 cv
cp
f
203.508 180.71 mo
203.476 180.71 203.443 180.707 203.41 180.7 cv
201.008 180.22 li
200.738 180.166 200.562 179.903 200.616 179.632 cv
200.67 179.361 200.931 179.182 201.205 179.24 cv
203.606 179.72 li
203.876 179.774 204.052 180.037 203.998 180.308 cv
203.951 180.546 203.742 180.71 203.508 180.71 cv
cp
f
193.444 182.042 mo
193.257 182.042 193.077 181.936 192.992 181.756 cv
192.873 181.507 192.979 181.208 193.229 181.09 cv
196.445 179.561 li
196.695 179.443 196.994 179.549 197.112 179.798 cv
197.23 180.047 197.124 180.346 196.875 180.464 cv
193.658 181.993 li
193.589 182.026 193.516 182.042 193.444 182.042 cv
cp
f
202.404 186.285 mo
202.186 186.285 201.984 186.14 201.923 185.919 cv
201.231 183.449 li
201.187 183.288 201.225 183.115 201.334 182.988 cv
202.11 182.086 li
202.289 181.875 202.606 181.852 202.815 182.033 cv
203.024 182.213 203.048 182.529 202.868 182.738 cv
202.267 183.437 li
202.886 185.65 li
202.96 185.916 202.805 186.192 202.539 186.266 cv
202.494 186.279 202.449 186.285 202.404 186.285 cv
cp
f
194.563 186.771 mo
194.345 186.771 194.144 186.626 194.082 186.406 cv
193.391 183.935 li
193.345 183.77 193.386 183.593 193.501 183.465 cv
194.571 182.278 li
194.757 182.072 195.072 182.057 195.278 182.241 cv
195.483 182.426 195.499 182.742 195.314 182.948 cv
194.428 183.931 li
195.045 186.136 li
195.119 186.402 194.964 186.678 194.698 186.752 cv
194.653 186.765 194.608 186.771 194.563 186.771 cv
cp
f
205.419 179.307 mo
205.419 179.307 201.65 178.555 199.007 178.653 cv
196.364 178.752 196.364 178.752 196.364 178.752 cv
195.292 174.501 li
195.305 179.139 li
195.305 179.139 193.439 179.459 191.592 180.425 cv
189.745 181.391 188.52 182.581 188.52 182.581 cv
186.767 179.005 li
187.505 183.507 li
185.363 185.986 li
182.131 182.959 li
184.201 176.684 li
184.201 176.684 189.078 169.874 189.455 169.792 cv
189.831 169.711 196.865 169.324 196.865 169.324 cv
196.865 169.324 202.917 171.689 203.063 171.888 cv
203.209 172.087 205.419 179.307 205.419 179.307 cv
cp
f
194.806 211.071 mo
192.032 211.071 188.577 210.323 184.872 207.762 cv
184.645 207.604 184.588 207.294 184.745 207.066 cv
184.901 206.839 185.213 206.78 185.44 206.939 cv
193.797 212.715 200.686 208.767 200.754 208.727 cv
200.992 208.588 201.299 208.666 201.439 208.902 cv
201.58 209.141 201.501 209.447 201.263 209.588 cv
201.22 209.613 198.677 211.071 194.806 211.071 cv
cp
1 1 1 rgb
f
184.94 245.39 mo
152.46 245.39 li
152.22 245.39 151.98 245.38 151.75 245.35 cv
155.87 232.43 162.05 218.95 165.32 215.97 cv
166.6 214.79 167.81 213.85 168.91 213.08 cv
168.95 213.07 168.98 213.05 169.02 213.02 cv
171.89 211.05 174.03 210.29 174.47 210.16 cv
174.49 210.14 174.52 210.13 174.53 210.13 cv
174.55 210.13 184.94 245.39 184.94 245.39 cv
cp
.407843 .462745 .666667 rgb
f
198.324 194.642 mo
198.769 194.873 199.153 194.993 199.326 194.9 cv
199.463 194.826 199.595 194.748 199.718 194.667 cv
198.324 194.642 li
cp
199.185 195.925 mo
198.106 195.925 196.776 194.869 196.335 194.492 cv
196.175 194.354 196.118 194.131 196.193 193.934 cv
196.268 193.737 196.424 193.61 196.669 193.612 cv
201.116 193.693 li
201.314 193.697 201.493 193.818 201.568 194.002 cv
201.645 194.186 201.604 194.397 201.466 194.541 cv
201.437 194.57 200.758 195.266 199.799 195.781 cv
199.611 195.882 199.403 195.925 199.185 195.925 cv
cp
0 0 0 rgb
f
215.829 243.339 mo
215.769 243.339 215.708 243.328 215.649 243.306 cv
215.392 243.206 215.263 242.916 215.363 242.659 cv
218.408 234.773 213.442 226.707 213.392 226.626 cv
213.245 226.393 213.315 226.084 213.549 225.938 cv
213.782 225.787 214.091 225.86 214.238 226.095 cv
214.456 226.44 219.524 234.658 216.295 243.019 cv
216.219 243.218 216.03 243.339 215.829 243.339 cv
cp
1 1 1 rgb
f
611.95 38.4399 mo
611.95 118.44 li
611.95 121.11 610.36 123.4 608.07 124.42 cv
607.26 124.79 606.35 124.99 605.4 124.99 cv
525.41 124.99 li
525.02 124.99 524.63 124.96 524.26 124.89 cv
523.479 124.75 522.75 124.47 522.1 124.08 cv
520.16 122.96 518.86 120.85 518.86 118.44 cv
518.86 38.4399 li
518.86 34.8301 521.79 31.8999 525.41 31.8999 cv
605.4 31.8999 li
609.02 31.8999 611.95 34.8301 611.95 38.4399 cv
cp
.909804 .882353 .937255 rgb
f
567.964 47.4683 mo
567.964 47.4683 576.929 46.126 583.353 50.1528 cv
589.776 54.1797 586.868 64.8965 586.868 64.8965 cv
586.868 64.8965 597.159 72.9556 597.718 81.8003 cv
598.277 90.645 590.224 93.8887 590.224 93.8887 cv
569.003 90.645 li
567.964 47.4683 li
cp
0 0 0 rgb
f
550.45 84.96 mo
547.15 124.99 li
525.41 124.99 li
525.02 124.99 524.63 124.96 524.26 124.89 cv
525.99 117.09 530.68 105.02 534.689 98.4399 cv
541.729 86.9102 550.45 84.96 550.45 84.96 cv
cp
.968627 .701961 .411765 rgb
f
585.61 124.99 mo
541.29 124.99 li
547.49 86.3999 li
547.49 86.3999 557.979 80.7002 566.189 80.9902 cv
567.89 81.04 569.58 81.3301 571.24 81.77 cv
577.59 83.3799 583.2 87.3501 584.83 91.2402 cv
585.54 92.9102 585.7 107.02 585.61 124.99 cv
cp
f
605.03 124.99 mo
571.07 124.99 li
569.16 106.41 li
571.01 80.98 li
571.01 80.98 596.33 88.3301 605.03 124.99 cv
cp
f
571.062 82.2153 mo
571.062 82.2153 567.357 87.6528 563.033 90.9243 cv
558.708 94.1963 556.731 94.5825 556.731 94.5825 cv
557.008 84.0317 li
571.062 82.2153 li
cp
.572549 .705882 .917647 rgb
f
570.849 71.3462 mo
571.028 81.8003 li
571.028 81.8003 569.195 84.8379 563.088 85.4404 cv
558.538 85.8892 556.92 84.8867 556.92 84.8867 cv
557.464 79.5815 li
558.001 74.4072 li
569.003 71.7876 li
570.849 71.3462 li
cp
.956863 .517647 .384314 rgb
f
569.003 71.7876 mo
568.981 72.0737 568.879 72.4126 568.716 72.8018 cv
566.467 78.064 560.092 79.3003 557.464 79.5815 cv
558.001 74.4072 li
569.003 71.7876 li
cp
0 0 0 rgb
f
555.26 50.6187 mo
555.26 50.6187 549.999 63.8203 552.287 71.0654 cv
554.576 78.3105 561.2 76.9414 565.14 75.3975 cv
569.08 73.8535 570.85 71.3486 570.85 71.3486 cv
570.85 71.3486 574.614 72.4888 576.991 68.9448 cv
579.369 65.4009 577.705 61.4751 575.549 60.6333 cv
573.394 59.792 570.915 61.4097 570.915 61.4097 cv
572.773 57.5625 li
572.773 57.5625 563.807 38.6128 555.26 50.6187 cv
cp
.956863 .517647 .384314 rgb
f
571.392 67.1309 mo
571.239 67.1309 571.089 67.0615 570.991 66.9297 cv
570.826 66.7085 570.871 66.395 571.093 66.23 cv
575.744 62.7617 li
575.964 62.5972 576.278 62.6411 576.443 62.8638 cv
576.608 63.085 576.563 63.3984 576.342 63.5635 cv
571.69 67.0317 li
571.601 67.0986 571.496 67.1309 571.392 67.1309 cv
cp
0 0 0 rgb
f
575.684 66.9985 mo
575.646 66.9985 575.606 66.9941 575.567 66.9849 cv
572.452 66.2397 li
572.184 66.1753 572.018 65.9058 572.082 65.6372 cv
572.146 65.3687 572.414 65.2007 572.685 65.2671 cv
575.8 66.0122 li
576.068 66.0767 576.234 66.3462 576.17 66.6147 cv
576.115 66.8442 575.91 66.9985 575.684 66.9985 cv
cp
f
564.104 56.0654 mo
563.957 56.0654 563.812 56.001 563.713 55.8774 cv
562.41 54.2485 561.569 54.5269 561.559 54.5303 cv
561.311 54.6206 561.018 54.5 560.917 54.252 cv
560.816 54.0039 560.917 53.7251 561.161 53.6133 cv
561.312 53.5425 562.692 53 564.494 55.2534 cv
564.666 55.4688 564.632 55.7837 564.416 55.9561 cv
564.323 56.0298 564.213 56.0654 564.104 56.0654 cv
cp
f
553.956 55.749 mo
553.815 55.749 553.675 55.6895 553.576 55.5742 cv
553.396 55.3643 553.421 55.0488 553.631 54.8691 cv
555.049 53.6558 556.209 53.4351 556.258 53.4263 cv
556.526 53.3784 556.789 53.5566 556.839 53.8296 cv
556.888 54.1001 556.709 54.3594 556.438 54.4102 cv
556.416 54.4146 555.468 54.6138 554.281 55.6289 cv
554.187 55.7095 554.071 55.749 553.956 55.749 cv
cp
f
555.887 65.6636 mo
555.645 65.6636 555.432 65.4868 555.394 65.2397 cv
554.828 61.5664 556.427 58.9292 556.495 58.8184 cv
556.639 58.5835 556.946 58.5117 557.182 58.6563 cv
557.417 58.8008 557.489 59.1084 557.346 59.3438 cv
557.331 59.3677 555.875 61.793 556.382 65.0874 cv
556.424 65.3604 556.236 65.6157 555.964 65.6577 cv
555.938 65.6616 555.912 65.6636 555.887 65.6636 cv
cp
f
554.089 60.771 mo
554.049 60.771 554.007 60.7661 553.966 60.7554 cv
553.698 60.6875 553.536 60.415 553.604 60.1475 cv
554.168 57.9316 li
553.52 56.7729 li
553.385 56.5322 553.471 56.2275 553.712 56.0923 cv
553.951 55.9595 554.257 56.0439 554.393 56.2847 cv
555.139 57.6177 li
555.201 57.7295 555.219 57.8608 555.187 57.9854 cv
554.573 60.3945 li
554.516 60.6206 554.313 60.771 554.089 60.771 cv
cp
f
561.682 60.7861 mo
561.642 60.7861 561.6 60.7813 561.559 60.7705 cv
561.291 60.7026 561.129 60.4302 561.197 60.1626 cv
561.749 57.9937 li
560.837 56.8389 li
560.666 56.6221 560.703 56.3076 560.92 56.1362 cv
561.136 55.9653 561.45 56.0015 561.622 56.2188 cv
562.688 57.5674 li
562.784 57.6895 562.818 57.8501 562.779 58.001 cv
562.166 60.4097 li
562.108 60.6357 561.905 60.7861 561.682 60.7861 cv
cp
f
570.915 61.7178 mo
569.003 64.2466 li
569.003 64.2466 564.922 58.5884 564.933 55.4351 cv
564.944 52.2813 564.933 51.1846 564.933 51.1846 cv
564.933 51.1846 560.834 52.6802 557.464 52.5806 cv
554.094 52.481 551.969 50.686 552.192 49.0908 cv
552.416 47.4951 554.407 42.6094 564.933 44.2046 cv
575.459 45.8003 575.656 58.0923 570.915 61.7178 cv
cp
f
551.71 96.3125 mo
551.451 96.3125 551.232 96.1123 551.213 95.8496 cv
551.192 95.5742 551.398 95.3345 551.674 95.314 cv
551.78 95.3057 562.419 94.3584 570.82 81.3882 cv
570.971 81.1567 571.283 81.0918 571.512 81.2407 cv
571.744 81.3906 571.81 81.7002 571.66 81.9321 cv
562.972 95.3447 552.201 96.2778 551.747 96.311 cv
551.735 96.312 551.723 96.3125 551.71 96.3125 cv
cp
1 1 1 rgb
f
556.749 94.437 mo
556.46 94.4297 556.242 94.2002 556.249 93.9238 cv
556.545 82.5898 li
556.552 82.3145 556.821 82.1172 557.058 82.103 cv
557.334 82.1104 557.552 82.3398 557.545 82.6162 cv
557.249 93.9502 li
557.242 94.2217 557.02 94.437 556.749 94.437 cv
cp
f
557.379 69.3154 mo
557.163 69.3154 556.956 69.2734 556.771 69.1738 cv
556.528 69.043 556.437 68.7397 556.567 68.4966 cv
556.697 68.2529 557.003 68.1621 557.244 68.293 cv
557.546 68.4521 558.577 67.9404 559.304 67.3721 cv
559.519 67.2036 559.835 67.2393 560.006 67.4585 cv
560.176 67.6758 560.137 67.9902 559.919 68.1602 cv
559.525 68.4678 558.351 69.3154 557.379 69.3154 cv
cp
0 0 0 rgb
f
538.383 124.538 mo
538.173 124.538 537.978 124.405 537.908 124.195 cv
534.761 114.676 540.615 105.113 540.865 104.71 cv
541.012 104.477 541.319 104.406 541.555 104.551 cv
541.789 104.697 541.86 105.005 541.715 105.239 cv
541.655 105.334 535.859 114.813 538.857 123.881 cv
538.944 124.143 538.802 124.426 538.54 124.513 cv
538.487 124.53 538.435 124.538 538.383 124.538 cv
cp
1 1 1 rgb
f
487.63 38.4399 mo
487.63 118.44 li
487.63 119.36 487.439 120.24 487.1 121.03 cv
486.45 122.55 485.24 123.77 483.729 124.43 cv
483.65 124.47 483.57 124.5 483.479 124.53 cv
483.36 124.58 483.229 124.62 483.11 124.66 cv
482.479 124.88 481.8 124.99 481.09 124.99 cv
401.09 124.99 li
400.64 124.99 400.2 124.94 399.77 124.86 cv
399.54 124.81 399.31 124.75 399.09 124.67 cv
398.72 124.56 398.36 124.4 398.02 124.22 cv
395.95 123.12 394.55 120.95 394.55 118.44 cv
394.55 38.4399 li
394.55 34.8301 397.479 31.8999 401.09 31.8999 cv
481.09 31.8999 li
484.7 31.8999 487.63 34.8301 487.63 38.4399 cv
cp
.909804 .882353 .937255 rgb
f
447.792 67.6177 mo
447.792 67.6177 469.032 53.6152 461.663 45.5659 cv
454.295 37.5161 445.037 57.5786 445.037 57.5786 cv
447.792 67.6177 li
cp
0 0 0 rgb
f
427.31 124.04 mo
425.729 123.57 424.24 124.07 422.81 124.99 cv
403.97 124.99 li
410.74 98.5801 427.38 91.7598 427.38 91.7598 cv
427.38 91.7598 427.99 104.53 427.31 124.04 cv
cp
.407843 .462745 .666667 rgb
f
434.521 52.9248 mo
434.521 52.9248 445.685 45.668 452.454 54.7144 cv
459.026 63.4976 452.604 73.4604 452.604 73.4604 cv
437.414 61.6187 li
434.521 52.9248 li
cp
0 0 0 rgb
f
472.45 124.99 mo
411.18 124.99 li
411.49 118.96 412.21 112.48 413.939 107.7 cv
417.51 97.8501 425.41 92.3101 429.79 90.6001 cv
435 88.5601 447.92 88.5601 447.92 88.5601 cv
447.92 88.5601 469.83 92.4399 470.76 108.76 cv
470.92 111.42 472.12 118.69 472.45 124.99 cv
cp
.407843 .462745 .666667 rgb
f
448.242 78.9453 mo
448.718 89.3828 li
448.718 89.3828 446.973 92.4692 440.89 93.2441 cv
436.357 93.8208 434.713 92.8657 434.713 92.8657 cv
435.105 87.5503 li
435.496 82.3667 li
446.411 79.4385 li
448.242 78.9453 li
cp
.956863 .517647 .384314 rgb
f
446.411 79.4385 mo
446.397 79.7246 446.305 80.0659 446.153 80.4595 cv
444.056 85.7798 437.722 87.1953 435.105 87.5503 cv
435.496 82.3667 li
446.411 79.4385 li
cp
0 0 0 rgb
f
432.084 58.6816 mo
432.084 58.6816 427.202 72.0181 429.693 79.1904 cv
432.185 86.3628 438.763 84.8076 442.654 83.1538 cv
446.547 81.5 448.244 78.9473 448.244 78.9473 cv
448.244 78.9473 452.037 79.98 454.311 76.3726 cv
456.585 72.7651 454.813 68.8906 452.635 68.1113 cv
450.457 67.3315 448.028 69.0176 448.028 69.0176 cv
449.774 65.1221 li
449.774 65.1221 440.282 46.4463 432.084 58.6816 cv
cp
.956863 .517647 .384314 rgb
f
448.028 69.0176 mo
448.028 69.0176 442.525 70.5391 438.208 64.6016 cv
433.891 58.6641 434.066 56.0879 434.066 56.0879 cv
430.658 63.3262 li
430.658 63.3262 429.479 58.3887 431.056 55.4282 cv
432.634 52.4678 434.521 52.9248 434.521 52.9248 cv
447.047 55.1289 li
450.986 64.7651 li
448.028 69.0176 li
cp
0 0 0 rgb
f
434.765 93.5059 mo
433.508 95.1558 432.628 96.9238 432.923 97.2485 cv
433.105 97.4492 433.351 97.5518 433.674 97.562 cv
435.188 97.6069 437.806 95.665 439.366 94.314 cv
437.966 94.2959 436.431 94.0576 434.765 93.5059 cv
cp
441.461 94.1733 mo
442.459 95.4634 445.021 98.3633 447.507 97.8442 cv
447.954 97.75 448.304 97.4966 448.574 97.0693 cv
449.602 95.4468 449.163 92.041 448.864 90.373 cv
447.726 91.5278 445.208 93.6138 441.461 94.1733 cv
cp
446.906 98.9063 mo
444.031 98.9063 441.445 95.8301 440.535 94.6138 cv
439.308 95.7383 435.924 98.6563 433.642 98.5615 cv
433.043 98.5425 432.552 98.3271 432.183 97.9214 cv
431.118 96.75 433.237 93.8145 434.197 92.6064 cv
434.33 92.4399 434.556 92.375 434.756 92.4458 cv
443.724 95.6157 448.553 89.2695 448.754 88.9985 cv
448.87 88.8418 449.067 88.7656 449.256 88.8057 cv
449.446 88.8447 449.598 88.9897 449.643 89.1787 cv
449.7 89.418 451.027 95.062 449.419 97.6035 cv
449.003 98.2617 448.429 98.6724 447.712 98.8228 cv
447.442 98.8799 447.173 98.9063 446.906 98.9063 cv
cp
.968627 .701961 .411765 rgb
f
483.11 124.66 mo
482.479 124.88 481.8 124.99 481.09 124.99 cv
463.62 124.99 li
464.78 114.4 462.479 94.7202 462.479 94.7202 cv
462.479 94.7202 473.83 99.21 483.11 124.66 cv
cp
.407843 .462745 .666667 rgb
f
433.057 75.2349 mo
432.848 75.2349 432.652 75.1025 432.582 74.8931 cv
431.589 71.9199 433.629 68.832 433.716 68.7021 cv
433.87 68.4736 434.179 68.4111 434.409 68.5659 cv
434.638 68.7192 434.699 69.0298 434.546 69.2593 cv
434.527 69.2871 432.695 72.0742 433.531 74.5767 cv
433.618 74.8384 433.477 75.1216 433.215 75.209 cv
433.162 75.2266 433.109 75.2349 433.057 75.2349 cv
cp
0 0 0 rgb
f
448.86 75.2349 mo
448.741 75.2349 448.621 75.1924 448.525 75.106 cv
448.32 74.9209 448.304 74.605 448.489 74.3999 cv
452.17 70.3218 li
452.355 70.1172 452.671 70.1001 452.876 70.2856 cv
453.081 70.4707 453.098 70.7866 452.912 70.9917 cv
449.231 75.0698 li
449.133 75.1792 448.997 75.2349 448.86 75.2349 cv
cp
f
452.827 74.0757 mo
452.806 74.0757 452.784 74.0742 452.763 74.0718 cv
450.146 73.7349 li
449.872 73.6992 449.679 73.4487 449.714 73.1748 cv
449.749 72.9009 450.004 72.7095 450.273 72.7427 cv
452.89 73.0796 li
453.164 73.1152 453.357 73.3657 453.322 73.6396 cv
453.29 73.8916 453.074 74.0757 452.827 74.0757 cv
cp
f
430.657 63.8262 mo
430.424 63.8262 430.216 63.6621 430.168 63.4243 cv
430.113 63.1533 430.289 62.8901 430.561 62.8359 cv
432.455 62.457 li
432.713 62.4019 432.988 62.5776 433.043 62.8491 cv
433.098 63.1201 432.922 63.3833 432.65 63.4375 cv
430.756 63.8164 li
430.724 63.8232 430.69 63.8262 430.657 63.8262 cv
cp
f
440.383 65.2983 mo
440.311 65.2983 440.237 65.2827 440.168 65.25 cv
436.882 63.688 li
436.633 63.5693 436.526 63.271 436.646 63.0215 cv
436.764 62.772 437.063 62.6665 437.312 62.7847 cv
440.598 64.3467 li
440.847 64.4653 440.953 64.7637 440.834 65.0132 cv
440.749 65.1929 440.569 65.2983 440.383 65.2983 cv
cp
f
431.228 69.6338 mo
431.184 69.6338 431.138 69.6279 431.093 69.6152 cv
430.827 69.541 430.672 69.2651 430.746 68.999 cv
431.38 66.7324 li
430.762 66.0137 li
430.581 65.8042 430.605 65.4883 430.814 65.3086 cv
431.025 65.1284 431.341 65.1528 431.52 65.3613 cv
432.313 66.2832 li
432.422 66.4102 432.46 66.583 432.415 66.7441 cv
431.709 69.2686 li
431.647 69.4893 431.446 69.6338 431.228 69.6338 cv
cp
f
438.58 70.1309 mo
438.536 70.1309 438.49 70.125 438.445 70.1123 cv
438.18 70.0381 438.024 69.7617 438.099 69.4961 cv
438.731 67.2368 li
437.822 66.228 li
437.637 66.0229 437.653 65.7065 437.858 65.5215 cv
438.063 65.3364 438.379 65.3535 438.564 65.5581 cv
439.658 66.7715 li
439.773 66.8989 439.814 67.0762 439.769 67.2412 cv
439.062 69.7656 li
439 69.9863 438.799 70.1309 438.58 70.1309 cv
cp
f
434.696 78.6602 mo
434.351 78.6602 433.992 78.6138 433.624 78.5039 cv
433.359 78.4253 433.209 78.147 433.287 77.8823 cv
433.365 77.6182 433.642 77.4683 433.909 77.5459 cv
435.799 78.1094 437.532 76.3789 437.549 76.3613 cv
437.745 76.1655 438.06 76.1631 438.256 76.3569 cv
438.452 76.5503 438.455 76.8657 438.262 77.0625 cv
438.188 77.1387 436.667 78.6602 434.696 78.6602 cv
cp
f
422.827 124.538 mo
422.655 124.538 422.487 124.449 422.395 124.29 cv
417.417 115.729 422.346 107.165 422.396 107.08 cv
422.535 106.842 422.843 106.762 423.08 106.903 cv
423.318 107.042 423.397 107.349 423.258 107.587 cv
423.211 107.667 418.581 115.742 423.26 123.787 cv
423.398 124.025 423.317 124.332 423.078 124.47 cv
422.999 124.516 422.913 124.538 422.827 124.538 cv
cp
.968627 .701961 .411765 rgb
f
239 38.4399 mo
239 118.44 li
239 120.72 237.84 122.73 236.08 123.88 cv
235.92 124 235.74 124.11 235.57 124.2 cv
235.28 124.36 234.97 124.5 234.66 124.61 cv
234.25 124.76 233.82 124.87 233.37 124.92 cv
233.07 124.97 232.77 124.99 232.46 124.99 cv
152.46 124.99 li
152.37 124.99 152.28 124.99 152.19 124.98 cv
151.62 124.96 151.06 124.86 150.53 124.7 cv
147.86 123.88 145.92 121.39 145.92 118.44 cv
145.92 38.4399 li
145.92 34.8301 148.85 31.8999 152.46 31.8999 cv
232.46 31.8999 li
236.07 31.8999 239 34.8301 239 38.4399 cv
cp
.909804 .882353 .937255 rgb
f
182.45 59.8237 mo
182.45 59.8237 166.531 65.9121 165.719 83.9297 cv
164.545 109.972 195.755 103.935 195.755 103.935 cv
195.755 103.935 213.432 105.769 218.321 92.7373 cv
223.211 79.7061 207.495 71.8398 207.495 71.8398 cv
207.495 71.8398 188.438 55.0596 182.45 59.8237 cv
cp
0 0 0 rgb
f
233.37 124.92 mo
233.07 124.97 232.77 124.99 232.46 124.99 cv
152.46 124.99 li
152.37 124.99 152.28 124.99 152.19 124.98 cv
157.76 101.16 173.46 86.25 189.91 83.6699 cv
189.95 83.6699 189.99 83.6602 190.03 83.6499 cv
191.24 83.4702 192.5 83.3501 193.8 83.2998 cv
212.09 82.6299 229.01 103.61 233.37 124.92 cv
cp
.407843 .713726 .847059 rgb
f
215.9 124.99 mo
165.4 124.99 li
165.32 116.92 165.28 110.79 165.28 110.79 cv
183.04 93.5801 li
191.76 85.1401 li
191.87 85.1401 191.98 85.1401 192.09 85.1499 cv
196.89 85.2798 200.94 86.5601 204.13 88.1001 cv
204.64 88.3599 205.13 88.6099 205.6 88.8701 cv
210.03 91.3198 212.43 94.0801 212.43 94.0801 cv
212.43 94.0801 214.16 109.06 215.9 124.99 cv
cp
f
189.625 75.8452 mo
189.993 85.6929 li
189.993 85.6929 191.838 88.7173 197.997 88.9873 cv
202.584 89.188 204.213 87.8843 204.213 87.8843 cv
203.5 83.3716 li
202.678 78.2119 li
191.501 76.187 li
189.625 75.8452 li
cp
.956863 .517647 .384314 rgb
f
189.625 75.3447 mo
189.663 75.6304 189.784 75.9644 189.968 76.3462 cv
192.513 81.5005 200.85 83.2339 203.5 83.3716 cv
202.678 78.2119 li
189.625 75.3447 li
cp
0 0 0 rgb
f
204.125 54.2026 mo
204.125 54.2026 210.124 67.1553 208.226 74.5474 cv
206.328 81.939 199.609 80.9287 195.573 79.5962 cv
191.537 78.2632 189.624 75.8477 189.624 75.8477 cv
189.624 75.8477 185.911 77.1978 183.333 73.7739 cv
180.754 70.3496 182.208 66.3208 184.324 65.3584 cv
186.44 64.3965 189.014 65.8833 189.014 65.8833 cv
186.94 62.1265 li
186.94 62.1265 194.895 42.6294 204.125 54.2026 cv
cp
.956863 .517647 .384314 rgb
f
206.062 59.585 mo
206.037 59.585 206.013 59.583 205.988 59.5796 cv
203.427 59.1997 li
203.154 59.1592 202.965 58.9048 203.006 58.6318 cv
203.047 58.3584 203.301 58.1763 203.574 58.2104 cv
206.134 58.5903 li
206.408 58.6309 206.596 58.8853 206.556 59.1582 cv
206.519 59.4067 206.305 59.585 206.062 59.585 cv
cp
0 0 0 rgb
f
196.51 60.6436 mo
196.315 60.6436 196.13 60.5283 196.049 60.3374 cv
195.942 60.0825 196.062 59.7896 196.316 59.6826 cv
199.289 58.4341 li
199.543 58.3286 199.836 58.4468 199.943 58.7012 cv
200.05 58.9561 199.931 59.249 199.676 59.356 cv
196.704 60.6045 li
196.641 60.6309 196.575 60.6436 196.51 60.6436 cv
cp
f
204.046 70.207 mo
204.029 70.207 204.012 70.2061 203.995 70.2046 cv
203.72 70.1768 203.52 69.9312 203.548 69.6567 cv
203.958 65.6138 202.283 63.5786 202.266 63.5586 cv
202.088 63.3481 202.113 63.0332 202.323 62.8545 cv
202.532 62.6758 202.846 62.6992 203.025 62.9077 cv
203.106 63.0015 205 65.2568 204.543 69.7573 cv
204.517 70.0151 204.299 70.207 204.046 70.207 cv
cp
f
198.708 72.7061 mo
198.869 73.0454 199.146 73.4009 199.62 73.5361 cv
200.093 73.6743 200.536 73.4922 200.871 73.2661 cv
198.708 72.7061 li
cp
199.962 74.5854 mo
199.764 74.5854 199.558 74.5586 199.345 74.498 cv
197.691 74.0254 197.505 72.1294 197.499 72.0488 cv
197.484 71.8867 197.549 71.7285 197.673 71.6235 cv
197.797 71.5181 197.965 71.4795 198.122 71.521 cv
202.005 72.5269 li
202.167 72.5688 202.297 72.689 202.352 72.8467 cv
202.407 73.0049 202.379 73.1797 202.278 73.313 cv
202.233 73.3721 201.294 74.5854 199.962 74.5854 cv
cp
f
189.031 71.2861 mo
188.962 71.2861 188.892 71.272 188.825 71.2412 cv
183.551 68.8442 li
183.3 68.73 183.189 68.4336 183.303 68.1821 cv
183.417 67.9316 183.712 67.8179 183.965 67.9341 cv
189.239 70.3311 li
189.49 70.4453 189.601 70.7417 189.487 70.9932 cv
189.403 71.1772 189.222 71.2861 189.031 71.2861 cv
cp
f
184.333 72.5049 mo
184.205 72.5049 184.076 72.4556 183.978 72.3564 cv
183.784 72.1602 183.786 71.8433 183.982 71.6494 cv
186.307 69.3516 li
186.503 69.1567 186.82 69.1587 187.014 69.3555 cv
187.208 69.5518 187.206 69.8687 187.01 70.0625 cv
184.685 72.3604 li
184.587 72.457 184.46 72.5049 184.333 72.5049 cv
cp
f
196.51 55.6045 mo
196.51 55.6045 199.513 55.1758 202.646 56.959 cv
205.78 58.7417 206.423 60.4795 206.423 60.4795 cv
206.423 60.4795 208.361 55.8755 204.114 51.8135 cv
199.866 47.7515 191.716 46.625 187.018 51.4307 cv
182.32 56.2368 182.608 60.4795 182.608 60.4795 cv
189.014 65.8833 li
189.014 65.8833 198.907 64.0903 196.51 55.6045 cv
cp
f
185.875 52.7227 mo
185.875 52.7227 179.831 41.2441 173.705 46.0947 cv
167.578 50.9453 174.4 60.7363 180.485 61.4502 cv
186.571 62.1646 185.875 52.7227 185.875 52.7227 cv
cp
f
198.558 89.4878 mo
192.88 89.4878 189.667 86.0767 189.625 86.0308 cv
189.438 85.8276 189.452 85.5122 189.655 85.3252 cv
189.859 85.1387 190.174 85.1514 190.361 85.3545 cv
190.572 85.5825 195.637 90.9097 204.589 87.2002 cv
204.843 87.0962 205.138 87.2153 205.243 87.4707 cv
205.349 87.7256 205.228 88.0181 204.972 88.124 cv
202.582 89.1147 200.435 89.4878 198.558 89.4878 cv
cp
.968627 .701961 .411765 rgb
f
190.336 75.3447 mo
190.336 76.3828 189.495 77.2241 188.457 77.2241 cv
187.419 77.2241 186.578 76.3828 186.578 75.3447 cv
186.578 74.3071 187.419 73.4653 188.457 73.4653 cv
189.495 73.4653 190.336 74.3071 190.336 75.3447 cv
cp
.901961 .956863 1 rgb
f
197.997 66.0332 mo
197.72 66.0332 197.497 65.8096 197.497 65.5332 cv
197.497 63.2339 li
197.497 63.1025 197.548 62.9766 197.64 62.8828 cv
198.658 61.8496 li
198.852 61.6528 199.167 61.6504 199.365 61.8442 cv
199.562 62.0381 199.564 62.355 199.371 62.5518 cv
198.497 63.439 li
198.497 65.5332 li
198.497 65.8096 198.273 66.0332 197.997 66.0332 cv
cp
0 0 0 rgb
f
205.552 66.0332 mo
205.276 66.0332 205.052 65.8096 205.052 65.5332 cv
205.052 63.2339 li
205.052 63.1025 205.104 62.9766 205.196 62.8828 cv
206.214 61.8496 li
206.407 61.6528 206.723 61.6499 206.921 61.8447 cv
207.118 62.0386 207.12 62.355 206.926 62.5518 cv
206.052 63.439 li
206.052 65.5332 li
206.052 65.8096 205.829 66.0332 205.552 66.0332 cv
cp
f
214.216 124 mo
214.146 124 214.076 123.985 214.009 123.955 cv
213.757 123.84 213.647 123.543 213.762 123.292 cv
219.717 110.255 211.901 100.753 211.821 100.659 cv
211.643 100.448 211.67 100.132 211.88 99.9541 cv
212.092 99.7764 212.406 99.8027 212.585 100.013 cv
212.668 100.112 220.898 110.077 214.671 123.708 cv
214.587 123.892 214.406 124 214.216 124 cv
cp
.968627 .701961 .411765 rgb
f
114.69 38.4399 mo
114.69 118.44 li
114.69 121.27 112.89 123.69 110.37 124.6 cv
110.15 124.68 109.93 124.75 109.7 124.8 cv
109.38 124.88 109.04 124.94 108.7 124.97 cv
108.52 124.98 108.33 124.99 108.15 124.99 cv
28.1499 124.99 li
27.4497 124.99 26.7798 124.88 26.1499 124.67 cv
25.98 124.63 25.8198 124.57 25.6597 124.5 cv
25.3501 124.37 25.0498 124.22 24.77 124.05 cv
22.8701 122.91 21.6001 120.82 21.6001 118.44 cv
21.6001 38.4399 li
21.6001 34.8301 24.5298 31.8999 28.1499 31.8999 cv
108.15 31.8999 li
111.76 31.8999 114.69 34.8301 114.69 38.4399 cv
cp
.909804 .882353 .937255 rgb
f
97.6597 124.99 mo
28.8398 124.99 li
29.8701 114.59 35.5898 97.5298 40.3101 92.2002 cv
45.1299 86.75 56.7397 83.0698 68.6401 83.46 cv
68.6401 83.46 84.8501 83.3901 91.6001 91.6802 cv
94.3901 95.1001 97.21 111.79 97.6597 124.99 cv
cp
.572549 .705882 .917647 rgb
f
109.7 124.8 mo
109.38 124.88 109.04 124.94 108.7 124.97 cv
108.52 124.98 108.33 124.99 108.15 124.99 cv
84.6299 124.99 li
80.96 117.15 li
92.3599 92.9302 li
109.7 124.8 li
cp
f
59.7544 75.0234 mo
58.9951 84.3774 li
58.9951 84.3774 59.6323 87.2144 65.7524 88.2148 cv
70.3115 88.9604 72.7993 86.209 72.7993 86.209 cv
72.7217 84.1899 li
72.5132 78.9375 li
61.5869 75.5874 li
59.7544 75.0234 li
cp
.956863 .517647 .384314 rgb
f
61.5869 75.5874 mo
61.5903 75.8774 61.6724 76.2256 61.8105 76.6284 cv
63.7402 82.0801 70.0903 83.7373 72.7217 84.1899 cv
72.5132 78.9375 li
61.5869 75.5874 li
cp
0 0 0 rgb
f
76.8091 55.124 mo
76.8091 55.124 81.2646 68.7759 78.4907 75.9351 cv
75.7163 83.0942 69.124 81.2871 65.2505 79.4766 cv
61.3765 77.666 59.7524 75.0254 59.7524 75.0254 cv
59.7524 75.0254 55.8823 75.9336 53.7134 72.2065 cv
51.5444 68.4795 53.4746 64.6274 55.7031 63.9175 cv
57.9311 63.2075 60.3262 64.9985 60.3262 64.9985 cv
58.7002 60.999 li
58.7002 60.999 68.9624 42.4658 76.8091 55.124 cv
cp
.956863 .517647 .384314 rgb
f
74.6372 71.791 mo
74.5718 71.791 74.5049 71.7783 74.4409 71.751 cv
74.187 71.6426 74.0688 71.3486 74.1772 71.0947 cv
75.1533 68.8062 73.6416 66.043 73.6265 66.0151 cv
73.4922 65.7739 73.5786 65.4697 73.8193 65.335 cv
74.0605 65.2012 74.3647 65.2866 74.499 65.5273 cv
74.5723 65.6572 76.2681 68.7417 75.0972 71.4873 cv
75.0161 71.6772 74.831 71.791 74.6372 71.791 cv
cp
0 0 0 rgb
f
59.1777 71.061 mo
59.0576 71.061 58.9394 71.0073 58.8613 70.9048 cv
55.6958 66.7686 li
55.562 66.5942 55.5952 66.3442 55.77 66.2109 cv
55.9443 66.0752 56.1943 66.1104 56.3276 66.2852 cv
59.4932 70.4214 li
59.6269 70.5957 59.5937 70.8457 59.4189 70.979 cv
59.3472 71.0347 59.2617 71.061 59.1777 71.061 cv
cp
f
55.5176 69.6616 mo
55.3066 69.6616 55.1304 69.4956 55.1206 69.2827 cv
55.1099 69.063 55.2798 68.8765 55.499 68.8662 cv
57.9971 68.748 li
58.2285 68.7251 58.4038 68.9072 58.4136 69.1265 cv
58.4243 69.3462 58.2544 69.5327 58.0351 69.543 cv
55.5371 69.6611 li
55.5303 69.6616 55.5239 69.6616 55.5176 69.6616 cv
cp
f
69.2119 66.2944 mo
68.9409 66.2944 68.7183 66.0781 68.7119 65.8062 cv
68.6533 63.335 li
68.647 63.0591 68.8652 62.8301 69.1416 62.8232 cv
69.4165 62.814 69.6465 63.0356 69.6533 63.3115 cv
69.7119 65.7827 li
69.7183 66.0586 69.5 66.2876 69.2236 66.2944 cv
69.2197 66.2944 69.2158 66.2944 69.2119 66.2944 cv
cp
f
76.5117 66.4629 mo
76.2456 66.4629 76.0244 66.2529 76.0127 65.9844 cv
75.9067 63.5146 li
75.895 63.2388 76.1089 63.0054 76.3848 62.9937 cv
76.6616 62.9741 76.894 63.1958 76.9058 63.4717 cv
77.0117 65.9414 li
77.0234 66.2173 76.8096 66.4507 76.5337 66.4624 cv
76.5264 66.4629 76.519 66.4629 76.5117 66.4629 cv
cp
f
68.0044 61.6582 mo
67.9062 61.6582 67.8071 61.6294 67.7202 61.5693 cv
67.4932 61.4121 67.4365 61.1006 67.5937 60.8735 cv
68.7393 59.2212 70.915 59.9766 71.0073 60.0098 cv
71.2671 60.1025 71.4014 60.3877 71.3091 60.647 cv
71.2173 60.9067 70.9331 61.042 70.6719 60.9517 cv
70.6089 60.9292 69.1226 60.4224 68.416 61.4429 cv
68.3188 61.583 68.1631 61.6582 68.0044 61.6582 cv
cp
f
77.5434 61.646 mo
77.3755 61.646 77.2119 61.5615 77.1177 61.4087 cv
77.0068 61.231 76.6186 60.7495 76.1577 60.6563 cv
75.9043 60.6069 75.6509 60.6738 75.3789 60.8652 cv
75.1543 61.0244 74.8408 60.9702 74.6821 60.7446 cv
74.5229 60.519 74.5771 60.207 74.8027 60.0479 cv
75.2998 59.6973 75.8393 59.5703 76.3643 59.6777 cv
77.3296 59.8779 77.9067 60.7827 77.9697 60.8853 cv
78.1138 61.1211 78.0395 61.4287 77.8037 61.5728 cv
77.7222 61.6226 77.6323 61.646 77.5434 61.646 cv
cp
f
76.8086 55.1255 mo
75.9648 53.8921 li
75.9648 53.8921 74.9282 54.603 72.6211 55.0903 cv
69.0781 55.8584 64.9165 55.6416 64.9165 55.6416 cv
64.9165 55.6416 65.6152 56.6567 65.4541 60.3091 cv
65.2939 63.9736 61.4932 66.0132 61.4932 66.0132 cv
60.1567 65.0728 59.0298 64.5386 58.083 64.2549 cv
57.6728 64.1387 57.3096 64.0649 56.9702 64.0244 cv
54.7773 63.8086 53.9609 65.1621 53.9609 65.1621 cv
53.9609 65.1621 48.916 57.1206 54.7524 51.3428 cv
58.8457 47.3091 64.3252 47.5674 67.2295 48.0884 cv
68.2163 48.2686 68.9009 48.4741 69.1523 48.5527 cv
69.2202 48.5718 69.2549 48.5815 69.2549 48.5815 cv
69.2549 48.5815 77.9932 46.5093 79.4473 47.8047 cv
80.9009 49.0889 77.8574 55.1792 76.8086 55.1255 cv
cp
f
70.5054 73.5933 mo
70.501 73.7183 70.5146 73.8477 70.562 73.9644 cv
70.6382 74.1528 70.7964 74.2944 71.0464 74.3965 cv
71.4897 74.5791 71.9209 74.5596 72.2739 74.4722 cv
70.5054 73.5933 li
cp
71.7534 75.5361 mo
71.4121 75.5361 71.0449 75.4771 70.6675 75.3223 cv
70.1655 75.1162 69.8071 74.7729 69.6309 74.3291 cv
69.3218 73.5503 69.6675 72.7471 69.708 72.6582 cv
69.7642 72.5347 69.8677 72.439 69.9956 72.3936 cv
70.1226 72.3481 70.2637 72.3564 70.3857 72.417 cv
73.6484 74.0386 li
73.8032 74.1157 73.9072 74.2671 73.9233 74.4395 cv
73.9399 74.6118 73.8657 74.7803 73.728 74.8848 cv
73.6831 74.9189 72.8525 75.5361 71.7534 75.5361 cv
cp
f
73.75 124.99 mo
69.0801 124.99 li
65.8901 88.6699 li
69.2998 89.5601 li
73.75 124.99 li
cp
.635294 .772549 .976471 rgb
f
72.9463 83.8936 mo
72.9463 83.8936 76.9184 94.9375 75.7593 94.7734 cv
74.6006 94.6089 67.4614 88.9282 67.4614 88.9282 cv
67.4614 88.9282 62.7876 95.356 61.1577 95.4756 cv
59.5278 95.5952 58.9951 83.9717 58.9951 83.9717 cv
58.9951 83.9717 60.2285 87.2583 66.3135 87.8154 cv
72.3984 88.3721 72.9463 83.8936 72.9463 83.8936 cv
cp
.901961 .956863 1 rgb
f
92.3828 124 mo
92.1392 124 91.9258 123.822 91.8887 123.574 cv
89.3887 106.904 li
89.3476 106.631 89.5361 106.376 89.8091 106.335 cv
90.0918 106.299 90.3374 106.483 90.3779 106.756 cv
92.8779 123.426 li
92.9189 123.699 92.7305 123.954 92.4575 123.995 cv
92.4321 123.998 92.4072 124 92.3828 124 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2204.w037.n003.304B.p1.304-temp_01.eps)
%%CreationDate: 4/12/2022 4:24 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj26Re+!81^978B#mc,Rk^<J#ZOfOX"N4S^Op3,`bi4S1G^fNob;m7HD&g2[\Dn!N<6eZoeYt`8=NEA2ol?mXR;;`,Sl/Ie
%L8(Iph+/uErF]Qt7HMU/a'3'gr+F3-H:BVoQ!5%CV/FP]G7Ii:P2C0?)q@EY]q3CHo]iD=mh.hS;XaR![IJGj=7o2;cmQG8SeWbU
%^Y!5M]M?Vl-j8&GW:QK:oR[,5DZSapQ`AlIIgH#OnkKWXDpp*-)8/'(3uqEQbc9Z[Nja#V`S^sj^SQu]rahq^BmH7AU],NVRq?jq
%T(LZRHMddP#33LK9CQAii*U`bC55lS$<t?=S`LOqZ'%.],,@rH/=8u)rtOuF^Jg['+TGYGnc,grs'PQ1QI8\9cZ=>5^c=5h?n!PB
%KTA"<61(-A+\T15`8QP[CKA-/:B]3J4(G-g2+<(_kSr1lW'_"q>r1Np-@BVhDFR:PR[[/2Ql+_;`ZYT^5:ZZil_t]7=8#jMd+MI_
%\FL"5.bH'O/0mD?l;ml7RsLn5\?cJ'1,\bDA\ZC;'LNS8*n!!)+oEorS9V//^B8<,W-4:?lR=3KA\VI(omZb>[N*XW4)"K`PK#%'
%G1Fb!MW<nL<Qh>,AHTYHf)ghD[Xhu,Bl&%AjK(aS0fBMp_oN.#UspQlj?]he=fJU.Wg]N!9a+()M?V[GgT=(.A6E,03W+d^a>f;(
%=8n"u!u<p<^FhI>C1m@UE$V+6hLV'SjJlEGYBq#&U?86k,N[k3EZbDUK%KMmCtOaTV"uI(qq3-<64qglr,#U3gNE%14tiV@Nj$$S
%TB\IdWpBRsYt3]]Rq6"abJJIhL!;.VRords-jOm#Cu`+Z`eAolh0#ujlXD[J$\)ZmHled=o@Ppma%u8OCf;nEVo>BA;>4N3)\e4c
%M&4E0jq[EVr$cfSTBeO[`trQHqnh7C%/2&lbFdajn2Iel:#U$E]0lmJ`dQfaI#"3.h`);pMhf;HiG[F3rdeJ4(XC/_jV;/Zg`$13
%2T6lW,aE'5N+p9XUC)Kl=5H)YJ="T_j8!EZP#S^ns2/HY8,S?60d1i*r0\ZIrdi=5O-7qM)X`Q2`8C>"2opAs^W#1EKYOc0mLaq)
%0pu;a\\&!6;t9uA??22S*A<OpO3JMe&i[IMh>f.!Qc:iQfTL(+7/k(^\3\63\3]E*46MZEO8'Z`0sBUY))'b_Iq'GQ+EWrT/gZA%
%a)`r496QUp,Pd?8cRct-+b`>4QEed%A)-\"N'(:V,`LM#0-?\*q0@3+J3W4H@du"Jbh5[:7M$)-UjpV2U%ECJkUr\jPV\/t:_&lA
%V$r$I8DQXNP*-nb>N.]>#-LOlPIcMtOis"_Q8A-Jgf7@r"&eVgW(L(fdkq%PI-#j4_=,9CrWh7RP<n.Xs0HQk+27;1a5QcQ'?om#
%J(ZB&'Ya.Q>`R]sYP\pB(CCQX?hrU1(;CAeq4A;t'7(^6Lqf@lr*I+t=59Q_j:/Ft-mD]%^K"gr*&el,>#965TM\Df_o4-LLJc(9
%1@0'BHU35EAt==0J)oL>?D4JQhc'8(>mcGqJ%L=s)q8/P5&OKU?&Usj'tj%;B^8:?iLf'?Y/#`1HQW-IYcQ$SgJLfBMZ4mhBup;A
%@T<7YR$!,^2Pn0ZOD'cqdpejhF9/9+!l0fSA0\Zu*R-K""Q=i_abD=(IYRIK"hR%UA+L0QS&BuZ(EL+1[t.aOag.[7L>O9M3&]eA
%7P[JC-_Jk(mVW`DZQtbK7iO(d#Xb%!1l#qb45$d'E5C226u7fT-/posI^#U7"Ogh$5bE\h#=Rik9'[lR<mb=W$I"99$W/4*1-iAZ
%QO)k/a40H8h$##n@+<Wc/]Atfc4'W'R,u="EPdQiiG+2:=iW#G-?9s)6&d_GL.j*H?kr:%)o+gtMhhHoKV9)=CRZJPb(:nEd'VT\
%a;JuK%"sp8-L2R1c/Q0*d-0gZ6CUtle'12a"U5,m"@AT;ieY2#"e6GHC0SS%5bJclRAI?(O055]pCI_"<?Vj&$*ma<kk:rIpsF'&
%N4?Te`/"V,6bY(6!odGZbX(2";AL`N<ZYC[LIAJn&<:iKA7JA(3Z'm3b\Oc%Rg%Cg.lCY*'Y&gAClCo;]f@gP%KAn7"1'f#N/6V[
%ZhK8l?H9Uq;PS9r`jK9KXO-jfCUh.<W\NfFVQmF!/rskC4%`[M./GJu<X"nAbs=9?:5_Bh7:oM=LI_k5gUE=eY+WbsF,4<BGabIh
%eTS,ZK-.l5Z?!\*aolsDXu(fK!E0>SO.\'K)>M*3chgUM7PH1+=a!#\(\0V-JqQW"(U[qdGf4Ek7-m0p@uMs`*^g96K10B]+PH<G
%ZnZ5\1g"TIDk!V-V!a7[a2oZF$]5*iRk5S,?VRf7BUY;B92uk;XBF&#=euqkX%n3t0l)p'ZRYh,/>gB-Maf5LE_K[S#02D3[j9Q1
%7S4j7,u,soWhh[E<X"f8Rb>JY`CL6FB+(-9W1bhFZ`43M2-O<S?,f8H=5nfRS_!lUDQ#&^V:j-UGr;4:bWMm3-a+\j9jM^m+<]>s
%`2K*3MkKr@a2#AK-GIM`p8Uf*=gi9jB%Bk%9Q=/a-6mJjgq;9LhdDMT.JbcAnb8>=Y07FrLGJoo'Tg&Al'f-2JLV>$ect(a!YnRD
%'_>(#aZFCfcM.0t9JRk:rl)'STE,a/0Z!@:!DC6L#-S5mdYomlM[\sMW,:Lr,!W;V;t%,92REMo(%Ba+i8<$)C"U<;=X7#(L#4Mr
%''\=EcCPJ&XWpC`p9k^MO38P]$>C4Ri9^*6A*=[eO'=Y:ZMpJ(p:)lt?,M-rreA1or5q\O+e+Bo6EYBl<4K9uWt8Ce,rVX&'mX#H
%KL@ft#Y12HNYo(ja"B=U[#91"^fh3]c5H7aDoj/:G+]?W$b$cE+k2pkQsGja8`^:Wp&8KsQAu^Q(/%krHn9[OO%LD?-V?Fa3(8u?
%?QCAo16MTkOcHdXC!V;aLbX$m5>a;Y/K4s3r4#E<r'A1[nh&%UPd+'!U;X?qX?%@Y+Dg'B&Lo%AnY0,k06MRHLYO1e$n3rf=Srgi
%'1aI882Zc:>,Vn9`MclFFV1jO:mBpZM(WOBb4n,<MqB@55bTqQoIBX_Att4t@WbQ+*O.L75Obpf0R&WrfrR#\6>e2X+lQh>i)g`#
%71oBNYEZeXG^MZ*(o&Bp_`6aT'[e:^b4fLK["s8So@*"fL*AFHH/ReErX#@@nLGG1jRChI52G]MSpbF]!<t[M5,`b4+i=RHl2V=k
%)=#fWhG`4!l8.4(l6-GKa(Hm=0"nN3^L%eYU1]9G^Fkt"l!JNh;rJ#]f/Rd[iVf]rA6K/C'd?EdMFp[o'3RF'W?u5>!E!4,Jl^e4
%X)WmkFUkUjeA+Lnip].H:9FRYE8Y=$"?jF1%n@Z,O;DB9*g!ef[;]f0MiS)#I09k^#I10)@;q>!'&cW[B>M9l$VH+,JtqSEGi"&#
%0Z,[^lkD79B^\DcAtfK?/5uo#/L-15fi=(;AK48Fd1[#/q_kj4\pYG(R8p!70tG]@lb8;]AeQjXL#7T'.%.F,,nrEk#,ZZ*D`:dK
%723kA9>&$2Fi4Q>M%C*<A8iq`huVL<7g+5u">EsrU)-0c(()Ui<B($=Ai5M23_0`_&iGTO71"m^aMbA!=TsT!V+.d+EM95sp]ngc
%p`F(M*)=<QA;fK#<XWsN)9>(L#;lq%RZ0<@9]oMH=A)?Y+rTr*e]O:/gOs5\(8"T]$SI?rJse@kDg\tp'-W_a_f4ESbW@R9dqd_-
%+"f[Z@4EJF+,,jiSr<Z!@<qt:a0jP3EtD__EW^3=P="J9;62r8@j/?&1kD'=qaEIW!]*L-SmYW(;PJbC$qe<JBm/RG>X#2(7hAHI
%(q>aXE\[qE2/URGakVl1#Idi0#7VoK89kO7XRI-SZu.u,mp[KZ.[kUl-kkqm;$6/g?Df'4*YMDs+%\L*;(.Q]Gi1tg`3Mc:(T;<-
%<08D^E5@[Q^jJSU8822q]!GT/0gKCr7DK'R:rW>IYTt9J%No*-W3NY60tE2=+.e=ETPo`T;=OJ1Kgu*2p>0`@AB#<qhL\!$K*<9I
%+=5OXEp/=5c"`Vu`*=i!#lKUOdR7*4MrA;V@:?e+n11@qp#rYtFP*A:O%N[97cbkV38jD"E!M!tde=@9@@%.6OGi'*Vn=!A0fTlb
%oc0jVL/cf]pot3o/IbKN6FJ>#8-T//fS>DnJcnV&U<qh>^e_eTl"#JIlp4W:1s.+@%KUVX80?VdBI8OCde/+jaMdj6)p'H12C:1m
%QKWt-e(et(pkm?u0=_9Wd?LgB,3?V[d6NBc?1\g"]0IrG7V!&+ILM?%U\UaVR@;?"5sRu1,A!-1VJrAs_o4CAU@SV#F/!@U_E;IG
%qNE")..IniO`4hcXr):>F*Xs``"Wbl7#%U:T:\&1q0ACn^plAJf]>[MUZ;dGA'%fB4Tn>D(!B\_$-(VY@\KjHCm0i&XS2sgBq[)2
%U(ngkm1"k?;T?3U#\HPh+J<Ko3<]ci3<parA^LAQ6ec(X`GuNc5%LZj^)#b/YodO3eA]Nu=ZTi!l[i24,_RjI/G147*PJp9:Bf6J
%o=RF"?fQtSQEtN6P&QO*\OR+8_mC1Rk)&=;"WPuK;G8,a@)/N]M$CUR!S_'1HcpNK+3N@-TCPu37Qc:=GF/NQ,dYSNiGTOF/VFq.
%D('iN34&N[,H,`F/V?8Y\B%nM6]Ik[$;TrqTV+`8<?DfOg`-/QS9=q29F;9-BH/X<iG_&:SjAQRG/ioj%!rJH7la!_?:FBLr-WS\
%l[Z!ghX&'tVeG"(Gdu,\(<*:86?l;-+/Z[p2(/?"6hjdqW5Q7X%eZSIkue&%%pU@M.,BE,"%)tMSh\'@/2#A`@kd7iAH]S_EHi=Z
%7)25@<$<o4$r9F&;5Jsg*piLG)Z"`hP)*I(.,<.S;E!a#`F0jd5@b>.;;d&HP@$J,$<`_o9Pu4M(C#Tle3tVN::8%ao:WEld9Y$=
%btI]=6]OjSF-L=KrHjS/rF%tq<Za_^r\3@#ak'seJnlmDGUtYDW!)E4:g%MLDfA4.bfMnSE#ba3jJbs$n<\L_3fmI[:8C?&.oROo
%:^\cq&93j)>/(&'p^uRe7!'YdNs5M&IaB6!>LoJl9\j92Jj<G*)srP(0odsYS0gKFMq#ciquVR<Ej2&9@n2J!9eDN2,LR1Y`%\9#
%F,oI2l?rHO[l=d)CDoZqr=JNtfFLM2$m]o/WXOQu0u,)7Z#ml5"t,Zjal!jE`A//,R/!FF;f-q/4G[IJ5/=rj)u0#Q@6`I&:;h+K
%A9coNbI`\mEn2W\;&P#'Ica1f"ul4baM`]BOuO]0eMsjj-RKY,co+`mb%$uc(=C\Hbn%7&>dV<j8<craJU]kABctX&jFc7H5T>J>
%Q$k](;K6s<A)gZYM<oeUbD.B9FsPbk>K5]\8sliS2Oq*<nE1-0&Cou)8H]Df<Jlm%Z;D6C0it<ob"5Z7"CbOhL:H0g9PAn`$^@S\
%8S"#2EcLPr_El:.e&?Ws!iB.Ug,O1H_*\@qFE?G(FK!&E3t"e4'@5Vu!9)])A4dGri-rhqQ`D8"DUc\"Yp<=`jCh:>P-?W1+Ve'Z
%PE)mF_)ML4]Ui-Fc^(/&DpU.t$Z0j0NM,^TN=emP9MT`I''1:N300;O&@HO.Ka80#:llbb$e$9)RWjD$!1P\RC/L6.PH5)+e;M\n
%0t(N\`*dMAc@'OIprQEr#f0cI[DF(-_p!,jJ/B<Dc>6:%JiIU9-QNH"o6e=b`qtlDEu<iomas7epY!p)!Gu9Nc('$PH4J[B<\E#B
%-+*LGQi%7%Mt"E91rF^3*0Cc0,@r(ipf`b0Sf[/i4p7<$<*hj.9jXZXQia_SoKS)bCfn+Xs$>ZbjKsN/2Wq#-9MU%k'ogi*iBPj6
%cu>_P-!#Ac#t5H2D\t9eMN^<$o#7hd7W]/.Dc)t><[THSE-ko^I$!=tYSn'bMh_\tLG]BG'4_-)CDSGtNtY,":H3$#j4V'$,Q?mM
%EWe6d5h$qC[j`/<,Gq71oY7Td-B^e0#:`$=(AiY,q%/,_dU/8-MU``'EX-%mQ7=@lLo0kWrs%mlR]mW`LgHT7TTg?J?!=LXe%QoT
%M8*S$B9_!NfsGFa.$+O8%KLotP&N7LA<X)k7j;#dWl!uU(r-%b<.,l^A6EKeT1F9.n7-uR7\\)KMZ2sl%E+PH'WcnL&kG?D`6VkE
%NckF^P\!1l!M!5*0rD1>L+lD^8;YOHf5,HR;`*I>1o.&d[d%FOYZ(IfDq+9=>^WW:+8S*926)X/nS.cQ5!/I"h<&)B6n8;`p)DAP
%;TB#8s8(&*J**7A<kIk[G,s#-maNm.J,O"/>Afu.WDgR]Bs]A)r,V)\r#<:O:+akGfr:1$=+W0bIF'>$<LV*@"tWfgQCm/4TeF*E
%Y=\R,r/4%F((S.,XniRCg1Wq[k&s<c4KNjOYEbgmJcU'G5N!1cn.Z@h%K4Sa6t?(qFq`4hUJRGOnOGElI$A:oHu?Go:Ml@I5_UAf
%NGN\6\(<'7m8hNe8`n3CeS=3OjYa4kV,XVJD-s,7)NAJcf7;0L$q<IVO0Ig28R^jb(R9="Dl&K+Q&Zs3e#5.o,(nD8Q.JECf^eeA
%GWVj6^Hig$8F+qr[aj>##rcf>ZN\#Hblf+`dk&Nc_T\Z5iZA?q#k.uB_T8bRol<,2T&5:_U?5ldU36L;SN!R6FtHs:"EN_63gEUn
%5Q9@(pg]O3C[onLSWjY"M,kjdn$Y<;)A4jQo-7K+*1m+**9A``UD[_E=N6c+@Ne2*dh6?S'Ei@D0(jFbDAf(4_r[7u@(;qcBm"R"
%a\ilQnG%+;=K-K5:5ZI;n'jD2HagJrh^JBoGG.pO]-Fu>cS6MYUmD"Z<U9/5.Zh,>3U_-=T[dOcQu07DhDV429"!IFldS6oXmLYP
%#X616SY)jMi56j@;&5HrCWA,BrA*6nLKEl#<`ab3nu=LA?/;Q$1K]3Eq"TlXP@QKL,hU.%GIN813AclQE5qA1K%Q"L2+b$]=R3TQ
%AMV!s]2J'%-.nAoG?:9Um[Rjhbq&6V*P\FC3Pg0Kd3OXscNJUi)9C79F\\B#<&0=k*XCk7gFp#5mp3\78qN+qp3/s^::G@0IWI*U
%h5r#$pp/jaDPmkk8]`'h.IK':9>TP1ZCuU)\5RsoBDcr,e.+.W8ttugXm^"GgA"t(]=!8ha8;!4;piSkQ-HOeX.pFoh?*R%itsMV
%ma:6j@'rh1&#3OVH=<kd@^4r_[oN".3LWaLUI6'4]DW.D?t9q1VVgqeoLZ9PYj!1O$RJF!PWDAY/q7OLj9^lS^fnRh88ZR;\V]oF
%B;+*3Pl!hAS1tE5mR8Oj+=*RJEg%'V?*l_5jfA9<8p_>s9gL=s5XE\)\Hu:FZWQY1^7SOZ2iHc1qUENuMWImHHP"FJUWN/H3B@+p
%?Tl-ob)O1)`PGP0-G/1*c?ZfZ9F"=&9T['1Cj4#*s$qdW,:/K<*,U/6NX[9QDV)#$9.s]-laGO_YFZ]YK9P[]2_H`:IV6Uin#6SX
%PN]sU*G.?qllh5W:qf<c+dlr6(0NjE;41$*a"kJ`m]a)pUPL9G<bZb^(LG3J/pYtmBsW'U]@p=$K,1Q#/CCr,rI$Oc_MgJX5EkJs
%gYEs"E&U'[!ePs<FfSh!hl+"G?9O-5olmsQr@,iI\FiY(;>5"9_6D+I"s!CiEsYZ"iM$3"I?W+SD>[#1NF-n>%5lfsDDqe!;a/30
%UJgRI-Hg?krc?7B(8AAjXO58VR0]_RL*?3-T62EVd)<O!ZVulUe,\#kLE7GK7k,X4ms2#_fEX='j?4d9?.X;!\e96-f>CKGYrrq&
%TmeBGPh``XF0AU.>h/aIP0Np-@@:66)5\NcJtq0Ej#E#an4aB&VBs-lkI3'l`8j)UG4$_@robhD<Bd`=T>A(R"M:)k9]5rl,9,qH
%.V6a])V&*9pO=JK+.E*gVF4VHIb-;#aQZDpRNdsRZ0.ESY&olk&)$HtK!BYF@=PBVl:uM$Y#N([#NO:#F5:W=RTF`V?ikI0JRQWJ
%H9UYDWNd]Za@s/`RjkP/o(nOoP2L.cC:)UXIAhcm6BR,V>)=:pS;s,p'N`+#8Z_`P4rAd@`)2p<`AMunI_$SY:VqJmYG2b1PlI4c
%q^:!?:5Rqtnd>fMLK3G0UOl5dn<739P(Y.qYIACR`p[FO#mepRqAdi;5/;6(i&EE?jji[Gp"6IrmHmJ?#Q)*fec)i\NbNCF^]#j0
%Ci'NEG-gJ!I/JG[4g-l:-7;+W5;adck.u!C:8Xp5)G!2_M)ROh9)b1BqbrLQ3I\=,B+hCO2OnHI@7iZI4?d5c2bL5">e_Qjfqq6R
%-$cG2)R'*16DTH>Fc#b`/PH&<8Qu6#]kB9<8]nlJfj3"2hP_em.XIph\(2R>:)D__[..F=X6#P[RUBdiEWs5*0$1hZVK]GKMhD7O
%(R8_m=Wq8I%NVET%SlZk_7r[>84:)%g58u1g\[CH4()&M?7V`Jjd(+uV$(tAdmt*S2"#;n#tRrhE`3^^\uTZnE-.f]9hrDulQ<=\
%ipH2LPLW:]pC]SN;t?rb]ge/t+<jPK1pZW9Q!,BLq=mafi#Z.I<k;@t.*auS6qK_-acC!#:\nP#.oGa)\*]GmV'm"JI(n4/-qTeE
%ig"VK$eV>Z(+#+=S.a:,jg?M5qc&K:8E)#3(*s8]-=1]J[Z'+c-5+6HZW`Sr/]t.1j[P\I<f8`,iBS$u9YB=%;h/mQCJb_T$rc._
%:O=ZcBi^-Iq6_VBLc"Y%/s3l>&uiXj;jqF%WCb$i;aS[l^-"&GRG*T4ds&^IoFU#CY2V'8E3J[_bjLu9kl-UK>>EgFU]!fJ8"Q%$
%EUMQjd^*.iApWjRoU7YdCC*fkdq^bQ2UcG?U"?_V!1CB51O!]!eXDOm3n%h"X`cM&2KRG]cItsmc*Z2Qd;%&BTsIt+9UJ<2Q2h*g
%p*b*a%KL-NFE91BB4@)*"Z%m%M,B4Er\qP,a])/MJtb52lVXCf\4GAdg(gR%_ob2mos!`[4M0_<2Q'FPbq;/IU.\9cI]Y>HWO#5n
%mVFEJnBqt-$$iE+`fP3&C&5"@WRT,j7AW3GgP02Hf^ujP+VEBOD=<Di;sK+7Uf8"V.k18HJA:&c"$T93UO)l^'CU;d^S1OQj3+7/
%7d#WB_Kos3p\tV`mKA_fiiDhRf[hfP<Vg.PF?lg&CGsmS>7\:O^-6s[FMWr4P:$8Xq1MpZdZ;A%/o\tZ`:?fdVHsYcVq]f9m,`Oq
%Bi&mnfP$HBO@4G$hkBU5OCl0IG2=%iK5oKi-*dJ*nHS)eQ@Im'Mq=tNY%iD5M7NXl"#I3f1JC<WA4O<t7WKCX,&V((V^2D54mD]c
%G5aQbs,HG^EmB/Qq+A_B<4fL.hq@hom/2'Nr]<4ASXodUh"`V6+F!sh.2rTLOf:A4SUJ]%(t;@N0uDEcG\:['ZSULlRI<jUT;2hP
%38nGpZ.=-<CZW^X75r=i<D8Bm95lUi]A'oI0JFrLim$r9ohOFi1GSK\3eRh4,fK!61%BWNn_3l3PT9VnX4>5Ij#9l<>[DQG_.j9p
%j@ukXh@9kZd\N:`=b^aY+e*&aAf7m<1OW'5;`0\DT;BXV3).C.I,hNoqt1Ef9)K.NCuqt-nY=O2qONV3?f#J']_]u"i*$%qQ9Vu-
%V<B2Gd<`PW[;KX0f*oZ@LMV6;>\5;7NaIKa$.EOL[We7=.9%],gdUU[VmRrW%L@94)4F1+D`@V-q"(WboosuQ?Sa8-,]X.%rne%:
%n)sm8!VZo2]0RXB^WT$'QWWY+5Ku[R^X38'0!iL>/FbJg]Z_!AZc#N*?=o%\=lSQ#D%4rFS9PWK(s9V;&hgT0b:N0=\VZZbe+`n@
%-P#Qm!pNei4L5IE`+>%ugI&e9U=.!CO(O_Q9VNl4<]Z"BASA)V)V%*9B='&bSr"_>R,'PQ8bI_"Dbf`TQ[7HA9.#g,1@r8(ai'_g
%a4W%<P@YbI[kLO2FhD.51@Z,8\MH?(Nfu"Qs(fVo)UI/V?sBPj=iB"\999+Ah7b_*[kD<:cAo*@EoZWAQdjg&Vt(L+4#N:!jj+u\
%T>Zi%EH0D"41P3S?VX.^W=bs0hh#!+n27;sBTi*DbfIcsnB]qXiV"e%mo&9Y87_]9@t<H6(=PV#RfrnX7[ZJc<\Q[)R71f<&>?)7
%Z7qk;YP_pr6UAW%Z>HYBR:&*J/G'r$kl6X@=Z)@]hVXT=U*<.Umd=!R[sV!A"A;T)?iB.=O"hNgQSlrr9TPr+b@=5O-oq#EO-*r`
%ZTQ5YO"mWV@To]kb@=4/;.b*4Bujf^DoBj:Ap1gTAP)XpS6<rZ\<>n-C\u):s1RaM91`BoT([@sk#-dV_UQ*=(G2i?nZ)JG8s1P&
%\DPq5"iK6FD(!Ap8uFKs0,9DEZ/&!JRcnb]=R/Oj^5:0D-+T,9hQ7duBDtFiRV:_CUWa`Xqb<p@^M#K>8PD0&]/q;o]/")DA^]q:
%Tj(D&$,/U$dn&J$2"#5tpZ/WU,[U63Y,($^FQ[ioc)qNPK4u/%Ut[s!<^AX@3@T3&mKlH!mnEQ[CU<=mrh.3dX$iqegoH%1,b(3e
%HVHcj3Z6gL:UsP?`Qs9%n39VRZR!K"hZ[@Z7_-8]$6A'UHZZ.3)<X?4:)"aFcA=l>@\\F:Mn_pbF;E'm)6pf4jcZUR=Yr'qk%<#r
%+AS=nF0fQJIm'5n&-U4O\LE?s&j30Y$g&cZR%"hH9ij<@5d4kZgantbKlaS>DALORd&f4p<B.Ifc2tRk$0W"AhXgqmD]=],A]m`@
%H7(nF9.!.&4.a&sf.eQ?Tr7HBL4ml`:V+L#dg'5mpI\,i:71g'-18\LR#Os%0hdcHRpD+1+_iOdQUXc1VRi^XGKjKK]ma;\9%P"2
%"uViUWRCUQSgaKmmej.58`bhQGI?+W`1*'rJh81?VG`<>[IO:195l4AKA37r&bEIb65-I.AdR_6d;@A2I<g[a-h"S+,r2!qep#)K
%M8'.7C/f>-!g.Z8FlAV`UkFUa^T2c/i'0NOI%sHo-_DZGlg6FsHoUXskk;p*45%X2=,@uhY2U$/1ftc0I%u&Rm?#[A9q4)f'Bg>&
%=/FJBF<VC*]IS#,$#\hoX7.`M^,sd:Y-p`gG0@?@h51!JW0!%r9m4,GpeNMqFS2eujJhe6DY3>!1Z.AUI@lp%]r=_s<#8QWh$nb]
%r[rE'^B@#(Y'0-'Au"eOBS0`[R8Yq`MZ08I2"QQAI3HWtL1a9/`&U9\XmGmR<18'(BU8"V6qnf=_#>CSJHWFZHIu4Pd=#Dt8_ufI
%rH3ODl79stL6X.)p0c\3*g10:-f:Hl_.(R!\N[K&l!2d:7,PlN]7slpU[.5SD.8*lcA^f-38U17-J^X.fu)#n:0`0%nHLbZ\Bf!O
%,g4I4RVeS7%.`c.#,gAC\Y&NhUT9bSNk!COZAuV4A/_$:fhFZZFd(.br0F^:q2OlBIPK5.oPT^<#b"4o=7]h0"IF[5Kpkq=MYM,:
%?NF^8DX#ImW^8V6"p6t>>(W?Pg)J"tPH?2"l*Gg4os0X*BkaLENf8Vfr0ZhcJr"C*0?I>0&%?*)cP5(I?S[1H>pRS7rOO$EGLY:[
%SGCq_,+A9oT36m(V!EX9&#i9_6;Wkn"8l-pdl5b6dpc4QhP!EE]Y!Z;`CfG[jfeZF"e*FuiJr,R":\:lajX,oP5;QEe"itS=R/'"
%-H0l9F>T7tj?>;$`_It^qp&g.1H)j\2H0(Z1<\KfE<q7XpdjmGbH&**P'iJ1"S+\CJs4UVbX];8UD"<5pUHVI4\L4I;BNY>'e4LP
%<i^^>'22nhF&NN./]i]\/$]">/%FQ)+>%,J<97qs?4O[XM-qZ^cLr4M6PtN[HW_*QS:=\@7mHh85Pn1Obi-kXX'PLK5[TcY$d+bS
%kC+o4lF*loHX>O?oNS;I<Z0IJm_]`gReNi4asGe*dIa6^W33u*DWtoOa(rktN*$X-,/0R3YdGY?_]9.iiA-\OW#GW<..e2Kn+PB%
%nn6WVk88-aDM('cW]0p[dlS8dV2rD&*iQKm^cMA.-7#q<Q!1NZ#E=tt!WJ6.629>!%j=I4.q9O$Xauh1Z#!Ka%JiEm)#W>BWaXVU
%j1?jcOVL=RIc@u+nCKULr=,\rmA3!q<`8%oi56cR#FM=rMkQ#IAD&C"\ql<d[`7@jd&[#6NmAY)4MT"\QTcJ,#jkBFP/Df!gr?s5
%LqWQgJ,SQ7"@'G94i+3Y,Le=S)C&#WVRafencah5I<b[rG2B1W;#`2K&pg4gAe9kQ1eQRB`"*$T"'i*M[O)$r48:^GhuF=nIKMbT
%DG-XB?qpW)_q`Zk_j(/;fgqmOE43,UDkI!t>4%<S()n1P#@f":?o@?HgSm]nH)6PYcSiL*&_[:YO8[?fi?SH8U<OcU`+J<HZR=F>
%[8FO/a540k/!3PEP:?Jo,"DDt$YRRp?,;b$,0<ABh)d"`c'?0BO5t$VgJ.s:j$$,lG,J3,!;6(V=`h@EU!JEN'GO8^:Ao+Pc11RL
%W;lR;m[#?20E.OCrgj0chQBmOpIC2^&H8dPq-J3^Ng"n=0.eC=<PNam\+)O!>M[H.:WRu9?-bcPW/f\7U@6.!KnS?FHhZ9!9u;fu
%MlLIl5:9u75cS(a0krr9N=L1K]Db7^TN/NBTC8SpoQQ`@-\A]MVg.I<W[G]B!95sLl_sV"Y70jL/M+p?f8H%MM]>;4Sr9t9/(\%V
%pWLX9ViegUT,s\'Ljj0_O120LF0BoN2nRVK/:-[MIF;duqt=uL[ads_H*^F?^%/#L>GeBh!^53W2s%G.k7+Up:=6K..5c5h>:<-X
%G"5P2Ef[1l]2A5^5.'r2T'm88*4:DheP36$&+HJL>Es6/?2<UVYY+rfEYlF#-s0$bCL?fgcDt!A+<+d#(efsd>7t:;Y:O0r*L/(]
%/2o)I?@C=@2EE!uZTG.&\'mkgH0pXL$?oonL?8n7Um>a!U&%l]LJ>gLHJ.lfH9Zi5<7>XZ/O4BZ>7G@Y'+?jlhUhEil+5:0^taoe
%1[1L*$WU[=+1D*Uhtl<0:AfT&WNC3;j.08OQ&]BPe^>I$(g87:o3VBNf00ZN&.0bD)C.0`qWKh97DM71Y6.C1\kX`<)[\t=(V](A
%Y6*\rk#+]5E-SiJ5j#;g6+>;GA;ot$2UK4I?*A_1oe-3m@A=\_Zq#5I>@+kW?)i@Qj-N]bSOPEC;_S%J7)ZXnB9!K)]jH")Qld+(
%[rr*qqKVLo6/13baf?W"@]cCW:,'o0WMR>YN/X'Z('7cSGDb3k<UTe7DkRYn:F0@/!E'HeZR5%Do#'>h<H3ciEpK>mW(oji-1)Rc
%*+`S0FV1j/=79*dTI[\KJ;-[l+`Mb8;YO,W:9/C%\,5EhSK3?;i!4NHA\Ub0+H$Nf6U\TTHH=g>?2o[e9fR2!jC4djc]N,Z<VTG5
%Z;\g"AeV\fSU-3$16FWmiO>8X8ea.'&(,)q`6#&E!3IBS?ueAUid0Z`9@ZWJ6lf2Ms+'sW"PU9h/1K;L.E0"EQdm.s`5$-(T`ohN
%L0ohbU8kG6)e?K"o)ApRVpoCF5sY:e9!.J>3q:Om@bHH0B8+Xb.1F^)>DL7u4RP!Yp3AK:T3;TG`/(ip+8>\RV-AlAM9j@.$4NgO
%UU;;)NFiJW3f=su)W>($a*"Ql>Q@[Uo)9+`+28B@b,BH];6*W6K]Gg,lGO=0-tU2gEJm1b*@a]uFO82T8fqUSKWpu"_IB"Jj04\Q
%4([!g`E54URPm=/Z.dZMj8uk\s8)RO7^b=;WL@fX/B)ic$tRr'29n!cH-n;21QT6:Uo=P?mF#>_4_FT&dQ@b&>`To5M+%K.&_/$L
%'%X^1Fj.cUd$LlChk6]rA0]6F7Ik31ha$=Off7lg?SkXmX48lk^IOC%883:J]JRA<M&)BarWUMB:7_DY'j>"bU,=+Am\%ZXOa`=n
%B+/J_HJ;G7JG]gG^9[^If&09pg6cQk'"7_M+eH(^e*\^:c?-.H1OAUm,SR&7,3udqP=P0N[;9)IWoLV"m'eL3F`2f"f!cr_@$9NT
%$6I@r-:LZXF/=CpLd2nLW]LD>!K+6[]Jmo[mAE<._`37LOi3RMRMftpm\1-qD%,0TNK(_$[c0XuM,-JZc60AT%$rLdYh:QT`-]jM
%KWmAX2=Te/&ZH_PmclNQo^bneQ)TJ_iP6eJN-'mpSZ@8g#)NF=7CELc\O!ieN*!%XPR;c:;YfS-][YoCB"Qd_'Y1?=&kQ=L(G&K^
%L@H=F(R;#:c+o@Hj5_5d\-P,bN9&OTNQ<aLH%]?mYHg;`2/p`V]efess"lNKiAB""ZNWs@N2+lY`Y`TdQ2#KD?mQb,p->3_Pr"C8
%`dM?^'JNXg;$[!G_0j3M4CHXR8HWI/P.Y35=TNeeUSil1@mK.prOBZnL\>hX#o&4OZl)$m(c33fYLmtC8/aSLO&;E=X\/80T,60:
%DdQm/E2ZO.RKO_:K<!N3[]0kp6*m+r?[:Q1onB*E<gU5[*psq.nW-Q-JNSR"7@>";">k*;MqpkF2)SkQ0ijc?>L9RE8gh".)9j.W
%*Gc,[*Bgj0V&Hqp;C`=I6(DmkmpsSk0j:%N3lbWU>bb>qoM?mZL2NdK[BA9B77CL=iVPk\IdXVtUSo1c'Sd^hmDU$bf.a@Me<`h4
%_:V?amghdB$M`o.#AqHYSq3\SGL,%(g6AY_ejUgBlL_pP;2liB#5UdUb]sB0L!`e!pFe\RA;udAE,OuO)M.XB2K=[E`20L_gYPI7
%gLLC*)(\IKpF+!]CKTT&?cP(*V'*`m%N4`@DnJC2%BTUXl&qF+;)SEpX&_^[-+%>B98tZQ"BEsaC:&GL)lPoWRae(e9bR&BmINrJ
%k)EP([cKu2-oFc.@j,Cb3K1?f-lK;K]5>=0-rF`#E6t2A4_%p4)9Kp?+sk<rHhF\ckkFL'@U`oP>n$DrN!t'\@74J+pfs=7\FF+b
%/\u6^5;^G]A6'n$SDW">b^s3=1O]0XSPF*Gh8>SiZh4.>9tdcSnA=!0H4-jQ\`8U]q-ADY5Fl]*<RQfFMkfJ$#L>JLV7?9aQZMZ1
%HW=>+hJN8godcS>r`Vjj+$H,eVjC`8_6As1]63Tnr!1]H[HF[D4"C0uTS7;[ZM*J).f?R@)LfpkgUZMH2Qpfa$6,AY:Hs>9L-H_C
%UpjQ8904fsm0:8Kl-@:)I!`Yg:Hk#onSO->At@P"'E2+&_nhsUS\o@^nCR50I!YqDCd6-S+2aR<fP9hfHf99XLVFo!A,!*QV1#Y(
%DeZ1_+`k$EL-J^=qQuXa>Mnu<)go9/ol]m'')pk+0A"E^=6D/]bI_b&D3e<4)\hl[T:c+g5$6(1Xn*3;Y5"g>c"?V(B92]?g?N,?
%jEl6I\<VE:!PXmaDk0*ps&cdUpgTrdWiLUmX:[X=(nN.[P+>BUBn[RU:FeR&\?:3B<KDV->&6B94h%MZPtUFRp&,,4/%qBU];f_N
%8=DefHm(g$$/\tn&jEo+^qe$h%pFLSq)QCdar(5b42>4?<Zf'P!q>N5Cco1e,W[o;:Nhc8"l$sP\_"mJ*<"?87buA's)=2c.R..]
%D6;&%[%aD@jnCDYL!Aq]>DnJbO1',%XKT2#p%%/+hqqLU&WR3R4[=J6OWu8&04'.Sef'n2ifiBIJRuMES`VFu?`^GImHpq"^HX7%
%.pKX)I7o(:/cGORG5^u3H=aG3Z3?QZ0A!PNO.Y%qQ-1pHTOHG9D.X-(qjG.jiM)]d^:sX7HL98%MIG+#Wc*47Za[3gIW;T7Xuu,a
%?bN)H!.')uafW.X58JFb3tGc0>kNABcW/5DF5(#:?g-0DBh)I>G!Dapbe8H3F72#ma5-C<8o@;6fZpM!eWo=nLZ_fQ2)A=D=T,$3
%EdN/&]n@+7rC+s..m:YKY,:A*XA7*,?[PME$Z?J^hGuh2IeL("/"I=V>CQ3i0"nptmX+fX]).;NSZ)ukK_-mF`cq$nV1tcCZJM`b
%=.Zmf0-0t('q%1tR%@O[]Uk^E>hDh:crSH@$T:QGimRuCV;U=DZCP<J<rJClhE#PM+2-CLUfUmKjjK2c^RV0&5AbgAB?jSFdqb;8
%VeMuNpc>OcD*P/KG93RQmMdZn/j=QK[N<bE8_`N5/+#IVe'i3^G`c<^PQ$a%.+.Wdl)0GXmI]Q'bCfGne#/PskB1nnSQgSC8EW4_
%T;B"4>7]0$_sbq#0,C"KdQ7]Yq=L`<DDo2o/Y&[3T<0ZB%i;@=o]u*b-%3G4B;FE5n(sj9]AMc!mi%7rdN?c+?K!`5hS$2C?X?eu
%V8&UhO439i8&slb]B4b<7<rr5IF[gJl0Ce"7Cor,rd24rOP*BY0>7=UmQB',bb]NrmbE1G[l:d`RpV[i\pF*_DC,<VR9OM]I%=40
%]T"pWh5e@KF69t)QZLIO_kjo'p%kSsc%k/>\`^*hhrjQ38&o\i0<^>FS^0CJ\_U%7%d"8DHcFi<olY]N:$;.Zm_&Z(IEGURk0B"9
%B635nR/19%8"6QlJH9NWc-LIU6Y?Y%kra?'c-IE>*m?8Uc`ZDs/*Cj6=-'I"o;_fHR5YrTQ$K:i[HF00h7/i%Ie<$FHt!':_>K4$
%V)Z6epA4%OiMY;Ir5lFGX7PfCQQOM&G+3REhP&PipFhSCoA?oVhdDoKqGI6,^:foIHn]d6m,Gk!a8*m`.po`g*[hu2^-+1!De]g<
%:M8Q,CqaY]+63gp_Zqjem-95:Q+,n.UW;c"&)LpL[i^!$4$@uLXj;KEE3]0&lG</FG5";/Z^k5iDfhVg1^f61p3.<R\dq"WW;BnL
%_<PQ4(7skGDD("7MrTNYX4LD\H`s"n0-&`7k6pbA3q!iu<3O%iPeU5"Kl:U2%i:ZNV:oCilkt]lYKO*c1Q/['U1)Ab/?U(p*uCPN
%Z:cmrijO"+C2r^uFa`djnaY)I&$NIg(HnU(/7/28a2NA`D.^&b]);9\@f,QX_c;3Rh*^5pF6;H$l]"[NF0?M%_juG?o#&@@S'N.i
%XXl=OId(2+4hS#UY<8oRm[QH,>X*^mg@4(`e+?Q#_L8n(\^pW*dr.uoBrec6DJ9W'jO-WuG]Dus-a0mVIbEL^Wob"2WKVZd\,7rC
%Q^67o.u2=AmdB6.ZS1^io(MfEHhf@:?!`!S1B2OnCErdm\[$L4dk$!P3p*2k_Y9<cRDk6YO0$Z]muO'R0WlM2cl`%D?8"4L8+.Dr
%QUg4=n'e&tb3+hH3fUJ,/'H,&T3!kIEON1C@d\W?n5[#$fmd8*Y.WS;f37_,g']Fgp70?!BC<iqBc\puc0$-``LZtJ:KADV+)eQF
%Q,a-+pAEtFT+CV8V6BaHj4a>%gXWk2an=ra_WK"@]tTq@c0g(2]DAORd9&Oh5O#4U5J>lW^!7U'X`c?^.%-@Ua1[G>G[AWW^M;ab
%R9-:ZD_n<':EF&Z=)VDUW\<\g[CMY#PI8r9U[p@@4E%Ca].^n"*NXJW[1@1^ITZbr1tTG`IQ:JqQEj:#rQY8Jo$$``b0/)h]Q/=$
%GcR@LekMtN'<;L&9=lm;WpVODWDASAYLFRgfi-cbCe[&oo*r,,ip]oOpg2'Wg=(g-g1FiqWkHQ)H*=o.PhFX1rirSRhjo7q0,KZ7
%\n*FBeaqqT2u95=H`;L<+$A/im9VingtMo7VD6X_q%_rS'78,Oq0lo#Gk^Dfa7.tNBH(ge6/,YTIag+.\+Z?&S^/sVDq5Dac-kmR
%@X`h)aL3-Qb!!'Np$3!dQs2Y\:6(@\XRk^Teb\^J?aLo'1+_0c/f2pPD1?j(c9C(6Y3g81n]5U7dFde+]QKgYGgUV>j`?1J@<5r9
%WP!QVc(.(DY.:#$lHmd-Si5EV>?=VUYPnWcI-8W3ogb;AYLhBaF(nHXcaMH_qcD&8b/r*69XF9I<OK)?jL:$dKu1b$`_#.\mRI$>
%bD.#W:O2h*=dh:A4O8MX4?:&(m6'p/:WlPJ?[VYFFS4>ar6rn\jlNE;hGrh)g$+,j:Ra"3IIm"&X4HF^_YNB>rE#&'2U=SR+U`*E
%/'Z%GX/l'^B:Je#cd*)i]8+_Fio@n^<mu,^Y8qG_4jVjY_ro'5$gHj9g3#3@rpokGX*Yp=fraiBbO"!,[hm_9&&#%!_^F'nEpi72
%/bc9EZuTMog[hsfX0_rWj>6[ooR']oh96sb3\U(@kM)ng#Of7cJpjl\0"a<fA."sd?=aMhYC";oCQ"[IXdnurH0`_QFEX_UW:mt#
%nEm].EF\CY/aiMfDi3]_Sb@5QIJN-9\a"RqhHA^UBsp5ZPkMQ#Y:R.h..4/6Mo&ogqSg(IXj%Zi8(GeRa!\&KGI#E8hfdk(/EM)i
%\_F6Qb?\ubjeb8Wo()S:lLW3";h+Dhd_WutX/@&RSA'TJ_Zf.)l0L#_XnTG'cSU%'FnbZ>p<i<Yl,R^hbA-lqDmPVMn"%+jBRAWW
%)sR;9qsnJdCMeLTIr!?un(4.Y.NE!mMAleS08arBEN]36i;;*u_aEh6Rm5\Rp8NC`f(ma>Sc4#aII.^fF0?,0V$37Kou2frI'g8(
%W#RtL^Y),TcJ#V"gA[S.a(t\6S)`nDU\!M!#KtAUo\?@0'BeH0PEWoWV1XuTcGfUK8#=]12n>!Qf&(j7IfB1<lX]&PeGSl:4l*a(
%gcN2Oh"p_f3Ho;T1iK^e(N8/ZE#.Tm[OsJIhH;KqIsZCDZF'/inp7M3Ic]ktqgIGpS+HBH5AJK!Zrag5Y^X"Wm)-s*ou;d@f(/6!
%oqMEKj"(*!bK'1?o?C(S:J9qJq1ZtH:S5q%S"J0%1Q*s3kDfH5o?V>]+7FYrS5el/L1eb\3CnY0pen@=]fF9KH*_Y%Z_Z;fV0>uk
%?^HbCmalhl^&IliA#JBNfK&um4aVYSf)+t7nC['p*54Vo3''/a5:rKKT!oc3+-iApc7)Fc3c:u?99!"7?J0XPq5sS+UpS:PduV\d
%nPV+?_l"SsIPnl[FJ6JE?Fi+@qlY9cIIURWe2;[;o&+c_lk3droTfEe^2\;*<]e!p?FO)Qj4!Qgjn5,9O-TS@/ioleXM`K3\)U77
%[;X=5SYt*-@^UT3>0,FLm;G_&qIJp";gmP'rS$&=g1KaJPN,j6McP4.J%4Q'XD^7$5LiDBb1"@?44@oVI%e;l>b,dsBkkf,I.Qk&
%lt`r4P(!_dI!<;BRc!#jG]U!oT(-%21S7HIB92EHp@?(SqgY)DN3@pIXuMG6'r_%s,A>U5/#if]NDosKC+hCid^&G)?Tn$c(Og'p
%EL8blAPa>m>B,CO217n:DJuo=o]h(O]oKcJra*(fWALZ)[\mBhGKN*!p$6A)P:8B#ohJ9aAZ(!J_FMNL(-D`M6,t9)EaCJ<#tl@a
%Wmr^J[2Z6tXdrbXH4LD&1Ki*f,(C;B\m).@O%=]@[YN_9^D!K.a"JSPc!lYNq4q#im:#E56!HBpc,Gk>KA('&Y1ILdUQ2e#;>Hjh
%Qq8?(Sm;).5NT<N<9MD"M=^18g[F(F!:A:n=+3<_p3n-t]Qsnk\kN&J=\63;2L`^`Btuhs0lSK4VG.01ml'ou%K*Q[9f8uu[8B`q
%jU-H'bMYZ>]h1FfWH5gRKU3aX@,bRE3m]#"C#D6&5?4Do1+uZ#\DL(570`Zh.j_@3D<#1KYi)'uJa,>6_0BQH+-=,CX);0q$`^R4
%h>0!8\<.ZG`0);uEiE&QNlap]CP,fKUupm<2"5M*X-Z*[,\G?Xd0E(FD:*-ChYQE5('!_*XcND'*^1XOMPJ7Db:*AV/O:E-<n;sp
%pgT.a..9%(7(hN?5*:pom5=0gdT*>Fo*[fgIWW%`[l]0m>i^l5e+Ja*32je+)o-Ue&7aWanI95K8)XMfrXG4nW_spE^+s<RM%g8p
%VgNaU/*`F3[=U;IY@6=-[6%J(Ps'$g#?q9@%K[-6d]k"C$?XqXNRi5c!/s;[N\!5CV^.4e/[ZM[?>%mekm(sKoM4FWl.]kaioD'O
%10%EBP^uAjMos-;7bLk)#LC&%UG4sF)1#f4D+NJKo#D_f2KqQ5)$<Y7UXU<8kJ>2o6eF,mg^dC)j1.clXs//GWL#kup!RMEa77Ir
%N)L?V7Fo&$Y`I[M_V5$ZYsZ`kN$N+BmREbqos/S#a*V]#lP5f=i!BoHO<:Z;V&KI/N0]TZ4U/04KN>tt@sZt[\'^@2boFnEpm%b>
%n7n1+c;QG`-2.8f87.nQ?ZB'nK-&*-TJr&o5>7W3aA[m$]Pd4TBmD)R'!AKWTqplNkRt[N:EtiC8roK43?Yk9l)g9k3nnZK*6#9^
%mi:<+'&c,]Zh?2,K[G1%>O#Y'OdZchicY0_X)@=;mT$9LEWPs*AM>2/S3t3M]`uJ>B>CfSI?3pj2JW,U)"I7+]Cp^qo2Cr=52hf]
%8Bkqhh7Aa-I^WFFch%C1kRY'GfBDn_hmS%o^gWDbYK/;9jMUJ`I&a]o%tE>O9%BGrAt&5/7-O(7?iO9'f(`7=]6+JX@;UYbhS:Lo
%f2LK$$sI^e5rjS[Dh;W!E1pohCEHh(q!RUcrmSi/A=Fh3,tr^.?uW.Kh1&8=9*#e*B/<pS!haa'qtN8+pgWH)`r^SUQgcKjlTd1\
%hCbl.qYJr;rLotrD3jonqn8>R2>"V/g:`;Wm%p9L%o="g42Q<4+5p-2n,]Q=ol[s7&UP=FpPAcRC%p_"HJ:;\+E^0qR)X;/l:k?T
%hImZNnLWIVkP2_sg5T.1rT=*eO=QQSW>Xhhep-qYZRB>WP/WdF_GYEc7sj'NlE[fK\*RhA;m0T.3V^)YbZZ:>M=#I:5Q'Ol%jsLC
%4^8@9\Vq!GZg()Z(LFd[oiq<u$QW\niem.5X#.Kce4M;EVr#*5NRoHk(b!(V@^utN5UE0T]&W!'e5NAbl_sP5Y2VJLhIl+5RVq,?
%Y&:"t7eN]aH:CtA2moYI)8e_A(P5VO@(S.\LAb&^V.Ntl!I@40l)"jKo6V^WV+T+TF>C!J5rQ0VEA7LpYI\FZCc_^>s7IJYmXaa\
%9TOAHCbt)S6b<O'$rm?K"6\9P,GPK:Z?0cUB+/&I<#Yg@`\QU%9T=Cu):`2`QI2rRGeTX%]&?*ZN#u62K]s+\&J2%"B3/fl3hS)?
%mZZMi&RR6u@9jI,+@q/d1h&-*nmlfrY`.KSa)EW;?Q!(W9_niN6$5%q)-8[9P9@Xqn>`P1-RmiXUZa?%MlC>G-UN^EXc\Rhk[n3F
%KIMF'kiFcAN<&GQ]QIWo,)ucC42b]fR8IZa%]mlLkt![\De<f9V<b@7>+B()4fA`Ph.R*+26ep*.ONOCc[\c>O%Rp!/r#BQL*.uK
%B[]\k+END!P!&BrjhF+jh2NX#M1Nu?W]e9#QlE,-ZN.*MM'NE&5TU2_9D9OgH[Jp*`PC",pH#NCki(e\R(s:^OU*9"N1gj`.\M:$
%$.'@4$C"D0ILg?B:4Z*3$P93clq.p6&3aB"1R9QK];bPW`.1Wo0,Oiq:36Ni<`>pK`6IMS!.f7W.&:>'N.q2&AkYRpM?Q^q15[Qk
%84E@W58[i_\d@g7Tr2;%$?I)jKJ(V[@hVqD'%iSfJ6l56QMu^ob=5ZN-EIZ$IMF]A$<i?e[0#.I+:scq%GN.C")1F1Jpu'G'5.Q\
%RCh0<+_^NN]4r3^+X$1o0rNYh2INXe'*s/9!eQe#2$%#`Ta=R*<08V[aH=%@!bVc=GLM)Z!as`f)d!8F!&\#qXp,gH^;4DLDufGI
%TUF(EdT+pGXht-FFGS"Y$3R(G9UW&75-P?$0d;EeC;unu)PB3+Mg\-D5Di,XV)6f/5TR\$<R\8#L0>]U)ZHG!MJBa+YmhAGW>e`I
%!W//o<<ZM3bfQlERh:r%0Q%`9,Li.+]*/dHFj2%0K+B!>'Nbj1oT>.mm/18*[g^;(+KWj2:=ibG"!NPugOrB[f+.KXp:#U/1^*k2
%#NU=KoIXmtOn1W:=J9GD!nb-O;1ZuT#'8aeT+M;VQck[;U-*2/*\n_ohMe;MNMNFi;`+a\nPfQN3dN+Y+Y;:h+Z=$Q"f^Dm`3^8M
%R92g!N94g3m2.l7,Sq-r.3ur2;uI!JhZVn^N8&j.kFhc=0`j\WRo+$AZ4Pu`$UteonYuaDc+IeBZ5+]>/au`%V83IZ(#'jJ&%mlK
%!<bdk'o`J(QPQt5fETMao\sUkK7*_r^)E#MK5grcQX[[/D8E]IQ26?^J4>E*&ks)EFVcGl;"Qg5:E?m(b91rl!\&,s@-#.Y-n6>B
%bjh]EK(;iK@Gm_:@&O[1W@Dro.V$Z?<e(9VAYY#?!XKpdd5>56H:o[Y(782/,e1uH%e'LI%34"dNRj$/+*YXD^En']=96/:?GW8\
%/QZ[K$Y1Lc,/ht^P9=6q*J,->DDOZ_3p50qJW(cLO>\jsHGBYc.\[NM$HFK&g43I\QtU96UB4$q+ljm[RD>)/'TIVmdL.4KC$qp/
%LkH=4+bJJ4`en?ClkZ]=[Z!9a$<"e2$5]dQ^l8mZOqp?>Jd;DGNAka+7HJ*rBKGWBmF4$&[_JtR`UOU3j/mYCYYgd<B/!?Tg1h&G
%/B\NSKJV(hLi-sd1Bi.JhR>!/Ug_3>&r%An@mgAf*J0Z=U(YC@Cn2^f?mX,S!=I0rOTR>b)7:S8Y!k#LGD,0V/0lokKcTC\;6b9P
%+eXP-.ZgeKYJPBq'c-(FDW[<S,T%KN):;?5^#fJR>`8=Z@OkJF$HEk%0Gt`n6p6R%3#6G':>c1=aF`1WggXru<lp!BX:U1!M"(q/
%TSXoN_8$a35V1+o$>7T52$Os[qQgH)<K/-$L/'IF<6/L#+OjD6M`Y+@Qqd:H+<Vg0BTe5T#_[ES&KGhDPTGQ6_LDc_B`hWQW9KV3
%@fOEQ#\&s<L2@3S!!-G1QQ:4tj?3QF1hrm)!oS#k!+sgCL#U&#c,%JmJ]rs#qS$WJE*4*6c`fdW0H$c8k]cG#;57PU+tUcF$jp8O
%_/c%_J&9lo\;0=I,G3O(aH@d!#gq!.6&9.=#!l5/B'b&e@<,kdK<-%:hZT'/9<2/5,9M$$bn-.61dEmU"(cS\/_:W6"ac"9_c@b.
%=7UR^rO3VQThuOF2,38]FS$$@RAL8^Rj^)n@DO]RJi6T]d3;SIq':'`E:FJO(^*^3'CXSlWt=P>s&2FHb;C=_qu`3h$jA@NM`5>u
%;^ba9%VQ(7BF6>d@U*A>.r]pD31AmW\:&[URUgV2729Gj]`G("C'\@U$%&Y=MBF0uWX."+Ru1`4<E=XQDDI>*<@D.rY[ms6Z/S/!
%7.?%"k1E#FCC7)@_PMg6b92Uqnq7P^)iG";+shP!?rO%mij]+fd=J'A/h1*38mP.IA3X"t(^MIM([>\6_%9T*]L1*S3dLgY:!eX,
%4MG8d9Jt?Yg!qi0SWRK7_PSp=\ss?h[;B\Ve=bu;3cQ^kM=Dt3>I?%hXQI$/FX\n3\m#.H@d>p><"5T89Op2E7=HTe)=3]_GWV]m
%_6a9l35i]CVo)(+_pGos^^s[WoWFr#R)]W"K`m"Aj^h9\%K7iu.0C]qf*UFrVCqa+PS$3SY-YX;X>l>qRa=fqag<=AQ"OWXZ_>g=
%?uru,p_-R-#dZB_A#X"B)'D3&*f)=X=b&d275&$LRrQT!^e5G&Q6lfeTLT.EM<Ds\O&D^=@(1(4_)Xsc_\il%'%t'QpZ\Vo#UCp4
%lO3f6k7EKX"RarP+-GosVDFqu)9]'/)&C['4AW?#+QnKR1TaXhE3WW&1p^.n#ln_K,mfG%"!FJW!8oX#B.55b`,74);db8Y#el[1
%_=ctk!77H#JZ4d8YV.:VBMU7KF;k<YZ#<R^4AJ1O8][Q,cphSY`R,@>ih&f[ao%9c>DO.*b-'^&$RK7uoHu>7F3qT5q&7dP?QO`j
%fQaZc=]dO%bl66/*TE35:<3Di;Cm"9!6#`<3Z*B7AJO#XLH-Bf/o=^lM=IU%;cQ(c<CF[A;df)7!Q2j1D/qDY`jiZ2ZoVrJ"!'F^
%j&@_4QATAg',3*3d].^TWW)-Aolhj?+TcC1)a%?LA=lK5GXDpK6kl1#"CPH/'G#"_+eoFrb'$bK#b)1=JD;\JQ;6l`?0,CcW7e8^
%Rd`12<Xfr*Bpa-C,OqpPlDds:V9r,..\0_%gb;io0N$cLfk?]aU8(eK]-B6C+ds:GSb*JHmi;`P!2A_Ffg(@Ip(edJ.fBST\r6_1
%%i/k%PN"./P:@]>G=K6%F=Vr.=\E;rHls>."MK4O80FRR2'!qfjFt/f#)3D<nFQ_*]mrsR8R\'?8qc1o<8I\NBo3pAD&i2$*6L$P
%.F-tHh80gNoU;^'`ZPb['>p"3$j0?.5[EJh[OD]X1tNIN-fQ3J#4d?O:;K`dDC3?,.Yo(Hb/K1S-1t[aa:igLJ3FMf=2c_G:-d!F
%q4NZ%'S&0/W<qGjH.U$rV&hUKYWRhoL8(s]Vc")hU:b003C[;+Va0Hn$Y%h'!b"s!":U=9#V-P&]gN]48V">RduD+lDJe>e"<ZHO
%p2nAa%Ukf$Yh^-)ge1:?`5rMaYRo?^/3FGa)#uuiHu(8&O9o@".Z:S@$p`5B^_CEt#gd;O#d`jt`f3[*#GA[@!;&#qVMi65&Vcm"
%"D36Ql3'IAKOp=%.KHthPN4O*%24A'!C3fF!Z3jUGlSL;gl93*QN2)X1#mm\'0%EUY*e+)Xn0OLKP1V'ndugnU?&%Wqrme33%kG\
%"19)aD!cBo5_O5VGS,IT4Q+=X`GrYIC;<T4-EKY"!)=H"Q6sI-KRk%!:"30*%/<(I9[Al?gS$>N8VYNJMTKoJM%D0I"C!o*4Vd@W
%!LkoO^]EO*<!VIbX5JFLTi$0q0bdG'PpG_4"Xcu2j/Cq1T*DmSFB"43*<`'gTooa?d8N?/)M)Sm&07X*=`>+qcp0dE%U@p_%mqKl
%Xspj?@Jjo,_ZP$M$6gShR<5YLBH]VmT$IXF#TRn!ca)(B<Ir<6l=!XZ#uh8OIOPq')+5]CgAq:Nb'^2CW6B3+*V5fFA/GqE,;=5@
%W_i*#r44Hibr'Upa\X0KlcbgU/YYjgAT1?HQr9([i,DujiG]I*8;;\IA.DZu#lkdY1ss!I!4lFZ)+H<eJHZE.*lXKZ@&+qC7+0.O
%PXJ!.;!n`Z"PL(3$"q/X3h"Q_W7@"f9qgH$d/+;U!#$4)'%9ePK8I$8LaDODi452U,K2EATLq,p-+3hM!o.?"7;se84LGC[.jin1
%PZ.oJJYL(NGXRVGD3,.t3c%D*R%RS&8lVdm"8i7@#-_\D>o6[&B(6k!BS&.-5pk;dU8<Jl_.KVMd8UH=$McJ+HS/t]!`;Dt5fdp`
%,KE&.+1(GZ"rYWKiZ-m&OUf/P/KiT^cp9H)!c]^9$JWqTa!I\KU/E^#WT-lD4SV7mp2@Ar9&<V]PGVdSs'">*7/FB%hrc04IbR5/
%<)H1$&UTHtN*]92@7:2jm2(o6&L-4,&OBP%DUN@CrST@>Ed)EQ#%=22*A=Bk?0'Eg]nrR*bho''+kf8JK8BVNf$P83)LV=4\Jb/L
%I0hHWEKQ_b@V]Ku`0J=#0Qu(;>\@'U/>8)_$3;p1Pp!NTdBuQV9p^F6$G:99+e=;k9I6G;:::H@N((bl3%O2,@W<=pX#-@`W7[aG
%&YreAMsR<pWK3YR[lhs9_(lJc?SZo9`rQFh&kRU3Y/<B'iX%V?#Q0VKD3OjV+6f!m&,m]oiRs_f"@3b'Te'%N[C,GfbYg(5KZIgB
%(a(lMdE"BPn&!#,(Io8a"(M@"5F;`G%1S'OGqY<e,gp/(%6B&T>Hf,E_I3VH,!En%+JL>=aYk+SRJqo#XL963[qtrMcdQf5Q1<UO
%015i]+k-KF]>CVDJd+YRW/IQX#bhD%`XCoS&7eUtOV"GuRqUJ!a0-q6&dLlC4Enubm"pJ;]U50YOoYM!%+;ZrDA\r@Q8i^qq:F&)
%)ONn==G=8b``*"^An*8%.1D:\p8hMO8V3s6F'27[XBm&#Y&UEe3`D&M#]if(aM`-5&j,a4n^LW:P:GS5g,l1+V-$&@>=s]cZhKHE
%&>["T)FFp`L;h"c*L1KM@b=X;A(p,t.(!_Ma(<5f?q*W)"Gj1kCm/s0WcXBX5]^P*`!KQ@K,PAnI[+1Lbbc68-iN+\MPH9]<3`*K
%PU::pTF?U57Hph(SCr\MOju6$aBLT_iHh_.@k20T,^'Z0.h-Tq`GmGZa?\HWheEW5'X<?IM'/#;1+`2cPlG9Le#$:b(!W7a;Q^ga
%:5=H[XKT)Rp?H$[KRPb!3a5UJ'F^C0N"@"/(Kckqf%7b)\4b9n,Eg`hl%GZaeB!D+So58+M$^0a2a5ZIJr9d"Z2Lk8_gb8@hf=dr
%E>1Ud"8K@Yq_uL)BE1K(LHca_Ti*(r9a)[G1+^D+Njs_lFR5/=[S%C%O8;^//^#>o@i>DX)B>-,I]'O^<FC`L"eY-+#i&qpR;>hV
%OB#Oip9j-%M1qSWIlnhc;`L/k-<ic=9r+^;f5$3fGlm7t_Hhj84=]?7Gek/dKAp3;6eF!GR&p[nJV@7VOPDocP=mVYQ6"Ff0%HOQ
%ZE$`c,m8?B7[%Fu:(6I%eG0b,)@h3FDSg4+NM.-Mn3\V#8lS<2J.W?#BU\,k&KKt>nAuB0/[#Kc"s#E$.ASY;(G;\*bUnp^75T!]
%'8iKaOWgI^$uCP`#U?+EbQ<#QKGXlSTin*5'a>h;$"i_,6A^%M=SkB\(X!dYDP9dtq*RM?4Y>nb)m6(.>4;qom`eWt1o#s+3hZQ"
%PAqfWQ1r6/eUu9(-^l2V.)^=a,)Csa1tY8#8g$PV);9=%SYH?"95^%gfSI)cd#-Z5WZ`]TEBo>:*XA*A;!KB[3+,8"XP3gJW[N$X
%W.sEn#iakf"=\SIM&'/-_2F5Lq6%rK=K8>V'F_)g\\N3@+VF"$]f3ph$A*)b:iBq[6gR0;6p?3_PnYBB)MA6H"ffb&,:\`$gCH][
%N+'#d;7PCT,[,l6815cD=:\m9Clg5Iq6UAMQJr7rV2DiFK^--YE*!t%7O4H]6$1R5"\<SWWG_FB0^i^q3?m]N9,0^W6=!9`PEnNO
%bXEKr#d[&)E\VHsl:dO[f!$V;5q4Bc!#[EBDL>-4'JP&2/2G@($;AsJMun\TbTNk,5qF3LA:>Y]1O=#jK@F,')jXCnUo4W*&aeKW
%))7D0&kHFEK\9%i+:=\6&d1=#hQA(5C'cNt5;n)LMGPQh9K`#;OR9@>KVZM\!IW$EaALS,8<nEf3Z)JGBp:5mJ0):pV1DWB#Vp6g
%30VOXEJ](iLA3Q():2gnQRe`+NWp%f#3^"@6&pt;*F#dT-b%3,Y-bDQbRr-bAsnSq/iSh7.ur+D+`=Mq@I,/=f;6!FoPdS+,o3f=
%RNRDK)\$d6+IXP1'+H#g1)R%OTeB'=E#h4!K^:IWdHaW=RKoO6I]R"9f[;@niETcL88oT3Im^3dM%L^YocTAqKj4\t+OS&h$3?6b
%7O74.Rnjd,\<Z'!,qW)UeU_5RZ#hN$&W(UfU,*$i.i")<Z!;q;3sS]9,(1s=*<;LP%RV@b4G($(W0SD7i^8P?EVsHYWP'T+U+8QX
%V:ub/7h=EnT/FQ$&l%=g_L*P,eKR8BMG?j]#;1lBJQ007=V5Ju0dHRa-D-VLaAt9t^dmN,(;Omq\u#f$k@0RL#Z-(ff_CnW*2Q;k
%=92A[<Int?B@/;4L`gM9'k2%fRM1\!$@sf%#i0K0n=HH`,QHE8=A<tHKSI8nZm0hIL,auH"F:TAAK7f*-]kIb]Fb;h6m<0X@dr7D
%OA>/09+M=dpb^2I6b+b/E/<?mJdgD<HUuRP]%cBX><JI1q%+"Y!G`Z%35T#=:l7YO_@,-'K-5\`!E)0pUhtdMMOXl6&4#cH77;/N
%#@_Wjd\S>"&4D:^,!&RY?1_,sZKN&HQ0<rO&pstK@i._E$DJ2i^Kb!5Io*g=U5r+:n9dYZ8;eubQ_7-TM/WfY:8L&5`G5sIf:k#h
%!hg#FaK^H":K=%:'l8Fq/4g($W&CTC?M(%6J*Q9]7;tg)#."Y<gr72mBcKViF[EJ0d3f5.r;1l1M5`+-*+bM]'UZ"%`M')bVS((9
%GG6j`4Zcb)LH?0?<J)A[rP<BWL;u@YFXW3boG=59-NWOAEmhhALQ?78=]':)o+SeFWrCCU69O(4\'MJ0a_("l2X/o.']oAYTa6P-
%M#NdbV=F\0oYG%H)!%F5'1%49@R3fr5WDYP@fjQYBP\9VnDT1]%o=dHe\an&8@\d0fU-HM5YNGhWV55BBf-;,#UK=I)ipn>_-sLg
%lZG&-i3?gOe?d\fLP30&+G"j.B8"#e+[\H1J]Ge"3L?CH9o2TDFU:JJn>\'*3ZZS)^kkgVF\tK!A!2T#l1DUq+NqR])[7K)Q0r$n
%@c.8%A`YeL0k5Q_NuDcsqBFFnnT<Od`h:a9!`@HY@!O7diC\O;Z]5:p3X(_?T)^!_:.E.<;:jdc%%WDqW!Z65/)_cK#S99R;TcS1
%261a:#5Uamk%uee`C^?h&?0,+l=m8:^_8m5RB"'%L-?7C27]!p[==pS7>8=+;dpsR:LFp4#P1)(\td,#]F9Eg"@AJN%T'gB9rFml
%W1lma(][;NQ*t[m6aredD,()+qDUN5AH:lV!?_c3&7F2Hb7aJd#d\Y7&@R3\[M:g4(4]M$Rt-@4.Rf?49R7+9!d$%Rj3e<?TudWB
%Mf]+2^R%'a;8]LT0`^5]<no%k\/U4>js%3MF;'TR.;ffL=EU*``QHp</4qc>\W;Vt_?85&jEeC\"/A&"FQD_/qucA?JQe;nG@kj+
%oYYc^b2:]>1;Pn+TRVh/]s1+X'e`jD=OgilL/gU:G3Ds;`?q-M"lpS-r?9Gtn54M3p"/]M&/U7lCbQ'\Tn(*irN+-HhcL6Jd"!b&
%@m!>,YTOZVdcj&5d*slr/keS(KJg(S3UAZ8<LDRYJosd&7o]Gc(jQCkMSb0>A%,A[AqB89&'0AUG3HJ]OEkfI8`mho6h8&WYYYN[
%n>,9qLU-CU>:pM/6t$h9Z\X0<.hDfA3)ZVhLaijs$_>H1pi_pYaQ\_p/gV]^]"I;3YJX0F)8C2@);eHpZo@)86^jV*CGE$r;!!^N
%$c%XmKk>neZ+cS48mGY:!aRXG'dgMP@;H:co%alX?ndaV/FMQO?u].L-nf,YJUoOegP_5WiY,2$MMe;Q=>1#c*oRtP%r>!Uf<cO/
%d_KCGN!8QU7tp8bq,N,.$]VD?>UM49.O"j[!Cu4^OiK0!M:]hY3_9es9;79]M[g/^+8DM%;+%MmTrq#8-$oG*Rq#e1T8e9FEM#]2
%.ald[./>'IFKhcUQ-0+]M(3*BdBn1i[N]`XI>]1gOq.JlU&HQTkZ2Wd(pGN1^d1a8&_+c)K@m(I;-,>ub*Zs=%#3Eo0iHM)L.Z^A
%p``/tmd[6EOK=iS#Ne0ocef0"GDtO2_<i'Bj7P@(KY\PD<)/F*,)7-o\qU73GH#tRcLC?Y,^e*;*ot`Op@Q9(eONadWD1^!:tZLG
%NojfRL*#:`:*&i&h&p`H23>hu'/&BWR<re2VednId0*aS5S5N\kii:NrXSe4A0p_O!OP=@$&FUa5M4>Za#3AV-XELg"!;Wk#m;k0
%`hVP_aeU^gH@R*0^`nUo/=66KpjBV#JoI\k$Omf-4I$rFR0CQQR-;B,WX#2>9\I6(j-&;_64F$7&h]GiVEtI7_k.Q2-UMptMHAlK
%(l*'5L;OSW[9XY2\qk]bRZr%c&Cge)Lcol#%2k-j'K"n(R;hDi."$]&DCltKKHPge6DA+29J3HbD]WBo'sZD9a+u&b2L7?W.aM]f
%>PoI&61EAn3#=%TAtg*egom-?W#0:kR-P;rHo2(-XAI?2TXO?I9Ib%C@OdDagHT2T`&"m4$jU^gWC^/bM*d(!nUskld,lO.c4:3A
%LqFhLhNf\UJ_V\i96I6N+=a(Qa3+nU3ISJca2TYd(80)Q"+lUO,*pi6Lq.mj"\h;/AKaULWS.UC&]gitj]Cen',OKH8(TPr7_f1r
%Ar@6EO>>M:FBLWakolB7l$/0n1S6,u?L5gm5t4:Y5W)/5eJ?&&%oR?G\-d.g^rNtTXs%!ckt?]8@kFCM@r1l%?"R_M4/e&CUklP5
%1;k=Y64Jn_,9Bsc!i4e_D[>?X_?jb2]JCkJ-n[t;ab$@F;@3QS\J9[#p=l.rMD^(@$<<Sue3Ld?L=9623]m_n)tXU&`S@q;$)iK8
%JD5$f^CEGjcCQJUNRG2"&87"s.E.?Ea&3dTPZ#O:X+nMt/NcX;S7!`g\sa,.D+o^^[?sD5m<0$"HRO"5&Y(#9keeik=nHMKibA/f
%9#YW1Yjg3p3^CLD6VNd>n#GApf+?88,1*&sFo]Gc22"bQ:5@,=nTdP-).l^7UX@mh#fU76b#]MpnZ[13@G?%laWOLkMK<%S('CSF
%_5F"G*NTfR+@BR(Qnm-t2HM\Fp06X;N%<2QBf$DY\pP)?YJdXhUm3f'WaSGs`Tu!3!)^>H]6,.KOQ\MHU0K36Z-?iX/fk27Z/.j>
%57te;'Jo@@gu8kITD9j?."Hss\f6TeNFQuOTk`Y>TdGs)KdRWCfiL"lN[W:T.'Ltk/h%4gVt0)D-X.#iT-2.^)%%m;`$ps?MHWCI
%Rkt"Z=g6i9ip11>OG]fRXSLE1ABbjuZ-Z3K\i;"o@r](A/Z;(43(Qa/0S:PSBUUXS%[J]8N[Q-gm8BfZo]>'96@qtS%LaTlJNO,/
%5+U'LALN4-4E;1,a2Jbr<Uo$(UkZu4B8H=BI;YYZY_\@r9nQ5bC6Cf@.$Quc(4Zg*:ia,YTLr*i@1M>Ri2\&)HOuJWHDjGKXUl&&
%C4>ce(4f5&E\0qS0Oo53[oGjt(I4iAdOfPa#hR]4N>,MZB;)N%$7K6[`J8BeQg-5+BN5);1e![&0jJUNf*kcI>`-?P(d8XgLS2"8
%I*=$sWBQR'^A1h*mMq\32+4j/MM]+[7K?-qa?dJfdgi6)5T&_k1C1TJ"Vf2qfh8VU#bjsI&0uIWia[$9S:ue>8"e2Do;>lK\iRGo
%.Z5b+E[ZsDKu2/>)R^k/JWleLaq3=3";@_E6SP!'-2fY*k+_'o(K1`3&h;%'KI`+A`f`kiVP8s8dU7.6bL:fX(!#O1O>PLb7oEU)
%*_pe;M6Y?=(,"H6TQ4%m9D<+-%-Q>&5E^VoF4nl*;k\9`#G4*<7&GsaBg6mX$J!NHDD[!Y+7qoOU%qA58c6EFA"'NV8.u]O3]-Ug
%d/43Q!N/st5$M.SWNd-UG[VE-Uo7&QC_G(>Cm,AQ5oJ,h0ICV8<4C#M68]W(P``B7JRo@\`]TRZmj$KB0+bAsG5?>F_\ND"VD%uO
%8eh\Z#ZCJ\;hGS0$04X*Kmn\%)d4$39%W"F>%$&(0(VF9h8(C2&K,3'9`WLq.L;#d%D4WQ[$A;^N^0`g9P]MYhDMZ!VGJ;A(_)Oc
%=B]iO7VeG;V:BZUUgdc35D^^m4$nLZ-M^W-+A3L\+5Hs.bFkCU^bGBG#X^'+%WkRNKHTd3JltJ-)(O5YE$\]slTO<#,16h',`\b\
%]gS582^kYc/-$9=7aGUs@CM=mJFTjELY8@SR4%'bC_ipf\YOuF8o\:,`Q#MQJ$:aX-A`C"0Wf,,E]'CS@3*\/'R%**oKNLM,TG,:
%R<ARQV#Neo9ulj69.59N^Vt<!KCpsN$pCS"<#;]3443:B1[Jn8)?p=)Wi0UJgJH/p:Yr_LfT@^XS,*-V%OE3i2_se5164tK%^9NE
%?/ja,^]!5+k)h00(&LH9]D%`@=O,,qR;qn=2`K3Z^'rl4Gm+f%&Ae'&kX1BbhX#NQQ7q%dP.-dO6=GNZka=Ie6_)/(qUL4>o%uYt
%Ore7sG:id*6*C6tFA%$SP.Vrhpo[kuZCWT3h4]ej]`+FNq=drsiU`\/)W1MPmh3L@IrdsOgjNY*HSdM4DDYE+LE*p#.jaP.Tst/J
%4@gj>%ahN)nG>"`,KL[lbLF.BrNV7kjSq8(o4=g5jHCQaXT@14V;"G%WJ3tf)4TVnN4a[-19tZKSYc[rWMb7r?n+2Sp?D`Ec!5rn
%Tku3N0jCrBU2;G$)cYsFR[T:lS/R4%"1/W9Z7IR/-8brn>#n!a&gXX1VM3bRP9!>__kX'o>m(r&%0bbD0B5t2_(6<M(1MPmV='?9
%e>RjI&E>*_F"n(dC_)8oS#l`>O>K_#(RmpE5mV+.FoLN>jD96EqErETk/@XY$RS6jp]D$>-PQ:Hb>a?%Fip7%j<5]<+:rdrZTJKr
%Yk:)W!/C>poTUNFbFiP[emUaK3o?0@+>V&_Bq,FOcqQ.U@Muc36jN>qa"^rJ9i>T0%,JjR2TsH7+317*Qg(dDqXDf^"5eXpHL@ld
%Ds]*!o"!V#(:IUo!3nDX=4=?bLKsR1*,QW7lorb^<u2[RS@$PZ;PDj-bfT"B3&gEjhp4TiR\A$.2_CQk5R2cIRM'QUpsBY_c?Edk
%IsqAXjs8Jk(bZ3R&3j=B"_qKE)>=%Ni@V!3181V<h1ige^^PBpl=@gKPIj,M"OqH__73O)nB)?["H`L$!OM7E>(#FsIf0A-_RFu@
%%po?b[P=m(/\V0qaKVRB?ZpQk7QdnHj(I/8U]0F@Be>tsbk6kO<fCW^q+-c$3.&`^2_>N/NJLWemt6DimrL6WkNB9:#@L9NP)e7D
%74"%+S;K7bd-7*42,\pcT3)EaLa'0>\-b1FX'"k-%e3cj^K6]EJ0g"N,W@YF?jK.t'%oZQ+4XGV"GuCBr>=h.*hiX@d$3"*H.Vr.
%X]P+(PJbs3W)8d75im`r_^mqX^dRT6Q%r\@Qu.A\pJlKgBJ?gbW@mukMp!PJapD@MOGp[b@L>7)XZt,(BKYoNV?nQa%g*j$;,mI[
%&@<F]+H'N/V-1%4bht?H3j"\r3Bp;'mEM.+;K"fZ-XKXkM4g]kD!oesXmirYmdG9L9-'KDmNSa]!r'&j8<)rD!:tEJkiqjmQ0j[O
%6ic5\:!@V-3:+mtnVDS?N?Oe#B0s4R,.;>f_QH&`^lUnSO&]T1f?oe6Jh.#U<!^`q$9[0=]")/ik$RRakYoI+E8E6'buc;&1j#P?
%;_S!PG1$<0dR>Wp^6AkqP=W"K<n^?14m/6%^n](ZE6or1f2e<5ldV]G"io%[?KAbtmktAnG:j!DSb5LG[HDDcg[RB/%hbf=o*Z[L
%mE*SjF2).@3ao#1Zl19QU;$iGCj"jWi>aB6:);E4`a,WNl<HuhZNBtVK42G.k.ou;5&KDH>WGKK5Re`**KRno_FRoQf=l\3h`_YP
%8FDIU>T;RMe>o-p1mO%_LYa;q"?<D--(4usK'\c25C.;/N01;`I,lMqTh<I%/D5dd^gUssgBW#Qn=T\`_uHK+r#N\gi&l7ZJE"\i
%JU##K-#8$%;%ko*qgl8AaD4CgX:HCsK\%U%4;62IAKE>2BTcMC*LW\p--'Fr9eK6GNI.h`<GEX,9VGM[Wu8=keKdSu8k+DTb;;/V
%/f)21iJk6sSA6mFCjA=QfpAL4R$F.$TnS;6K"uOG[a&AbZDC;4C!51c2j")*eGM0`dsa3In49Pd+p:J6o.-s>]7E*o@\1L6T-@50
%5j&?MEo-^/U(qs]eQNQO'pHU-e.qZu?i])t;b%hfW!7EBAMqg,kHIuglZ/*I:l&hG0T@jd)qLo")c@0j8t:4><T)kl90BI_\j.R?
%O>pW_0n.cF%j,OE[gSo,)$`Q,0CD/8,4s(ql(_ZijHR2g`n-KH!p:"/e[#%_FL:ur-+S')P7;b=gU?fCLK0A0,:Gc'W&1p^E`jkD
%*?J\35soO*N=0Nm:L3P@G9<A;'Ok1T=-_A]0X9_Bg+F5/<O*mMMNS8i/'F9H(+WV3ilbA9WOqE,\\!2-]9mhCo5lLQlUp.tK:)Q&
%beq\LQu5Ep=5QsW+dW4b\Z;:sfFe6=I5;AS?&oBJ&bYOSO,u2*mCVf$oQo=3j;s/<e9/d(\-Tfq);R1$aLA#@<ACR]"jl)"5.Qtb
%lFb&]?6G)/d3_Au^:&a59qdOlL]F`^o$m)'*VA<#THFu_WQ2qR&kbXcg:sar%sDf6JfYGd+cC*rHF,iJUIKD6JEPHj\>g-CZdc-+
%X,s.2AW$0"1/G?Q@oJD<0Y)*ZXhY.;GJAJ-E6@5P#h5EBEo^M</n'@\FMt$YBJ?;o?5GOr;GliiVQl/+6'\p[hP"fsO?/!0SfaBs
%?78a&?"q?)E/cu.ml!U=Q-h37!X)\[7f5dpdjrVhl6aXZI"g.m@pLb?]rEB"mcZH]qe5*(5;t`+TKSfd3P=)7](fKb5E1W:lM1Bj
%-+LFRr2[;J(W_IVWJ8o^*D:gC7:WOf'XZ^1I2<A"h9Qaem'L_&O^Q[&`Lj?q-lOPo2XDUJVC_lQLbD^L[J`29"m1n<_AXiMATNm2
%#2k;9[\ON/Y9tP1,Y,.<loLP<q4GFujaUCq29o4a_r::gJ:f$dUXaSgk.ClVnjmsTVPEf,cRQuBR*h&`3KPS*H&G-`ha(L`o]^!-
%2[;sRO6Sb,K#I(8ZXonbht-QfRf+[q4+$d0c28j@2=_%QA8&Oc9<Ddl4gKAEMJ77jg>`IWaZFFek]AWV&kr;]?lIOs-CP]mjB>bc
%C7#V?&`0l`V0Y\fa\tHgAR!pO_E1Nr.CQJn/QQ)Cp-(mOC0o%[m@qP&i#$%*.6[@G;s/T,mKC&X#_n.dN8:P:]2V"rb!BrhZrRq"
%:YS0<U,pqBp$-O])Hkt*O;A8,Pi<PiYbhT!b%AQ,]'03a)8giq$&ghMB3@.9?hGQiDI%P,FcCfLR"a2GX)#\^O44eDM5WPn\>K4R
%a-<?E;=[DR(#C`ahqCafB'X>u;F^#jk4qP3/%UEn[>*E+bAR(JeA+@0o#C6tDgo1ms6EmULq/QnJtn%6&QVJr?WKkZHc[O1^U]c<
%QGV5-j/^]Pf.H?\GI9OnO$`,2n[2am&Tn'$<"/=^Os:Hb2!V6n0Z=[.HJCK3qd_Ja9#GMgO!,cO>Ndub0ck4bA`rZ`RrbD.Q2BW.
%E&tpI^Ru_REeDer\#GUmamlU19%nr[N.u__EE-XigCn"4[MXA818Xd,2>4__#.\hJ[Hr6m`sM(eT$aS6WB6^Jc,1d>r3nar?6mVp
%rg6cjNL&0q,ba=r[5#1M+Diaa]p`0<e;/rUh5Rr*#oQ+bau]c4cYA2n@;<IZnUJP#r:JN`E<tgDrh&(NbPqC.]pp>BBX1EedWg?i
%oPTmQ>'629N["[]'A[j8Dp9DiqoRgpUXYqf4N\7FFAVq6#kCcq'K1g!I0RT\nSk`OQ5jNd&92]CR9#$^ZtZd!&L8^ml6O<<4r&S<
%f9I3"PRa-(*U=c[0X'GQb+t@9@g]9*7"<8V]XDBl>NCUr%Lu..;VsC`]12bgN<k@!Gj[Ejp%?Rf+CDQ',fYXP:SpGLQho42,.&C5
%>E0!dn)Xq+Xi'nA]msm*s5^CcGj6Jkoho`If31Jk3oGX'\E$cX.=[W\@,7^ioISQ\1c[PZQBY5*_Qm6i/WiUAqfnH52l&0.[UKI%
%CbbX<RCoaVM)B@%YN)U]hDFGgkcs?4RpMOGT/I\^=3Y>jhmlkIZ4ckTT`t8>[T/LBTrSYXS+Sr$7+<>pC/TY$5rD3U?ri-D22g/2
%Up^,Y1YRU>CF8Y>Ht8;ogSV\rpM*P(GJ*ma2jeEc::YntD)b>@9!$C:=&V-\B]`W]Pp+)7Q]KlMmH\N9acNjWMMjqVf/B8_"Ck_X
%l>W6:I@l+67R)tK6mfC+6Ra^ia>$kD3*nDb9RCRMpHA/DTIQr-oO4F1efu=CFUY?45XPYq^;(s'8ron*Q=0^`An+Y9Ab:L6c#%g+
%RK.3AE%)YNl_g'WWfXk_*]Xl'A12HSN[$=E8m.=N>aKgF;+g!i3Gr.]>uRqcjgfNTO=nH?:%S(OR[rEPEh<RSbC1n5jN,l0e>-t$
%\:rJA"BYh^q^1d#6DF1FGYS4<Dt:&1'#2Q#dL"6F=.J/,H.RZQ]B*<ad^A8NCY\U(]7O:9PBWigrdEW<(]7"e2--\HijH]3GJQRq
%XJ_/Vol!jl<1h4eQQJ&u!FDl+\i#R9j\fl?^g>UHCi.f_:lh,&+HqeaTa(&k%\*Ne&6$>)-fA-<TA<mnhV`T4)]oMn9Xm=Y#'kR/
%gE*T<]+*bQ(E(@RS2177]*=Z`Zk=>A216)RV)pSK]d3<(H8@5fT1j"b98G;f8(W\-bgC8J.G?]lVVY*oam$Z<&mW-Kr;[dRdg^Nr
%0H#%92nI#-_u6/Ckj\+"([*Pe)1S%A%BbK#l[_:,P+SYO<0ZifSZ45aW)WDMF'gncjXuJT`rS93qn8PqrcFpbmpO#d'3+&igKf:.
%`fUuZ!$@YN8:oujqTt,[S7nkq(<j])X"Wko4d)\e0E:eH2(n9s,RaqZVsC=[Hcmj%D5<Q.KR)h,@@AiIVqLCjfcKUNi1mtiYiVhg
%:e:CF+S:HroO)H!n/+PW;aQp\Af"!7mcE@pVsb<8XV&@pe/A:4[L)f^=#(?LJH>U&"n?E*DXVre/D=0#NlV9Ih.`a*%S5b5..uN&
%.^bc^I=[F4d<8'o?k%e@,\X?;\5"?/LEND(-kWXQXMa5#/tFS&7X>W.._mRK(CES^q4XRoV*':5Moi[8N.Z@BKEh0XV#!O`Ilj`Z
%*mL'S8)6#0]r;bNC8dRGm+BT8V6^-QosUD'rlV!Ph]3mDa_#Hl=Q1.3I]Y,M(Wc7]W!/;+aT%J]:Q1ltjYQhK`)0LhIVe."f$>U6
%M`Q_D+3a2Lq1CeS9Y,l!@*!/AeMM8-VBiGO24#Ji24McV+oc@=+Aq-Vk9iil9S4@/mI0ogra!eoL<Vd*%0&&h;X_?aeMbCL0hU/\
%o!k-@$[$GA3A&q&)#u`meD#h4PW5<aiW*e;(sB7Q[cQUV@t4=_NVsBslaIC?krtO&R8]0WpR/Ira..bp6?5H*h$:u6`\8MjMcE&k
%I5VD#-Hj?7?oH?U'40M/flkiMc_U^(*\(ZbOf>T864Ak():GbmH%XSS:U.3hj:5-!ML&G]30`##"r?`>_fZ\kJd/(X^4fC65Z#th
%J$FV"ONU2-pA7kO=&&3!Pi@3"MpbXRkR^"4P$N#kn([AVd5O:/<.)kg4+a_&Z/R!A9,1u32e*Y"6c>Ch!!K>r*H=fEVYY(V'=]QE
%\*;JQi/[q-U=6a6X4^?HaurtcZ(\aSAp3kgppO_2O=/aCUk;&?V&3D[AdqD9:iS]m^pV28:U)7teKaWGiURY?c0ttBG>\;P<=,m0
%Rcf98[4S+R2-Q(6[UGc]n&'R?'r%9<KeS\)b*^lu;3J0t*6j%H>-r1>Qdu3-?cTVP]Q=Ci-'YXpNTqt:)/`.&Os0lX4g:JPXAEnn
%-#5prEq/j6K%JY,"3p<9Yst_;E1tQXPq_%6^F`pKaH*_KGbO1,NL6b)@&T$*eDT2bNTu[M_,)1.^:>3fnAF`1,(/2Tk/\".['_2&
%^R'+QNeHEYY,jgHX_p*2n0M>Q[)IrH,<tk?8,"nS1q?#PiLI[*(3uj_+_!5'^5-k:>d\W_WD9q-K\MmkB)&RF6m0`hQbWZ?TVVR!
%[*<=ir_RFZ7Qg(rr'!O1fCie=&rXq;8#5O**q>6#Phl?sY.AY2r&"$N5%AR^W'2A&a`;)]LkZ%@Q"D.)F`M]A-+q2'FuB3.4.Yg-
%eqRS0c6N+A4I2/aB$G0A2;2[0P_]MWUP.)hYA[V?D-)+0?dlNIVG#C;?Yi6HfhTS6($/;tOL$$44h%7K49^#8"ZBD+nUgu%L]n;)
%5;"ro)!["38cN/`mb&`<G*qRn0KO>Q"h-G@d@Bc]S)-J0m'J#N;1dN"WD&2:,=-2j6[!R8bO_sK`N(=cqRkD5\lYd_TbfSM'UG:;
%VI=kFib=(9);_biP+6O;d)m9M/Fh!t]-JkHVLloE7XHc^-@YB<+#'Zm=`LgJ83ab%G-5NB0M2MKDI&&5Y!nnDVVVRikVU2(R1A_7
%[P<eASFrcI/ZD,>lX9$GR4+^>Opk^&88LtUl30"O;AqV]#,5jgd*%0d8a_cYWj9V8:m:ZjgW\%i$&KQP>r=f2E-Ng6Q#-h.",ob(
%@M]S"n<;nh2Xd+(_`K:NNP_/[&juQ`23+=EH$#0^)>d>K4To#-?%hsCmQIAAGJ<guEN-%rH3g.<V0`_!b?WhK-j?a.Rk?b8VD4[R
%Ld]uu&9J^#'g)9*M\$WUaS)Zm+D`-<\qo81l/"JiRde3VWPiPmC#PG^W^JpR>'cMI/\sW[L$ocPo<,T:+c88opTZ=19lcMd`$A*/
%R)$5Y.1;6CCD_ij)8c,:J!FHi[PPRRRdc.*n*jK89fW!*qMkX^,3UhhQ!dY*H+B7<YkTc<ds,pO51m#MOP5mL,qNmmodOC/)^fcR
%4A$*c>)$?a-u$q1le2/=<E6M0P@?!.amuknriWK]3k!,(nd2e0>rPd>0620dL6o;cYL^k)!,imF6;0/Mra=-W3.TBL#gW4D])jOS
%d3?snWe$hCaMNDrC[Ael,'f/nos7E*adWeGAeN4H0+pciD*'"%D/,e\lsrE"Dp&,.s*EJdUS?5=?fc-D)N'IP2E5!kY1TRei2'bZ
%Z?0FM;VTL5V6duT?F?7G;O2Aa,n`@YOm%:eQ]U66&J]r4.IZ!*"N_]4rV[[-;fQ+H&TjF_8[$b'#`e9D%Y't'm0ZmX1P%q&lCe)7
%>XCL[akoCopojZN'cgni(Z@g[%X.GfS7B`b#6]SUW`fOn^u)b?RNauFquCpH'.e0F=$-"td/;cqiuY3ji)_3(Eu.QKJni<ZM*+CT
%@>NUY8WkAMNk=Vgj;^-Uai'7%5N`"\O!%A-ik-"_M58q&`C/a)];rP9>^tKW/)u(M^G;-bW]@g(0u!E+Z5!&7!do9@h(>\CDPKkU
%rqkIY3H=-Gn"#9Uf-S^B6lX!uIf@Ji0:t7@lB].?MpsbWkDO\5oNVh.1u3YNO)/.1XI4uR"NC$"31KO$GtNJm0Vk<m-L<67VJ8&F
%8<_=!Q]V<A.O0q0H>"GS7okEaJE.N+PDi22N5Q2t"'OgmOY*h89c.YT,UMn3O@S@D;HuWtE[ppGqc'?H'I6=k%?L"<X42AtWK7i,
%l;t2dZb:.bFr_"[,V^Q701ngjaRd$^lc2YsI'LW,hGb]]0)0F>4`ZU\&`)G\Z1F4aIlV]Wb0!]p+\SV;q?U[RN$@"']+V\adE:o>
%j.eP"m0GkfOG6!jl=FOdIPWH]<d+ZsH"kr61-cA>EuN\I*-dK265]Ki&M[3(Q\V(&!,Q'SF]J:_+=n'L6!Cfc!D9YFSCpIT9l6q9
%L=R__:T4KtnT5@56t$1j%W7I]&=9d;2m/=OA=`-iS6:nj+%'do.6bDQ&:.`Up-<+goF%*!8*b$h4>l/k"n[7&LY#?+@=4MC730A5
%EMs3(B+7iSg0I/lkp&^.FMW0LZQr2=J'sbs`[R#p4mZUHT'h#3MO5Nu4COBt\_H[H%U^l`hi*\J>&E)S/G@[=;pW3]r"f!5_mWqH
%o,D1ePmHiumDIg?g'qJ;HgU'aH.@"ro@Z#WJZfgh+a5_I0DMd-?LVP8G>O3WKb[7&c(bNeonKs-/m#Nf:"lT$7\'LZ!VH;ZjjC1@
%j.fgs2LcDq<Tf#/GMbH#?G63Lc2J7[r*N6-i:!6D'Y1=`)(&>p3lG1l*qV4:QKp]g\ChQC4EbKRCqj+<D(>D]YgHjl.<B\h:@%;A
%.8XeJG6^26Y'pL6_nuDFY97Qs5KgPfoY-;GAb:.mrll(ZnO_uQ0ZO!=IUe;>65$f3qj5'9[+e9a^%_0R]ZMXkPD9a(NN3A_g2fBc
%e0j)I[Ri]uYu0m\Mu\$R\HQ"+YX]LqlP4@,?*8WF81_G/c?qK84TB$(3qd!oFmR?i?cD!+UjW(1>9D.kA)FcL?NS2rs,Kpa#dJt-
%L0Tr8BY!#Zn>fj;Y_Ah;6&Kgj"k.Ru,g/gkbk(sr0U+5Oo3tc@]GQIlODVS71F6RD%p,YBTrkJ^<s>6$:3#YL1crb5JRbI&F^nl5
%6<c=aU5T*(3.e:hCY[Lhg4_XWO<k:?CRmlYcd@"(BOEH8#Is*)?_0juU-<(J&<FWddd;j$7Gb'2F:^paO0D"bn'T-N?1DPI\F1e%
%4kI0W6g_E&ncr6.hjd.kSsDELKNaQs?iLl>,8PKq(CfYt@\q;[,c@"["W\SFE/oaek@mq(!"EXD*QhC"5Ie.kN62@`Q)O4#emqf%
%2TL-^dqUepBNJ^qQ]Q8_hTLg4C;-sT4d\XAgNiN2A%*Si#&A*L@7b8$?T_5DN'eNH$JUh<O"F*h32d)c#8ds^:<ik_@2hYX9MD@d
%[r)&m'u)m5IK9'TlslQt0C@,Am@bPHZ]V@20,]r,TM$j\D_!sfr?1O8/hb8j?sW/!JA,F4_1*sTGD8uaU4Fn9=5>W`.'N,E-)*4?
%P[-$a&+\QA]5j".ajse(WiRj@Qf5bRCPGslR;ZoW2-[Z+<Ak9QED_lB?,+oI]M^iNn1>R6q3($s158&FWXLoVf$N-6l@XdkOWt:(
%<`m0Q%*-o"L'F12WsB0-gNj?tKV329]lWU,2o?q[qQN-D:%'u.85m4[h,YtQ[*M+ro[/[0GuK#R@Nr8:#8U*a2pabbUajad@\JNV
%X"@sAH.QLHCgnIK+Zl`t:ASL[1P4f)E;/!c&AI4?F^V\ELIaH7FVNl/1<.23;u9/Mcm?l`Q_L^V-]70d#g&$Xbs\e>3jrcP0aXEW
%acDjC8-:&*-"au-SKjYdlurT1,Z9rpCA)]k;I\;&hN.,tKN&ZVZXqPY;p93p3?d8E#?"`1'k%;U=[_)lq_WE&KX!As3)q8tcZl,T
%SkMM$p+sf9JBCH8&K-%m6Z8>+[?TAQJFIpr7/5o`?Np8Y0b65&qnDp_\pX!j&E8*H+8@d9lb-MG?N:&3m!O[,$smcWaWs=NA>gcj
%?UU\,b,o%UoNU@%'#jY/UZ&lT74S.^@9gF[7V,=am\`dk8c:*_8qF]`)=#oOILl50"m+d3`/OJRoPg,YMY9`;5a'cud<J+"i+K-]
%gEk#Fkll&r<@(h"!GqZfSkqOWMJ.nC"_pUAB?FcajP!et'9u<+i*.+f_1(p>GPYg@Mt7ALO7?J&-_lO5=,N/g01oQSDXCPG@44Eg
%6<M[kA!orgHeh&rDN9hC4h\M)elG?iKR8<Zr;+s9q-VaTh`fBfb$(SbX)Y#`d)+9B&\4sHkB*Yj^NjK`B3&$-c&%p])b%/B_uRWO
%1P/0QiKWEE-T'Q`eQjIl^3KP?h*N?&[^[IlHIU=7D%Jo/lBNZNdOamkdg]rZ)c/^h#:26O2[@N9L+N,d3(tGmC's'r:.AKQ8o'.I
%:qPS[>2o]('EkGB86\Mubs(i]RmScndqhnt<_7AfE%.Ik8BnlsW.0?N4X^5KHoPa4*u\"S]iq"k%^V=QEe%^/\lD9IPQS9*0Em-S
%,/PO3?Ik'L"?O5=L]Ym)"$k_H?i?N[R^]8^FaTO*nb5u[#V<2B'O_6fFmh^gXs%**8<?5Aj@-(r_@1.-6I0ghGTPRZ7#3ED-Zm=J
%ZmJ)?^4em6?S[LcZAL8=Gg5Xuo&D7MCC@X60_rUDcQK3N>ZM,mBA1)%'6?4G0+0KA;cbfBVp=,n`>'Z;=2+IQ%ptF5nMkR)=jge+
%WX+0hg,bKh]W>QV/_>]i:H*4`_?Tn3KlL,&O@'@)_[7m5@M(]C=f3fW/@!5&s*Z0ag<g?i(9R*["ckk%>)"CG\X>;)?er#ER"517
%X<OLNWX^Co`I;08>hF+pY9?8JEM8P/R#\%BeM/X+pW;Hke6:j)c3;+("2WkgqkGZ;KRe>22:b^,Ie5Wu>_3#-dXnA%[QLVOYkOV%
%PMrJrV(PCnRMIC9pY1PA]^BC'iTq5t(62#S#F7k,X,bU$n;$=1Mg!P*h1\:"B*tX("Y2hN89&EIM[p1o#](NE9Qb>)q1E^@b&Kr*
%o!<PDo3;lJTt$o(PTEa`J^`2P[I0);XNiHr;XJNa_NB!"8?G'5ePhrdGdgP?h=j^hhDF,Q+B*RAXI+aj0:F&oJaT6,"sp1AQ0[/U
%BfsORYUlDMV:^nIaq[K^[@0ZTr-:eg;jZ$?5&G2]f[C*EMAK2o0jViT_))\+eZ)W.eWKF:/X3B%JM(1fUeE)SW5jStS2daALEAg;
%Zr[Co6U'7>_0]m<$kJ`s?p*='e[ma<n>OSl?B$DcW#Dg#O>R0KPF3=l$OigBN=J/N^V+;[$^tLXWR:%Qf"G9o:I1M8X_5,E67hHX
%<ou'$<mk$<#Q(]s<K-_0VHsp[itn^F5KB3@MG68'T_e[b]ipfK<PWBZ);DMlNZr!!>B4o.Wue`!W0[6O@t",/'(;'-F3iuOSjaKs
%=#q:3OU@u-E!Qa.4:EaS=)2k5Em9/8_Fe]4TSo!-$)2!dZ,1K'BbD)@@Y(f9.L"kO`cW9+C1]jON9bEkCCkbuqe,LMi<6,r7/(;O
%NKTHa(RZQb;MDmF<`Ku/&Xh3.p\&bXqpCj+VJsO3HS,,SblX\J?2@Rj*da!*k=\@4/qlU*s+m$pf&VNA"C0IWkpT?Prhao=/<&Yn
%NI_^f&P2#[Suk:tXtHR-X\/*%JFA).3TW3[8B.&jT6:?QS,E!0FP.G6<(4NLeF)?5T)?Z@hg3SN@B2eTQ-lqdYB[0)O(6J"pjmr]
%d8gH=kZ((a=@\VlEF;')LKtjL&o2S/,A3.\fhg')AS3fPmlC*TdXh.Heu\3b7rqO7O*_V)NI+UYB@TH;;c=nV\WBHc>5Cea2ZD_8
%.,GUY/Pd1bpSKm_G0AAKG"NoX/^.^ETAjkQG^FNWblq]\@(_!YGk4fXea(*"?Hh3fcD!k3<DP[G(ASb?\au)Qq-gXLS-@4KQO?t*
%jEe6,#VFi97V"+3OsL5`PIgoWo9*Qg>/;)8(&krnGou?,6S23I9rZX3l&3H,V-Fg_gaaul1&-HaYtZ__Q0#p(]d__'9<PYkj5sAP
%-FN2A.3Z'Gs5!+ATr^,gMg"8/<fe;U*>TZMBVE?sWFh0oNGXKN.ZIN*&!46MM>J,uRVQ4'RWht19)-l?U3^VLYB8.3]C\M,/S2&;
%]6?-:*,EcfPmHC7rX;+*[E:<0M%Sk!FG`tIh(dp4&djEFr,MamO"'n]Z(el-k]7hgVZUFN04'CaeegZoV^\<8N_ALsJ?LF\mWBI=
%eqD;g(?M-uKIL+54^6/(M^Md_H1th!AVW5hoQCK0HO3<?kj82-)IIJeNQ4S:#QP4jZeFWjS7T[\,6=X(*k*PU/'7]iqO;YXf0Omu
%%*Z9_rXf2E08%@5R5hE>-RshS:t/'_T;4FAS;"7bCih\93_e%n,(MG=1OE50^,n]'[o:qP$42VJ_c8d(33M1tJ=boE9Y)j2[h8d5
%4O"N*j>JuK`3%$,.!dHMJ<JMo?eC^^O5sFY5i?Xm`K9B:Nt?>jZ"FPZ;:Fe\DP%lF=NFu$Hs?r2R<1:CR(=Sun+UjA)Z.B=%M)60
%3sI>kCPCIDQ<*!\&Xl;^ADeFJdq_KX2(hR&nH2>UC:&h*h6F&klq0sM"SJ#uD=Y@7&LuLV<?H5L$q`bAgEN\=UqIE;ZpoNeRXBMM
%]T%Ht:jTfj=K(IbH=M7[Ud"e!oIfpYN[BKI60X_(%f>^*OVL1(;m'haH/u-Rit,o!Wai0N,%Pbj5BS*OJ`.<H*cUAI`8c<+otlrT
%9DB%\W87aqJ%g\Qn(3$M'E?)Mn6b!THL^\/r3DBs[@@?tDAD,#oj0>i^Rn_<aa&^`U;=P4'AL9:"DH@$8#)0A0Ai:pKbBSLMl>)T
%#6jPSC*!3L7He_/GcQ_L*4t^u:`BtUYWsfbC?m*,U_Q>Qg8MU'J4]oVls4>g8Bu?YVO^mnjth-+[Wf7D%HFds.9[7u^E[#bHR=pX
%<:;E>Gk7X@,JN(#-W^u%Fq^"eHc(&Aot<5rmBhp=7ha*fjR+oY(/`G(\)Njq1$';iR*%rqj'i$]p(OWL+e(Q-O,G<?=hP=SLhjru
%s(5Z?^"p==(g=#mD.M9`/+keW["S3BE#Ta"XLhBgHYb[JDpKTHL0+3MDKsBU_7^j1P^Vofk@8b\cjG&WO/51@INKYR5V(l/HsdBd
%cIDrq>CO#nmCU+JP?6qD(4,L*5&:`n`ga*1R]ScRaNR7[Ts+gJ6VpLWJ=MsJ@?l:gSQ?i&$!8pX8"CJ=?g!&FQ,q!k%?BX`-o0"d
%1[)!K9.?tEMkSqjp+RJ1/kGCkSnrf>3GKUWY6]V5I'8H)b[sgZ?X_(^C_+W[8;!<`QN=C/l*"rV/!(.$QqQKW;4ND:0#Hc:DRcVi
%+1;DujP=EfBn#Is8H&>5Ma$^Z+r>Z<Q&`]JY1r`uA)@`_5I6f,GCf1mi*?JSkD$0;>5FP6^3*_m`o+a(7Xc.'T$OI%?`%,sGn(Of
%8a((=WAJQeh:e*KTVAi!05q3n<8j6=f3KHcXmDYmA+Rn8C]?<Cl:8;5oB^`#k1Loge#2>-\E+Y+kNjIUFj9f)M5>XpFJ03%:[5PQ
%'M.9m:RP:$FJVnW<P7Mj6EM[s8t1uMZ/kjV&gI=$+7Ko0Hn+G[h*T-(),$a7[Oj<]NRdX`U!(&)<i_bB9%kI=>eAUfZqF`a#Yn`4
%LH]fmB4r'33ZuR]KZ31LTPW2FK%L:4JBB=<Q!aYQM!=s!gLj]@U/0-deq/q8$pg\AUs?/NrLMj=JJj>ie_fTnIg"&l<bglGP_5jp
%l@#b?UgSO6?sEZtZ#NO/c*:U=Gf4TeO2Efr(96>dXDm!s'Z[chTCW],Qe2]KM1\m`"H&tdVN0F&E4)W8XKGp^^8j3[bsb-0H2lcu
%>?##1>\O+HBIpph=g)8I(e$D-ntFT%/V&(AQNrFkGCXB-_9r04&3m,V3"E7dZLRSG=\]<Z<gP26,Sc-m:OfLos5E,=NmS?Nf6g1a
%heAUNFtfoAM,(4Fb5pn3<]NYQB$-9P&+T49f_qc,WO"U.crjh-Vng'tc$9FR9U,V//u@-NU3iSjRi_Br9I;jlq&RXaQdD..Kl6,\
%qU.jTc!I0?(^@tq3k:Cg)k0Kt)nTAp\Jt.RJC6L).I==]!g@jke0d"[iN"B=&8VnYjheQb!?9/M$HBWgGR$c\ZiQ9M5!lJf5bY)9
%=Z/oZPn[K*^h[.NU_MPEB<4c9(#;_b6DXT2?1bb-],s#l^1fKhf\?NOZc?St&I?%N1m)9_18X3O/`(P,oShAg&[c[k+5VA3RgVr$
%;FcSAD>(@D]@&)$rk,8@fBN<M7^j)r@$RQ$jh[bX/=GY:R=W)\(uM^;m2+Xu\u*pf8m.2!=4K>_/Ndi5eA[kAoJAj,3Qh"]6l]_7
%/r`,\$<'O.DD@UF\Of$@9k\8,PmPfLfaM"8A[ecs*Lk*Mf+rG%`VYO3n<4*(Z#1T\JRA-(<_%nG=jsCAX/iP3dE\,FGqMNkjLR8*
%Rp+=n/X#=b6J@/F7F"i/()!#\/r#oe3b_`!M#rRe3#bO[Ru:'!)45HtX@^UY7?/dPat1/)]OX__qP99:k=8S&qVGHBD6n\9cXh+5
%"Tp#pR9(>+:\eF``K[]2(pI#W/Mg(1NEDErCE4Qh2o&R)$@4ip:!]HP14ndd)C[_cn\ERVaGKWTU+NJ>g*$HY@Hf:\;;&Ns>$HsY
%g]?3jB]FA0`X9>hgru%m8hV]P9Y&0V>9-;M&W8S?Ns7J`RU`&Z#TNX-l?_2_D]A?/I<'!h4@Yh!1N=>hiiZ^Ta\.@^`NDlKrF5&s
%*L89OUm)?$I8$d*TUkc2.*X^OR9FS!knICSB'uC\i3TOim5f2gR+dkGm:b?bR;H<\B,l<@r73Hh%.P134F=#;*jF8>ABd0Y6*L5>
%D*1:eFi.`!=\K<ae*dp-jI=/8gSu>[f?UpHoT8Yr&3[e^)GAAa@O`ZT3[W#/Ba#P5nr6bX-*dODOds6%XFefr%?8aQRgtbU0/qFd
%f`?iG-p60ZD-@^KKe&;7CIt"iL'e(SG;<<G*/n892l<N;4J"M=94H'+4U#)G+!j_17DU1`N7]""U[fM962)ME;D_M13o(:plI#@G
%H>:ukT5ik?I/1lq'CIbpjtdGkQ6W2":CD:0%+@)B%Q/q#DYk31K++(Zn]q^?"<B#jSePL@)JaiTP\UMT;i,Zi`Fp`mkMe2'4Sqrh
%Og,[4;gn`\\rGXsRuf4MnlM&^6RDTe5l00b*iluS"aiuaAT#cXU6@^->C3\a,V4MKo5*14e+n+'S51bUS*E_#IX$o:44&!l)\T!:
%]jXUCHVP'_keD_Ur5C$K.r!*3+:1jp7IVOtFUK0C>h+o!s-c[K<Y\`]&K.QE4S\tZj5=uD_"=\R;7">^d/f)S2G2q`Fs?3L=\3n,
%/@6HO6NJ^_*X>Cs0Lbu6R]A9I`#B3hf?BTEWt!^=d_PQ9C)#+u:q.LN.NDE64X0[,T\\cjPC72"BG(2;*HM#5g]oNK+,9?k.DFDm
%BF`ln.3W'Q88l3-O?Y^fHq8MFS(;7Js-kZ$AQ-<_9[0n\rG_19fi_?(Qr<?)45eXBSs7e_qVfQR#F,C(iR\>N"@KMU!jUj5bT5BR
%0<?6?PoM$23R10sD=`7IQ6B0g[V>I)`3?[un0(e3CGPFc/.7?3#e_7XLWli5#J\[ms/FiIeTp$!>n5k`!QaUXL\kHP"?D(1'i$=6
%]6%'3*,*3pj02B5#Ck+:R,R2e($6X,>u:8M;=eq;!MT+c2oX<7fojjPcKt3%K7OpN2\u+4nU[n&>!BPIV=&D[fA)NB%Md8:^OE!o
%rf5Xq2smBIi">$=3jZTTl3-ck<<sh*GH$);[Wot,5h#rT=N`bbet[AC8__<0V`G1j#$%dD8^r%8Z0r.j6IqZF)_MaAA%TS6>+#\>
%>oTqdL[$Ipae4u\3;IQmV"<$pU2!eI2/u/,kmiT;1"D3L\o<%=+D\ucdG!saB7j0$M0@+joHVW:G"6NSX>JCDcEd/q>,Kg#k!kqK
%K'r%*e3P2F9;MWJ"gN%&!Q8^GRr,9jV=$&a<7@Vm293GDN"jes1`[_o0F3cpA\Ig&DC9U#Ynu"QKZDg5m?/2RbX;!P%MgCQ>`-._
%WJAF39%UkbatO@%Eks!MCGfUF7)!@7Wk\aWCCY3CimGhkV;X4J6ot!YH1U\fU=A_Q]l$E40m"$P?aAqra7M;M9;T'Zdb)$`;Z,\?
%_.8r,XjQ&!cCYsShb5f!q/t*;Wf#k[:[?PK<h8a!oraf6"W-`r/8Y3FU=FhMPhOW[B[gQ-^kXtQl;ns?:mIpc'hkn036Y$hMHk^B
%%;+g)6t"%R>$Rm+C'5Iq%?YcG!<f=IoG^r\8EYY*+*ql7+5s)V(r4jH#S8G>-]Sq0C2srlPocf6%2OntNlXSXqt\T]!t$TIcB`YK
%mlYkhRtS6[:XqO`;T8#!0MY+OmoFqq4b%3+*.kA-Z;.6Q.DDi;*\-g_r+&6063.t`E]Y0s6[p"]`3_E@Vo8\\C*9`-;;ZJo1.Bcq
%XT%@n)R\+i]L-`*f<>1tDmOik:s@+8L[&;pn5.qWn<-RU?B0qQ.Zm.QS!4&5WO4H6l(V3e;H&[%)>YB"&en7`^2hUrNTpZF_pFsI
%^Dl%F=!#jDZK:tCa)V!eD0W:Q"JfSIThDg<N(\YJL>X=elu/L4H=^#m(#MtX2NnnD%fKhG\=jtP#<1/g#(r,T.sHlK)c5_WL3g5J
%K,a*,?eIBp3h%M3lhit'UV9%XQU=lcGJgIW2t+>9[4j"EW,$FHII24&<*es3pRC>orimD0$/sEZK3-g]Z#/P9RI;10Lu7nBHe-rU
%"-ghQ?/s^64DY-2qRM7Mk[/_Q9>Ne;/RP=odiMYIF-,d6)Z=BfD/RUdFtff?LeUF(@"Bh2TTQT>Yn:5"Z1XnUO!/6-/i0\,3s%?\
%Dic'Q00cWOYMZuZe@Kpi*c8i8XR./ilaE):70:uu+bpE][c*8@HM)3_U-T58[K8G5%Mg3@&)IX$q>"47B(&)U@"*7sq_Qs'kAEc_
%<hT;l'_sbO&!9efFqB\R+s.LbnQh)nDJsr/aj!jj<7!M4,[Yb:Vud"j(b3#t3)Hee+rhu.5BEtC:YNC(]gWL`AJbF_Bh+!]JOJqp
%h_CrQ8g9-O&>Tn^*3QkC,bddcZB>eJnY2etIe<X4IsVe&@#W.<pPF]4O+QR-M#i3Uo"m,HWmDFP/3-8f`XrG1_BUZ\bAc2O_[!Jf
%Z"bC&r092;o[hg`>?g:fa4g3LPT]UHcsf6SQeS3h0q?=#;Ii`]/dL<jA=]JFHgXm+<!>R0,mo*\i[Pp3<)/XuTXO?'aW1\i%]HPb
%.rCQXS-BHeYel&E(TtrZ)0'^:$bIP7#S#"$`?":"jm_;4>li)MH4cZAb*s2f,eN3LV(:Y6jB_qsQ@p/Jh@X=Od09XE3'HJ:S2X]Z
%``Kqe7o3RS+s%Ed)YTN4g<\Y5"_J%`_$8>diH_i=AlfV#<GCil_PG70VW?m[DiPJS)=b#sUX#Q5I9jGJ'+Cn.U">.#EPVM5OE',g
%#30N&0A#=Xl>ooR1_(u":G:Ai)%jp/[*#N\=Xf@UXiC/CdKa0W^2Rqd8`bqW>'(@,rWcJ37f>)NUJa$Oi&i*">+(rMh\FqU[X)]<
%O2j`NIu0^u5G8.6f<FE90!\sOnKpS6al'I.9T^elZ"F2`_W]%mr`XGqRFGZV,5leGkXgn/./6$t-M5ALg?><c4Z3dce6s7Ip`<BM
%_;&uV=Vp06n/.<4/KVF&.Ps!1VG:9aN&3=ZD6<=uFOL=?5&E**#[0+Z?lk2&n/HH"VfmB$d#UsEjj56GqFb'\YH_[&+FRB-NRsT/
%Lp+2=<(^D;L#7[i.".D4mQ5!T:_kldb,Srch$%VpfSQ!Q$F3%#UFQ5RU,-nb_U^NMJ$Y5lALHKWRdh&JU.8K:GheaRn`3hN]9I#2
%?NVc>Epg@c+O14nl@QJ/l>%#?Bss[c4.kChI'P0A;-XX,lgiSn_D>U]U,)R][]r14,2ER+i)Z4SDVpr]WGasa7`gRa+9?7s>"2I`
%8;;n"Tkj$@@LL@Og1HRlince-A/!A=griod:@UZ+>Lp0=ZQ@_H'dAfVmS\Q@<cKMkGNrj_M;csS\nFscNN"#!mr3>O7uJH4@NmH1
%78UbA(lgjClDJi4qf`?'Q$DJXZh)=G/nM=ed&a^D?!3W"8@@*E4<UOX*$q_3j_i-Cl:&bKpTB=JPn;E,FmLN#RJEiDT=X7H7mVh?
%1NpKB`[Rjj;<<,1$EW&Vd,ll/b%++-8>c6T)nbfJiM"cV%'$;gLdH.4Jgon1Sp](DO*W\J88D:s;fT!Y.m7g3V:Sr7lJA!'+K.#u
%MA\`lC+DmqO(pA/\FX"Q<l]>up8];FULX_h^V-]c[P_)(;#tMRFcf4B:_O;A;l@C+34IV%oj;ho8(l-IB"E`pf_ZP>>d@UY]%,\\
%c];05RQ9&/EEeP6<cVr?RoRpa]#GA;T'kiKb,uF16(3E`7ZV5Oe.jDX+&uZ-ic0b,n)uHm1Ht1?c3TR9BnHZ?5=gA=;nYX3,cEMZ
%SihL]aj<J):XTm/I$8#-5\9h)aWA'sW^kjFFN&]qdGfch]S4]/%?EZ,[*Pd:iCHb(p!g!+!jK"_?*623'Tek'N(%SrP^k9mW74fb
%^@oeuLBu@PP;mll(&&bU$tmAKpl7YjW3-J"%7jh.\m$6BFRWA]^fmjUjtd&E</=%,Kk[DuYJ:Df?'X.#T:J:]k6:M`W^Q,(BJ:^[
%Y,cjZb)=j%oeP&[Z3QUVl$AalnT94d8Ud(,g3dY;Ve5o&Sg1%4<bupZ!FsMW/Xd%0lPop*S5DmC;Li=l5c*SJ#a#8[@1q)B4f=.5
%j_L.+%s#HTA@EaDo5$rF'Mo3?]4aA%A,YQK0h%tr,cjYMU%kt])"BCErTD8rW-jrl@m860`WStY0sTnnoVcOM"j.uo^I?gT)41#5
%)uXsVinH2b6,-R<b1@#1>"Z>.[4@4]ke2;EhS)Gs_0C-L*+Nno[@<hh3#b=ec.)BJB&WG0C6"44Q7bCtX;4=&!JS;dOLF-S+HeL*
%.s](dTsnA%rajTgXFaT+aYOe\5B=scj*GOA\WXGb*@FbYQ_aZo34p"0I-5R[++G<2g:6RYgp`[Ieo5fW3kdYL*GVQb\:KZ9Faku_
%9V7S@nuJSkLkkMth4OT-cV2:GYO#3k]7brG6VBr00q$UE3fW.U33nSsX=&@@i\B)""1OAm:'*<-$UujW6&7%O[XTQCSSQfLU@'M/
%q2M@u^1/*J'2[?g^ChF\`?C!P-2^T)E[Z@Ek]roe[ss,d'Sc#m<Qs`8I+9R(Kfr<K+R`!MS65@V64Go1@aJNnSjVEXUQ^e58Ge4q
%FCaTeC8q01Q:a3*Rkk8#P?FZlTRs&fXV8u0/d-5VjikW4dE:5sZompWY8t5*@]#%u1q2mXlVj_]q@-W.RWg3tflD.C@B[#ES(3PJ
%Ad3kCf8,8.BRlh]^IUR56JSL-'opddkCI$N?X91n'UmQp\`(*o7j0LSr^Of]0u\^$`MUUSj%.cfDB>*=)0X93(tHlt7+%MPHee`0
%o8):(/9-I,"XP>aT9a!]XC'(?a_["e[u2t<kn/JhYkjjiI-iW*4Neo4DNuqj?d$\6&i"O18s3&QLa&PRoeUeJ+6us-*FTS-7JuLt
%Hjm'6m$,jg>PpdK6uq3;fV-<B=snSY7jKU4RV.gg>4EZIrB)S/`'VK/FGRIpZrdI#(hna^m0J@-U."o3g^j*Vk1^W"UJ"\"=]Hr$
%0nbB$;,]\aF5VC.@\;IR?aJHRs0cuKD8st*jJTRC%c:^rCGIIKc@"&X&T9s:9I5B"e_m(cVcV4A85?(^Q9SX_K(\e=:Wa(Q]T3$l
%fu?)LfY/XcA?MsLOe31Xk]k@\)^2XQN-U.r))$u(ho1J^)saJ'Ir%;(Xga]eqXDD,#PHkL+sYj((4N5,6$?ED\u=N-g%LsJ8$a,<
%:_#et;SUJEhWK:MT-5n:^NRJ9U#64f'%cELXlGC<Q7h>dVW*%H<C(n(`5/48%53pQ`P')ea31Jn8(,jDm_&rj,_e_=,CNTMOSTFi
%9+7DshfjK?TaWiHIr!r\IRTt.o2g:mnQdmMb-,ms8NiYG32,P:[U0JEoTtE8`ca?>-E/P7V:kjH<J:"YCGQ]Ld_AC"XIGa*eT=S]
%r9;$Gb%o!Q:]kH`1ra9FV/=1nbTh$>gD;3c7:HUG2D:=0#QSTmL_k!&SY_JGfC$AI(((U>ho.ALfX+F2!/u[ifjT=S1>FQRo;aaZ
%]rI-[d/bkMP80[-RAue2qaWbsmAJj</H$JVlG6m)m6IY(rqN>L(=^!`:$nbLmUeh3"eU$Ulip/#jL60sHm\Sc2X>r2c'O[O/03b-
%;!@He,bf0KQ[0;J^u,ONS%ms>S2tc*:kRMgc\okieSTh:%U,cM1Rr[N-PLUVj8)$/-qJSf;I>*P\:2KBJY7:sl29c#2XH-30OF;j
%R,K>CkA.?(OHANt8qQ\AT!uJjoXsM/>;CA?ge=5lq4SR#Wm_K.\\?@=Wg2G05.c0]I$j=H5nAB&1k+Zfo56+lr`s"76.YaQ/.<r!
%/lP4IHsCld?N7ddDr3r?8CKG-B>HY%NO]oe*gA:9;7Fhh%@S9@&hmQWJ*Yi=7C3\++XlRc60=1<)>bU$G.p"[If/FE.P#er1df?s
%2Ubu>[dt0?0Ik)a[[h$;7.hl57FP[QMmV&JY^e&%WD\cMAd-69Tq`^"m#hk0a&CS5#'mc-m!!8Wc`d&i@5F2&"aPJW/CH/&V+n9X
%3!IPO&dt5s3_8F@U^=4#'qHcgf,eJ>LJNe:l9:8UnhN^gVZtfn4uNI]eYL"D_mKBg)0m[8!9[ot3i,t4jO^TJmN3$I*oh@"^RslU
%s#_;GC@[TR:J8KTZj^Ui\du4B^aJjj7=.k7X$Z8T`Z\e)c<OqLHG)sgHll,rm-P2M9H7MoPQUQHWE40%$5nY2ofWl4-i@28<TcQC
%iP5AC*lo:*1C)jq^YeL#c&bpeHhoru_<nE7HG6fk<2eoa46(/3C?&i<ah_dZWh65lkc1co92!R6T`hoJ@m2Hc1s"!X8W`5\U2Q'%
%"?\5tkP4ZgIImAGs4_iC9fG(_SS9-ZIBQ]2Ua,TcoAi"UB6@2O6_`le-A>P@Zqe>-69`Z.7=[W7:ibp\!h4K/P^j<97h/q"A5*8m
%%PrE#3@Uc0h7h&pX'\!JVBq/GNJfd2-:8=.KLFPLl^5uLQ9V%J",H]^cm7/LNZabT$t5S+;1=-k2"F$D*nr#eJ7/7:2a9<!*'`.P
%g^tt>Ktc!t0h!Si='[\!$Hi5U9@^TPF](^eJ7]%>>jkneGH3Ft"38erSBXh]odVii,X)qhS"X[?Pi8#rQKL2P,WIOqgG3oCkH(0`
%@Y/gI.W\)=BTrKuLtq$'m=)G^PlStdo[F_.a[dF1n#>h2n>2COK(pCseDP#op+A?_\@RnG2?ib1]ef38fDqU>E-:=?O8VGj^4W?]
%n'^PA/W/\U/igR2T>m"sZouFF.]c_li%bQffEFW5KA%IjR5(Ru-Ra3Pg_`@^<*u3PHs1-o/.eD&;<L@Q&?\)V!8Yk*6a96@@SF2f
%LaIZ1aZKP7Dpma"C!+%@\Wa6UK"jK$3F1=fjgBo(U6`lG$gN=TQ<5[@#*;Mk%M1p0:04tPi\KJ\q4P$34=L.FMW*tCq_T<JB;.ri
%<Zkg`gKa#LXL?L.0sF"KPaka5:[C4Je5(ZZ@pFU<n=Jt/HB&b@7*.Z;=F)LfL<H79>CShZqa\91UdiAD!t1ap.V!-nCh!]o;RWM<
%;/S]JF)+D0+KTK+(f$n&#OAaX9.BKgc5%S#h5%Opqj3J0gc4lUV@2`(;;.1"/865T7'(Ze3g2#q'g/$kY6f34:KeBOhqDg3il,'>
%O:S2mDYbT.,7nM=5%i.iI8`(S/.nCqWDg*\&;BCR5&iO-;_*<=5LD_RD`tAnE^"?1>CTGg-L-Dk#]ZPgiX2eIjUPtW^@OFN=JBkd
%5&(>,ah4,SV3=qb6A;-0(LE*7!(]$8Z]$5Y'Adu<<?FNjU-8PC-4D2;ZuIsd'4W`$PI3Km"[TXCPjSZECb*B.(e3b:N6T&1$%X*e
%Ep&'c/935K`oV*-G>7k[SOC"^X;qEZZR1lNBZeRX,Vm%b>5HkXGFGrb.JLr"D)/pe29j^0A,!&^+JE+QW.3XE5NV">UstAT>^KWF
%ZDduLiQFjL3j+@]NuhO`Z7Jcu;;>EuQlp2YA^9(->#KS6lD,DFQ\>L$PQHgL;Z3ruI&n?M-36a7.Z+gRVRPsae;>?^kjbr-1-KYT
%?=cfUHP\G\JkDB"db+Y,JflsBId2i]bu$Fn8:i*l<EHj56Eu;9+%L_OejCDg"Ot.O`R\'1-u-2@$S-<_9(3JY1.ZTn;E)3X9!e$c
%5l,Uj4U'm(ZMf$5]*uJk]0d'/btn3$e'!cK(r-bKb?/!%9`]cp(;$r/gc4cVn-@172Ri=2k`7iq8g!/,KQO9(n0A4YPTbAQE!]`h
%Fq54Z1#b;=U:ef1?Lej)'"G#Z2's5cN9qO7;91)Ui\_]8jQi]O^j+gJT1.mfYd*-OQ=oK!nM&CuYfK+g8Puq_;Vk>bk7&;6gbuTW
%OpDZt%]6N'(R\B$<uqCQbDp.iqCI]`*bWMdVBoDhO:c'LV&AP/)PLO1"+A[Df"#@,SLWl@gHTi.LC\uYl&p0F[(XUaO"FQdj%)HN
%LaA<IIC_u^/Q6Kp9m5<\loa!J9g(,)@E^T7[ZSM=T%i%n7')1;PkNX'I^f(YY_,A+d6LEA??:mUQ68bUARcjk1$I2nnVYe3kJR_^
%(6)8(!DAK<H%eeVqo7F&?pXK7QL>Qlhc=n72R?FP=7t]\2T@JpDN_j-NdQNSPgD?0_5aMi%0pPl=,#>KIh,Q!oXF5fe4i.aM83QN
%$C?eR[5]Y,Ye:+f=[IKp)o\D7md*hrD_EH0b-iQKblB/nm6M'MH.`SL,qbMc!!SZe+Lr:'`g.5K\H/!QlMNDj)Xdags42pE(oCSj
%0qjZ1dthXnL<mL#qbp=OVc<CMG3Vq4R]J!JhY0:l`a1:=afqRZcW`#f>T$Umd>>M3[0]AGb&X^+)\H'&@Cg"JQ7]+QnVq$!ES1Ai
%LGEi;3>k'Rm*e_'dtSGTJXF8u`G]m29X4,QEk!*(>QV6B@^_<u)R9Pk8%!CX#4me,9oIK&nKb\#V0uiQaH-M"N#7K=]Qa[3Mk"#%
%H$j&,1>`)*]g@6C.bXtN]fp>9r4XudbQKs#[A6.>7MTKTig5o@7p.m7i-//;`?M1Z"4=")5=IIT'mk^lVg!DI\.nMX1)+PXDn7>h
%ZXJWePO-@2lj>NYEsZe\QgA?M<%D('?SrY+2$h<L!r#`[^ek@WM57$MT5.:aHpH]b5(u<a"(p"#V1snp7$h=#RRK]a@UsH?q7L9b
%-[ig.B#%(qYL`2aFVFnrce!SB1pZf$SKg8D%RO0@O,P]kE^H)`Lfpcl/PtCDMU?HiiNR5->\(mRk&>R'Z!BeDDb?aas)?$u3<pj#
%B*E(C3p"OTn!_e%eT#Z^g^V55bJONO@J)pD/7b$B`GO*==qd=K<h*=pq,5s.V!o+i,ft]_SN%PkO8"('7kbd=R3omD]=8QDG4G^F
%7R^eDOdg_u;.^s7'?;sqrs0]Fa\5OZ($?"Dg31R#=<fNM')3b.1i(q-[;4W#7hGIX.*Z1G(qW[LEhgbt)(/]!),l-2#M<%Bie]m#
%%XmXic]&paEGsq$T(mZ0]iN;;SZ"UM%&_^5V6[<Sri@)^nSqH79O']icf?8:=VHEkS?bSH,Nk-#qggt_A,U<$:&$M-TsJNF?Y)<C
%K5i\>DQn&!708Q[[YXg(.H$j%]n]_Q\Rm5uI>f*(NRVt<ke%'O="u3@`gt1WaW>kT5*G\'YD6@Ee2OG/m_5Vil;F9)LWGn9S4d*6
%#ch("[J5T2ASV'5TqKA9)/@Tf2j=q7#eURN',qae\u*;(O6q;0b<7[?:$/U5@C'MB>4ApfTsVR2R"$&@B@H9ie#r$qIbPNcAlO8(
%pZ!bGdF*oE3`K7'?T04kd,'1kON13+mISY<W<>-4$1b7Fb4(1,A)7Q;!q2Y+4#\KRC9pPs]nPOTpH&ro6Md-Sj>YU4!;0<=PTMrZ
%eDM]Q@Uol7p.A_@GVF+E+GJ6%&pm^L_/,XNQK^\@4ZEOFo*YP?^*r6\^>[Fc4_1&(1XO)jTB=/-rKN,coQ@.%Z5GW$[&ed*>.CFL
%:der?,JW]*^L[O5O?V]+$'W%PgO/)3+#\!+hCZ<;)6N8X-=ZJhP_JaQl=%n5I]<Uea.fck;\d^3fGI*4*^j.BligZj+302l\pnUX
%*kT9A7KJZt*:\*gJi]0mC3g.)LKBX"dbMMXB5gJn9A.".rf0mi3f;;]^t7-6!JdUSp/U#%(_@<ZT^Q*F@3iO*3e-R(h'GCXkZps/
%;2O9kE]4c/NWssa$btNj5Ci85+C_n.C1aYpfH,ui2]K8\r$!&c$^,]D/ZsNKE.s)i3750OkHI-/i:D>@)3t]k6)GEAc%"g_"FI;B
%jV!IZJgUOm2sr$a[(uck7pX;7SdaWcoaGO&NU=&hq/1g,D*/lA^NX0Qh'.Lrqn_rck@hbPUPZ=N>__6FY8d@.Rk7ug]edGn$s-Zo
%G\8qXh=TgAL1Bo,2uRX(\E+d?#IiLE"p5j$7X%p1`'%;e_(GCp`<Wjl#Q&Q)TXt^bZ.;&KZeo'G4qN%<l$6o.6_p+p`tLP'69ohb
%aq!nHE"aonb#3$p<djM[F4p9Z)h/OqPd\K.T:n4o!]PsYbZHAe8=dF;K\L*%3.c<H`!^VhT\s4[/>AW*_C*^I98>4OAb6][K>e>"
%MXXm2_KN)]4Akq/'j/*YS6g"2:ne(!HJn]`&=pqSCVD8Zf^(6P\4kDL@WL8f14A]U8L$s\Z3J]%dQA;o(*>qj&Osfgfi5(s*su!t
%eDc,P\a$mCaaq^B3@C\58jt"sRhB1.4<skhC<a$f%epU#qJVM[FH/Zk1?@pl%#<.+=*j,?c_l6q?b%cahlN'^$["ts(b1;,:i`=)
%E?kE%B;Tq8AOM.(KXI/+]'U0Il%:RK&]eOicSQBhP->79C<T8>4[]R%f,Z?0#59Ut3HK_O<9t2]5,=XeMmg@:qX4%V:q(>4HhK[X
%;#0]gqUam/]=)toX&EM%'2#$Q9j=Ka>"C#c^?e)cKKbFf#q%\jKjc1cYOq]a;.NbulG(bsTDi$orI:N=^16^Gd.`j<JBb"V@(U_L
%i"VT"FCdpnP%7[[>LO"1_ZsPA8;U)>%Vs)+p[D@$,u`qu)%IXE)t-UbSULU!l`"F5"&gX!?DgdYe_!,BLd`m%6)4R\f.mN"Ze>g9
%`rqd&jYYS>U5T6FXia[WA="VC7D0,t:>*`&i.ZIp#Fko*3g*j)Rd(Yf17dD$ZT!uq9hKp]$L[*SLAaJZ_>h`qp+<>]f12)klpm]Z
%40T"q9*k[%:5q^9IS>hNQmhfI0?0[)E3)HG^=#+.`jNu,:_4uA6dLd,(IAL_!n$QIlnh%9^WtZsYBJPo#8Eo1Vt!+X8AFmm/_\%J
%=4%b^['@eW88hN(A*JHXpn&XS&>9*]@4BU;S-Of!2E)ju9lhRL/oZ(=6=LITo/497e,A<2pA)r,qQ4Boes(CX58hFJ8"Mc@iX[(,
%e!h&o.BY,e3Y:BHkKs8))u)=V7[Z',mMg'h)VABa<X%@&^//JWQOGi5?S(@4-!VpToQFbPVU?]7U&;G'D(G/iCRC9Jh81(T7\lqq
%cFu(:\-DGQaC!T`1BgsHYDc1`\LR!):KV>-J@i4O]SE:?inc]Wo8d:G!`'aT>??X/?e;KQXmLp4`jp]ZUmIa%]=$2$7f@#eKoV1A
%k@[chqANDp<OPnQijnk\'ipU!CpqFhTAL^2S#\<p)5l%(.]m/U,nc4e8<hc+&,Cb+*$6rDZ=5u#(E!]CGP5$cU\%rQ8O/t;EIGd-
%Br77s"%K$[NRa*UBUltCLT'.hl]@61^l-J$&0,(q":*3\altHun(cqtlj`+'(f,#Ae>OJGDat1$$E]D@6e%Mbc$?X1=a0*e-BR9(
%ajj`"C?02f+PFeIF=>X>(Q5*0j4nEdW=g%*9oJg*AF110ltA&,'5\FncX+&^T-DKaKP7Vo77>_7^%kV0LaHeq(ii+S1,hL#j5*N/
%#O9=DOiPIJ/YI;KnHFE2W8llkqr[,X&Ho@+M21_RqOG9>[j`EhrO!Tn._&40C^uG=Y*8P_.D+=4WImB^$kT]-)k81ToW,+!hJB6%
%ik\$KXnm[Le4n-8Sa2N`<Ak^97Leq/#f,VgWG\0-UR:%Cq;/Ac9I0g7`EmnuJ4V=fk?8M@VUcF\`Y[NZZk5N,_(Y-2NCD>@ErU]4
%L!H6JhR=Oc%8PbthV%MQ;t[D2V@CXO.t/7!eAYKE\t_>In'BOuTaX<EGc\gY1Hj)BWr`^p`7$Wpc+Vf&qWC@""0j<tiiZ(()2Pah
%QZNJeg'2js5Sl3#'[CcP!9dA:3]B\#a?(*AKtXi=1p8't+$hS,$6\K\OaGS]W8[JE4&XkfehM;U4*m9AJEJ2m$c[jMr=fJBZSJRl
%g>mUd#34XGS="c9(m#Q9n<Jb(putlZ'u_L*%:f]*!)Q'\attG3Q#`i.Km/DWAV:tmYoH$\SM_<l"Zr?ofJhjMTeduZRs'pP#b=[&
%Q_T4GDP%*)+\J3(iP>R[(u6D<a3nh)a"FO#d&Cml%Rr9Xo@P^+`H\MkjO<bE`]i`YGi(%o5Np/E+Fn@6ho1/d.-f!U@[*;_Wfa5K
%f<H^_"3%#_QLn3:-`bnmo\mD+W"MqVA;\*oDPF>J$"[c<.!1ksiEhaVGggh\;9e<q>l5d<pK5o:,;6Qi;'%GcP0#R#CcX1\&j=QJ
%``q!]8MG1AOr440:s[Q];;J&lkclMUZhHBpeeho;fR,Lg3N1m[N6QHN=kT"AMu;SJc(@&[j!PmZDE_'BIoumi/-C&u<?Q?g#[lSm
%AXC'cX^M1u,]6B[:u2&VIcS4;O*gadk-c%$mqbdON>ItMB)JpBC.*m_9ofF"n[oSdbGlKG+71U*<c]nY46$=km7)7JS)HpX0I2eB
%lCsH9)d?))qUNKDG=R6-qpTqY\[UBn,QF0\r!)C3`sT5#Q!us$](8I(hQ.X-k)LRU:T]4BAidpg,*9k7FTm=Qc=5W8ZYiY=Ke;0]
%KT+U=e^sk!O@2`_Ec.dD,imEq/*b8.*cin:FZSEP>s.-;C:O<U4SQS9n0>72UXZkN]><iu75j8V?TDkO"f`'EARjJ'qn!?\cr=rL
%\`3M;ETQXX=g*2Lg0+I?Z36o)7B%Uk$clO411oRZ)ZG-qrN1<p>\6Bb'!+ldZ92t$/"kf2>Eo7p/qB""W(M9#C5M`75e'Il.0+:Q
%Xh82P`:Z&bfns`(R+eM#@%%DVBA:XD(:NhE'>T3E&r,rO.8@k4Nia4%S%*d;6d,A'c^Rbe\3@cN3/N.32SpNu74lsVI/6_.#.G*r
%IG(>85JOVFcd*_(id8tcY:oS+V!Z?0PFB2jBp;?d0%4=fp#/F0$988]WY?^7<JLtr:)qClU&R:/j%o-&Zk7&/4^]nhoZY3qVl>;7
%4sprbmp\rf.015m@fLa\k=B3kWqX?&`KV[L42o+<`rWtN()^.r]=hTmTlZP"G94BBkN-3?pgg$cAB0/ulGrf'l-&>/*Mn4D9(@+8
%;r>ie=1?8<:GYHt4kELpgW7#\Hc"Ku08$qqfrhs4<>^A1]4@iu>Z8_JE5^W-%&kq.8c:dnK6E7`m4unjmn.ZU3YuY7"brnhpD\%&
%Y.h<b1.;WL;V;RPlX*$RGd:j7chJiE%;\DT8Jfpb%Gec5Mar@kE5,_?]3*&Ejft1%9_X.-rOsH\<X2iV\QfkTA.^d=Z46afkbeR;
%[L%\$&,UUfK<IgV#2I(q$2.-u_7+:'(\Pu0^W5AQm[;Zs;=.^tZHDgGKZ6IT3aVAh_7'2Vo>Z9kRqur\n$oT6`T$MD;M\[ec$pQ&
%o0Gt!e"&ZC@uIC2$iIYTlQO)d<L[Z*b^fb@GKVHEJb85B1Gj=m+Z<@=aj?jJn"l6fD>#MA.aALdj8R;'&ARjJq=TnK\UHq;(>`[H
%B_(u"DtunF4LLdXq>X>2'n%\;&Ei5^`Z&kLX/]g:Wk9.3%rc9MF)YVl<SIWC=%k3^fKDAcNCt+9C=dnJU<"m"9K-$P(RnAPropo(
%l.m<XDsNL'T/2m[+Mla'=DTI0o^(hd'PkZ`@QUA!'nG`*XYd<e$0[!4QdsA4(MAZk^SP\-/I$3t8.,VkEO/NH5%;-3H5u2YkjGc=
%]H:o"JX1rm87;@V+q=&5j@`?8)PSN1(//$XH'_KV5H;]>$[EpYN:U_TX^n#"#f-saU>Y4tc4(q'-3k50WLW!j(\hq=2/+$Cn'oNO
%fqql5?%clU1U%uBf%B?sj0MFlCY1j\9DYPVe[N&AU`P\`ih74K8Gm5'V8Fpd9ZPd%&g,P(B^,js!>305R'B*iA2oqd_YZ)'5R=s$
%XLM>OVmpsHM5!Eg>miqradcFr_eVW6BZ[.41l2F1+R'eu1[[D0M\3`b.To)R`n3j8K#$)^ON)U.8Ad:U^+^/*`FS'E4jD4GqQsSg
%>q/B4bo/OtPd`J,QI(?4a4BV(L5]*S\=lN;6TM.@VVRk*kbF1B9UN/YW\r$I\b0]Q'.rfee]aK((/Z\lajWD2Rq.[lAnW!&JJQ<Y
%4BY9r<m.qObed:=ksBuIVt6oU7dAMNASJmR?Bpmd'K\:48hU!%.=u!.#jM+bVh3HoJi;#*/VJi-qo@CmS9Ista1-j$\GLUnER<<3
%(Z]%rMJROfJCta)dnu^*lD[KB^=tW-V;uR9U\P<aPO>Cs,F3B:EHVns_;lja$a%]WdE&=QQaQLrf@1@8O]/=K+B<_qb!8`eH!/Bt
%5;FZ,2rQ4:7L7gNMFfL]V$XI<:OGirhs*^DMRV7_BNS&;A*UoPn"T<A(A$):@1-,[(k/fu[bDqnd5Rbs%V(JOnYj%.ePhrdp`UW+
%!cbr#W-c3(18hh=2Ap7d^[]]+Y`sg[j%2nborO[CWFa0g78#KA0RN=*knY6,U9`24MY9=c?qQl73E$;QA4,cW/$`-pZt0=Xi(#T/
%>r(MN0em"=Me`?oaDa>tl6:OW_+!@=`+D9R:5Q/3qb<%"jECoY>Zi!cI@(41J9sAkC!7*[A4mrJ_Hj)m,/rgMgL\?G$n[g%JSXu\
%1$=m7a)kT?eiCBOLs(#=6KL26W50%D+/#92VIRUk>J"'redPk>N.!\jK<09?pa3F9Y1$"T7MPBl,??@rCP37VqEc>G/l^)[qL[;V
%EL&W6EWBk7PM;`\9r&;+VQ%P7,cVb0CF:^#]67tjVagX[=[os0Ifc9A*M-n('Lj`k(AEXY#9:r;h]t5L(&l1PH`gpk$<VFc*;cre
%&\r)aK\Ja.W`0R/9(=.&\5<QAO6J"n",KF6Y"?HAn-lE[=ei=/l9.V\KFJXEoW*Kq0S`sMGu"lb:3&em8k1^[bJ\b<Q)\nn7e+;e
%5:a/kI9[Ze?)D!2nu)h^KQWE]Mq7-AjC'u?"=d'A<`Z`t\bDK=)%O&k*Uu0jjnH5*H.R0\5HAR!8#E3iJ$m[U-JO?qS2FE[S\T=>
%RQ9f;#jK?6-qgTdU>D.$`*Cq*/.qru0R`X#OrDT*_kV`%<f;$:"[Q4b.u1\4Y`?c(6VSq@29S5,eF_1K45q^r6"m.=412>F.?d2P
%7m8sGdTXFapBXrFbl'<[EN8AdZU2$Jq3j4?,_RnKh<cCRiU189:$D:%Mj`JPcHX:iZJ&a(MT7C!n^JY!]C"XF%41d^m!u$c^3Yt:
%VBIT.bSj!06Ut/?TQp!6]G?Ea;qB?<FFIm!eI@d4r5mpg*!"Neck]XLBiE4R**Z6B@BE8)Gqp8K=(E'c`TO4`D6Y9$A-R/X8`!VN
%@\"j:JSF'T:HV1@rOe3_g.3'OlqBXu;gs(Lrn3(o<;(?%XnL*7MmG213lf.6nZuTf&D[t=f5p,mNE`)2L2#R<a4j6Mdak4BU&u$5
%2O.O<%8]Mr/J#\M.UM9(b)k(5J*[t)LSr%h:1J\m>kbCFJ,S,""u"<@7#^8B-#P0^RaaucO0[fPZDnT"=t%rnj@3bnb<M2cm7u-p
%cqtgo)3tET.8CS2!b@C4j/c^-(-sTY@],u]'_eR"-ot(B5`UBcF[@hg$7=_9^NauqF>/UWV1rdM;EnSN_>tZOV$`TA9M*O+4=$bJ
%k#gJ&/M_d2(timG;&!CM7OJ\lbs)Re)203$[$5%"<?3[ndg1Nj#NFSk_?[/?_+BfOmd&`pn%7c/X>\t,(fF.o>O_Ua_c!I+b-i>V
%=/PscnZKrf9M,IdhmEc$?6VY_qb@D^!>$]O@jb9@Q.iXQb0,(jkZa'8[c*.aAT6r"8=(J]*Km-T5jdEm7'Va^_`p5`ZI:@pDgWAb
%kr5"G_AAQ4fT:$+\19=5ERAjfs*!A>s1&MRrC-1-P>mH2llmGAlM-Y/@P;M-*O$s\)7t_TK!d,4R.mTeEh'g4?j9PmRthYU1nY$7
%Hu[68e?j.RF$'!G0f"Qc*-$SY6P6d;BgCFM1q,uFP5I\KkX1(p*);0gI7>VBa+Z=g4E$H8l2?Vemtl=]0&hLlBU%VWn\(*/f#*/`
%QTN!/'XuXKikj9uN&AZ')bTUhGO5F>eM2"s8J1rcI"8;^p]DkDLu18R?*A[&k]tR&<]6/n;KLQ?\l0e(fFC0DQK.?KH_41R6M]rA
%[FTf+g.O8a'Y"jS>W)A"e.Ede7Qdht;_!1VANp-sgm5tMJ,eY+`BrJi&g_MM*F<S'?#g#$.[-N.1?Fp7dM=H.ORcd190'Lcbb0nD
%QKjoeXPfhE"2N;/cHdtO?6OhK!uAI!p8dQPjk,ts5<d8/pPgjeeM%a]V7KE2h3\Hm?tiUUj:k?(ZPI+,K5$rUPoP>[E.I7V2@0eF
%.BD#e:HRBFhch<rNjVnn#^Sq/+YqQo@:b#YoHpu5PudYQW)ZYM0qC&<@X)h`Vr%5RTgq8B>tbFfN^ZmT.4*Y2^ThA$NL,Y]@u(Pi
%4tg4";?&3ndMI.fG01mGUl8]XlS^:&/_E)#n-N!^7^25fqeVb2R]nY!<:a\b1-C$/Zr;rC)qXPfo:d4OWa9_eE*U0H"f:<*pc+Er
%P[58.h-i:q/oLqQ&9!!Mb&4PT#o*11@p?k[hQ<-bGO!LM[+B1)=_RM=Dm?V'3_N7rm_"TE:pgd&R)rJ9&e)a4m0Jh.Y#25_-XrQ2
%<VKFejg%KNRtRI@MDbICkOTW-OlE>,FHG>Q[KKYq-eJu3,*[i_):,2o/qIkqLFpYTn=^.8F!ts"Uo*<e_k&]_+,3-,-%^QucX6R(
%5>miJ0Y2]Ad--t@@2hhalIi/q9tT!hd([!\iWJ=8bW5jo'',AJ7Vs34UdBpe:d_I)bs:I!RR/*6U3Q1ur78XKIslMS3F2UYc<%bW
%Skn`>^X%-r:J;H=oP&uL?Q,`N1]CXZph.t+N?s+%%a)LP*g3l*3L.F'Q2')^eL$;nR>;Mj<[:CO10j":_4aYA7;fue2c3bC.BE:>
%,-OHUmdeQ5:]*!^r7_O7e^%##3mqkJNs>!@?Req(')EFo,ZJKqBh="1L^Rah]Y&UhDjTj?(Ym`J9QWaTe>@UA*ElDTH1j_*R\rFW
%M8qsNM>`r^LDNT)cjCMR7O9kT'eJNSDf/R.-Bq4hqt);&lZrN:J&aVA&Km;rW"[5E6!LB.T!$C:%V)][]B:@0kJJStVcI=]E-.f?
%<bu5'SN,\6(YCKN8DuaSbQ$s1XBLu_F%i?[\G%,=p(Kq_Zq`gBf6'&VVrOcFhtdjt:?q(ds%jbh^UCU8J!>[:UkXPsM0`$<M+,(i
%==Uh0/46s4fPh?C,$Dep$2\GpL9Y-c^qZmh$Zm*OS,:ZAC$pJ\A\V_s2o1H-]TXDE<9NNIaS?gsSa?#p$>foV`65!&gq$!2OaPHq
%dRlde%=&t6+Q<Q]WY#\K/`P,DTFLWARSX$f;+sUIiMt'<Y,7b-YglTrU<]UB9$W\3575..LGe=$-5i%k`5pSHL+5tBB.(7Ai;XOB
%$;I:)jF&!,H,MF9UfK.RFC^PtO9+(u@`h7N:Ml2+Y4e;lINEM\]:?NXc1m&^00a,HI$=%rMBer3jGn"k4887@0P\iWH7AW0Ei5JA
%6*!V*0/e,a52F4E^/pW:XHb2Po7Mjtr$7#G/,i@nc1L>T+lCU(._X8]m#J18cXY\WX1GkI;_F%&4f",EdIYOGC&)VWWelM*7m0\4
%1_(sEBob<(aEs=1^5J_7m&dlALDrb[iE3*p"7Ii5[K/VjW1ah,Z?8!HYj0>4anTbK/;gdU;Iec\aU63O`VcE_>]Yo8=Ri(F8cu]@
%Lq%Fi,Ul_[Q^D`s/BSN]"ET6N(ISd[NFniWShFLsp`Y^9Q;4keQL=+*3aE5dA=mr:CJ[SXrPAe-eEV2(HV(o_HQ4<GBMWd;5#5YO
%m4^TOX=mpY=Er:UD]80+:P:ST#od7!Wcp&!*ea!j;9K3gI'Q;ZMfQQ'<LZrim/D0:X,;pn\ao_*,ccZXKbm?l=`cjG;Tr!hnQ_'c
%N#hF!/FH%]e*_F?f&S1`k:M:)M30#$gTp6K;..Bng84/+APm4$qDE[/i?dm,cnak$MkY3N[('/X&t_WUO!I=*m6XrTACh)RBkKq8
%4g%Z,=km,4+`%K#q*nq9*c:f0"WuUC9gs%#,U1^@[S:TZ@DcJa*AdoGEP^(Rfjd%O2E/7XL4NI6k#<fGe_3S^Q)<M3`LWhbq%rMR
%LC0@C:Z,aXOSN#HX\':5(A[TKU(KF'Ru6k6@?sg%n,d1jIZPd5o+fA$Z^Lf('7hP$$4U/+o+)J"?[blf[83hm"icPLN>S_*8rN3n
%4@,k(8!o0a[`T2QC,NdS[-41fKL?i!m+00p3o]1H]%J1WEn=S;cm/rqqno?c.`mTQja&JTOCl$RYqsgZJc][.pLl9YRmTJ8Qr=dZ
%8?%bF7LiqpdUM8#0QEGtn\j"7"eAHef/.aX,ZNOdD9C!YKdWd_BfC6N$!@H\2JM=4`5.^D@gA:AULs?X$<0_CS5_H!$Em:'G#76\
%a7Z<)Y@oFGr/$06dTSo4Ggb<#(=</!)EMW^j>L9mkI7Sk[PL+]]5'Aca2ZBF<,XZ46s_%Mbapp(Q*\:nN%X8#E?GnA*&7DM]EZ4[
%2Y9AsLnpWK)]JC?,;qiT@cAln.\MEM_jlV4at^<>S5[#[m$0q!J[B]_hj!0?;Rgc#Dg%^L9<>0KY713d18&Db>i4<X+=5b!ML_YF
%Ya^$#j+C=Ad-]&'g?'Mm<*gT:$o*s$[66_@ZU8^7'jUR\@2,5l<n#@5Rtu.FhYt"`q"PjLgdUcaN#APl/fCm_;&et-gQK]r/(U1M
%F/SVkUl-ro*hYYQqu&#peM='eLgeY9Tni/clPKiLO>Un&`LS1e6eGiq,oMr2[d>6d@O<L*Ao6W.>?IbIY>d@CR>fCoDalLo,ka.?
%F4C%TjIj1l,"F['%0m=3fd4\WaO"7K2_G.<#!nH.,GbmR=GOlGYU-tFNH'UjMUB^28%%JHjc]31^%L9+d`;7>\"fVgARFmRJ".#.
%#s[/j&_FK.B=Va;fs;WaZcOk?Q"4!=OA>It<H=ecYIf_CP-d$_j,-Jd@@Z%8GTUZncGc5]d$r9>IW@nlg%(_!<EN.[fYm;.Hc5d6
%AU%$7fHA7%o#Sje;)s!Q3)Dnncgk=L3BHM3G:D.kS`%`L\(I%^/WoNTWCqT*mXZc:@A-aAX&crO`*tT3+USd(^nOJjPubZp^*J2O
%L#[oa86lg()b1Pm?-Kg5)=ICG6"K36Gd0oV'J1n2a&!8h>XIA==DaS$XnOm(-.WBY\35c3N$8KX/O^^/7s,G6+/04,o24&N,:ZVj
%a2.+bpebZoVg[&sasuqYjH12G3MNX/dF?d(pIhWTXtM?M9XgrR&f8O#M;S$FT9uWcl-CF:+ioa#gmuCUNj'+DOKVN4QS"p(E`dEj
%YqkmJn:<SpcHlpp*4A>g+LI?4?*#Ib1@ThD$7W,0?6:^g6jQ;5T68[mJ*QPLW_[/^hs3tN\F8rsc*\!=me>&deX9/^^AD2'I(Tt8
%/Wb#h0:0Vig6Od(au7EBPikam4u`_ZR&%J&Jrf:gEnX@&#47fk7g*&tU9l6C/E.>)SFl-S@6U,D/Q1`$6BNEgm,>BNLgg95FF)ci
%IX#_@BS-]7E`ViCnQr6S]&^qB(fMV;*PTXNHqj+!nocH+^tmh`eWf1)g%LgoNTQ%!-P.bc(eVE--aTDOj<aEWqb.,^U;]'89s,@]
%KT?mtlA';H2F[<.O]-"Z\%UKF:7-gEQ*JO4aSZ.hPt>'l9PMI@!%u7#AQT92c1M?ZUa3*7npaXXa>-bms-4'WZt<aK<6el,l)@>`
%0ie.M)HX<^W.UPuPaYQ,h0kuRC6X8QgoIJLfcbKp(`!j>F,LDLeS57*83ss4><nL[M'[jq#[h.33?6UkgTJp0Y]o:t&_\,E5o/fD
%20#Ro6.&\gH`KKqDW\hQRY^Lbo'a0RD[!XM&q9Wc^u]!N!*nqM:4t8;C>#PHe'Yt8Yp*YMq8-E#'&H2H>3A=+'#V*I\Wg-P#Hk/+
%M,LVO3t)9[]<\M4Im8H6mCK9%8c*QK@E@&ac_Ut9]!B:]B^3gN-Va#$&X&)(CitT_RiHK4Snp71E<Jq\^/:`DQ_D,-i,%"H(^,Pp
%?$ASLDs?s#-3qHK[mKIoD$Fg)COa1iq"Ul(*uG5!Zkn7@FZ2HGd;.c0ks>)l+,104o<;N1SXW2!Rr]=*2A?G[d5W)So4Z"#gSse-
%+jqs'0rQH`O3*I>j%]i7I#h2F4e2Dl(8Y!=[GK10,;gpY]h/^H.Ap*)/2)"BSsp17``gb9*Brer@B@`NTD0Z1T%!!Fa+"AE:X.oX
%$4j<ITEFd,5A,=DL=S5*%h+qur'"*dN]^%$[+T'Be4e-)7,'r*#b9s7VL[D@Rc3_lk]bDdh`*0E8Fj?P<@b\]No'.ag[^DHgSoe*
%(Ipg<c),_bXPc;0kL)baPKUO&[P1"P9ee+)n[PSD;Wi<&o@JHa%n=_+:\Bj!BKGtd#7q373uEmAKU@*K%tt_U,F4kKc`JB#[XkdP
%Bda!c#P=dN[6gmkCDOa?Q[5@<-s9@/h^a51i7rEEg%#5ES".66c;&FHq<rf[q?R"U=+@2'+9dW-S?mNE7pNeKebCeFAkMsnqg*P^
%h7pRgs/;H:XjakajQ0H#`!><6,K!d[3,!edj<XW4`9q_**j1tP/ZNon'j`@&b`Inm:3b&3)K[5FM+P<;M(mH-bf('JW.c?W`k%TL
%9n`lf5?guc"`0ls_<8#8ocN-BC,s>mIgffJrC=QT.+H.1f(_?41_s)Y>LP=KP,-)h]j"#XT2$d+*ek.r/:ti.<DaFg!S525mJZ:Q
%[.cf?[,3UN&]:*WZ)9ck[E\u=%lRZ?Xd>?)/gUbf%@>&]\2S+^T9LtjZTefGRjg$[J56],aQFP"a4O)R8J@](VRXaYk%Lub&VG3s
%*LSeb."W<gZr>9S6K)^t@8<FV49u):RmB`#;\E/+(0o.;PL;qf*b\sGfU*XqWPD#H7-Vk>par<&XAYf*Sd3?raL!=ZY1R:1=e,`e
%B-^HhQ?S>`7t?m)[+Y0Fl'cG<JHJ:WCgF*?F0k'ra=ebFUbP^$b5-3jSlj:`W>NHid[]$m&(`H?1d[0/%>c.kR*MWFJCWheA>2-4
%>=n;&0^GGKBq^1YI[^j$nW7-?.?a%\=LrdWOLfMa[Zg4Y[JuJPE2s?CAg"36*L4"KC;`>CA%aDWAumin+U#(&Ed2N.i5:GrYnfGs
%9LS!@HD9Jm-.!PF.oN'@'X-R*n2S$?<&'i&'-k9rHHi-FeJO;<ioNN(,@'i#ldFhVIdbqQBR4toI9X<.YsUS,3LqIBK=[V86H2NB
%D:+59J:f^#a(>%[_>'9+@[Z+W9CR828>%^T)Kc2LjO1inhG-]eKc+?[f]EaDFBYE+Q/PQ<D6i6E%pIs4e0Ru+KWQ`3XSXu+6V+i1
%rU]fpCp>nE,hP&Z)ung\cD=$km'soZ!W!>?d?6uUpW]O.aFJgGm"IB%)$?<E)]22aaIk9fhYE]U2_1qTbSbGi,C)_"Yd,bI4)Vun
%F,".GPX+he%?0ZC!,gT-q<DM*D+Q2?V)Aj2#5?)`=4L*FCmE'CG:Bhbk[*Bk]eV!oC,Y@%"TP[(enkIOcEg/<Rq>_4-o6.ifKUq4
%%=J6K4M':0LX_9UJr?8+GQH*&22Xd#A0Vp_Fb[rS;+Bun">r&KW)mE\\cYmr`[uILO14cn3RYKs4%.Ct8d>!^iD9dXJ`n*JV3Z75
%[9sGF"_3rr0:M($CP#,=;q)4f<FYrrr="D_k+fAgLuKq"Nkqe?OK-fU/tg,^k\arpHq#XsA*s\U:TlnD7>.9)F6%sDO*T+>g:/,j
%3SmmE"IZi&H:d)KN6&==*CkA[\+J=LNBTS(Dh!)d^:-=,)gG^2p^1)pa"Ytt0+Kd\#4pfj`0oP%UA"#Sp@Z[09hN[;Nj<OX;Dipn
%6GJ6rQo<PC=%Ld*1!pR/@O##F9sc7N%:=;G_*StKC2Zdq=!d-FE3Ls&RTA,0&HX0S4]8WFf_!U\TABSTZU9kYI<c)J4RE\iWM53%
%r3on4%V#aXYA[(&fEt^q+2Hg[[!,TL4*$8PX>>;bh2u??+3+R+?7Dj@/N0/@P\1L7n#/6-;.qdtQ;r&#d=2J;6)TZNgI(UNk6gRe
%1*&9/#J;C?Cu;i!E?njTS2MT'Ii[jd'IqBEJ]Bl#^T;J)g(]eWdHL=IC_^ML+kifa\'5UHpu^D_(oATcrmneB46_8`,5Kdl'6st0
%:`2C+eRZ9H!(+J?lpS;CC"gJY5Rm$J2ercAU(_JODrC,FiCV$S%r][=YUGL.OM($gYao<cS&?n(ruF)j?.[m+i2_nN%@*LgKEEof
%IL)^Wh.=N6,_mr$>rHd?aPu3(>Z;&j'\jV>D`#tN*MZ_79BVe1gB^\+q$>).YpCnERo5^)3,X\"gS>^f$PJX@6QX3H*WsG-7XWK0
%,1qX(Hl8pE1(NNILuO#Md]EhcIr?CQP-a&?Qi.or/<URQ:J.uOki;#fkahTGI.^prSV%<$$88t82e?3d\hIU8hX6I><'Y%'g_^(5
%>[p!-h@kP.]#YXOW9=]k*L_mTg:=L'T9rU]s32YG%A.JN6l?[60DP`,_"aY)^3S4U=5D2.fP?8/aBMinK^VpIPW/iTLn5A,iHR*Q
%_SSq>#UXEI$`bY4HQjU0QbL$!_Um]6[Rf'PmbDIMNa%%:QVhsE>mmlUM80aV";]^n"BQOb#QUQjD<on1<1BOrlpC(\(>hd]6N.e%
%$bZ(PUFWe_egekFZMZ&J/c/Nm^tONZ`O<1.Ih0+/=OXU9ZZ[9Vh1]EY--*^+\33dK#9]\=KJ1!WEphZDG@0)->JG@+I1O'k6@oDS
%pj>:'G,KSp\/G;g7Tk,en#"dhFl'MT]@0$MOM((Z:Z,7%j6mDIQY**OJ%B_S4LSXD<,=8HG?PY^H?uT9-t=,H'%9-JeX46Y<)h@-
%]l5PI#-`9?ICVe9E<HUj<5#tVrNNZq()f7a7'>k0=E&hk"Q*p:6S8/5#n_Jf"p&OJaI-A42)Q<WBXVTNET$,?LufBPPL9>OC'plK
%<aP\&IY_<[&s-JSHq:HP-5hNT>t-AF.\Tu*K?f98aDo;+R=^m[m/ooQ&;rOTiUkRS(!Ad(_<TmPK4_&9#tkmC=`->_K,B/eg+70c
%jP[HmMg48Yo%daU:[%jM7sQ]a\^ie9L0jNs7ZY?E<8=;#A,[HL]X1!QB"@9a;S:=6%\:!Ad_Jn;-0F'g:80r$(LRF_^A'Tfpo6DZ
%?f/;k+L(<pC8j9_Jp$J\qdFgLM'1#5<OB4//WS@"Qdo[.W7o3QLIKg.h)!^Bi5Q.q-f8t+@hYkUN\@s<iil7@,f>kE0Ef!IT+`\d
%O;"5]&sjM&^7\QSI:Nc8_T%9i\dTLR]kSHB&ZI4`4?Z[q@>C\Wpr*heBN.KaVU8@?SY@[SZe.!2E]ebW'?]uV'[D7:[O&Y%b)7_V
%fM&uX<9)ORdFE[Sb=UroZHmsmo&F-USDjJ<BOb@DgD'gE2)%>>MWolIEBGJ@!a5[AFZ<-EjW@c.OcjbErg[^O85`>SjX3Kf$<P'"
%-UGQ_j.^i&jWo:,r!ubK>imN9fieoR6tiZ7iU[Y\']5j6,pjq)0GP('9J605;Y?"=`%(IH$#($G8i+a4[@tUdk**)?\"*,tK"<H%
%SrYMqRuB$]&]#uYR29DS3&fRR11K:<\iY2X;n2;jLB76O&PtDtWY5DU&Z[r):`!?U$[p06`FXUi+QPllCTJ"&?9X]S?L-81q.lL^
%M.8e)glP7mJ1<,RER_U+RUu@"rFB621S/+Ifht0a8[+m@&[Qc&NfJ7L[J??/,Vs8sRbqpKg,S,Mf!m,VSRJLU+P7QtP3CNj5nWmO
%#=H'+\BLWOB_iM&l6>oUDTjUJ[c"Pl]>P^ja%84c?G7hTjWq"ES)M:?h/"I!l!b:jkU([(:suJ6$cdATN.kcQWLh4PR7[7pa-lVB
%II7L-p4t92Jple>;oDlj>?("L]ter-Yt-ilM-bV;8la?nE1A>,!)/M:!dZ:24_6Li5ZUdu-V"u:fX..U@Hp,r0V"rqAB^]#`*#\$
%]:(N@/*.!DjOE2CLlJFN`tj%X%Jba4Nip=P/"AgV_c&;GA!qD+g>F)K8_bf)aR=*^7YmWtdNHd#NT=N)IJA.k@cN-H:qS:n3e'$b
%dnP4tk-hYr^g!#Q)C]?`ra+);*F?H3QtlCX8GQ#t+6&SqICFHh@$sgQ;-e[@r[gXU)cZa?<q7:?3QsWGo6t5fqFN@!(CV?QF4Z5\
%<mh*Kg2knUF!3Q<`>-8jY"c!d&cso,%E<Y!8#I2[.ET%QRBG$drXRe]q"sD%/ouprIkFZ+$3i5RX\4-d/Q/:8-*MkmKk@9A-M[KA
%h2M!rJk"!moipI7TFLgI3V;[V%o*3Mr`^@4Gl:Dk]'j:ko6uOf)E7?q*`&/s5K)'*XoFBjU<;06;?nT:M;Nmn^qTOY$-dII75^>n
%PLH&+4)QN"2ninL@jCm2;RfQB%L(?7ckMDO:]Vt*V0%`BUZPU[p0:31O)Otg,`VrRLGSgO"1u'iIoQhEYBS$C@>,8^o"O,).e\jM
%VMgL+,S$[Pc(O/#;mU><;AM&$)>,bV?M=*Is/WV9]\),U@t0@))=+dNA=C%0I.4_SH3GiE>[AP4cKJ(QR8hd+L0/8NW:7+J;`>(!
%KqOSoV3"CR7VY/`l^4j_5L?Nu+ehbJNla>6?X:#W^@rqjL(^L`'cks-=IGJHC9%iE'M-BbfIrm%1`gqKZ;<Q^`LDK`,1j#Y7C#D%
%Z(BrB'+LraH/BWf::UVE4S_>3C;@=L?CtPIi_O9YIB=sg7:c?[U+$caL#t*J]WGb/6/o.)Qiql1i`6U8?XN(U2%*su&FLlO,A`j.
%nBY;8U:EU7ho'YD>k8(nl4hX.lA"h)PV>^5:E3M3o%[iYDki]&+K$e*7]8MR_,rt0mFas(jnOOH=,Ycb,h>AUUY+"HT-1NZABI%b
%[MiDjIHY1,(V'1`[0'btW5MiobV''hAk5Flb-Bc=,,Y'H)EJQ0]nqE/]([sH++i4*m)QQ&9l[j<e>N\tln9h8BK9,T$metH^.f,.
%/N'=ap(4*1N$,*`i*2%Q>ldZqpJqCq2msF6MNlp41B>Q4I7sp)-66F]-)6qo!h$Q;9#aoVC`m3dk>:TG>En\7[-FjBb'i1&pY]hJ
%On>$@1Vi?:+2X9:HJ2m@qGN'^,b%sI9C6NSO1_4*UO.9n]OI@p^WKHLC9P*1eq8<Rg_N9mXb0QBU2"1AAL:'b&khSEdb:0V@o_g$
%1sVN9P;Ec8U4QTIDH*%DK2&0njF*uSPDW*%cJC!/CI+M'iiIPIkGor/naQL=!(^45O7Y_UC,JLUEN9>$[dZ%VlH[._U^6$Dm>p(N
%)2_3"oe.G[(GQ`HiH4Ui=N#Q^EFmYr&?lg@MtLL5)gM?K0Fi'MY%3""]s'?PXb$F,Kp(A"dfae;l\PkI7$g=8cNS&*6+fpCG+SCm
%q^AoF*(o^Na7eHsO52D@;:Us@jk/K&Kh,RH%"'D"jUWL^b"IO*.Ql//]AK^_&0o?0R=tIEMG\*0#2l4kk1$LpA$;%fI>f&GN;[Vt
%,>7Nf:JYOb-<;He,H"ALW9q=JmtTtV`=nI5(>UsYIaZC][j,PV\([-)Ap9-HDHlHs.3JVm/0Q@M*M`2&O&2F,PRl;)3SVk"RidlH
%e(YskNR&c6s(jXJBNJ4-7uOp;o\==R/9?m"-:B>9>T+$5G`e^p9<OQr,k3lO$dGeCqFOFcRS)%K;R$&X[Ya!D)Ws-QMbD!sHgo?P
%hC6!g>3Z;)9%'Nb7qu3^K3TV$;h2N9:OXYA.[M0$PZpCg#+6!ML+p#d1aVd3QU8N]Ak3BgWJI1u^3T(^=$PV_:['=1Trm`U3Re+]
%bD9^c$`6`6m]tXb'\:nLTcp@@r%V3'gX8b@HMII\Uj[R!Heh'LZWk[EQ/F6J6?jjujj^%R,-X&b/'Gj4G<hSd@.PEq7j(7BA2hVA
%@Yn"^g"1i``NYbS!u3)rZ`4eZm.>+(Rj6QeRm$W%f3Yh1kIqVESf\.kf+qFcX599`9ZkMh2%$Z8mK,1di\-)a.Hs8]Uq,+iX3b*C
%P\E1RAp1oN;_]T7q\/)OToVYBYs!ZaD%\-d+no.`k<\c6@m\0M/s<Mor[VXV(.:6g,@Kb&jBc0Qj[JApmofNG>V*)[k]ti%+('G%
%W#JDp1WWMDiF=<A_(gt_-]uEB'>I-o@X$=)26p@Q27n$S;<r,n*_2@^l-\_*BNX"if!V`='Lef`eWT:nYOP2t.tCF9`8CU7bk2C3
%SI]Rb@kM&g$+J5pF@_+6GQnOf>fOB--.H44e8pI>)DHm<a0Hpt%>:GsKF]%q$+`V5P-kQIP,FRQ/]+b&2CeX7Z-_OAE%NB-.nr4A
%hDZ0(JHf'J[bK8HYX#nLf!=@T.XPEc;$+[n6je:Ya&;Nr2:lZ&J=#`;6jqX5N$C9:0F]!fC,n_YDFZHY@F&1S-WiWCicu<>KQ=,!
%])Lf!Hua:#:VZqQD$GqoqOAs0,Nc7"VD3ff_E1C"D)3g)/o#Pc_PEN.m"?mN_#:Frr`FOCAr/+PVLSrja&j9j^OFXGM'"jHcu?@j
%J@iRDQ1PsKobYNOB%c#nT=V`4qPG&\I.ul2kL,Qd\(N9RlQD@.5Tdj_cGB-&UE/qi!`Gl\o>T/QbhI*eD,e<u&cSh.Qur5oJTT[;
%pU;0PgV?\34I?*#S%rRVjAF7^`lcQ'k.Ba%>3`sf8U8^DXaqXAY_K+<*]!DER$HpZGjEoLb0hip?KB*!m)(sBidC^9RPZ*)s(I?T
%6:^+1)t/.Noe5OEO`IuO:G)(`D`/#i<F2kTB3E,t1#@ZVcD]^O`j8)uC,fd-9[dc:nHH4,:Uf;ALfLtpV\B8T0rq3c9-bXIds<^D
%OoU7#jS*US4dpE8U!d+,\+m+13oAqErOSHI*ub/m4T">UbII#]qqh=Pcl7g2$)Yq<r#sKXo"g!68BZ!"P:pB9R7-Kl;lch-e`"Bq
%8GU0&KrJ-^E3a$,RnUh&@`j$-Gq4`-<N##UMh1MlOPWPQC=sADI:;DXjhVd1@9#9IWYDIr-,^sN!IppnF`MQ<D:Y7VDH#U<]2X6Z
%;eRdP43h+["L4o@8DgfYB+WYN-&p/&OP@j4.S1RBD>"+<R$XQ3a7>:7aq]siZG`+IQ1eEpho=YW"k\V[C>Ju-DPeAgk$lNhG+W/m
%QuaE63+NTN3`Eo@(.]#,1`a1Y@"oV0Urh!0bbVqLD%FLG.*#3uo1%SXm)\C3hU7fU5.;E(Mih>d:p,[-(t&N`6_5r1M=S1>Ld9V[
%qDPlkRq)Qr(7AU!NbR)tkT2?8m/dUbHtX<FZ(b$1kMJZml32nR14qU8d1Z.>"th[Kde1bL^J@tVBf]*K2iAh59:+',RFN/_;KM0/
%"f[&UA)'=-QapUfcGNo`3W%DELu`Nf?h"pS1m#%+%-5,`N5`7j!Tl0+a:N"/(6g\3GAfV!R<hrjYdAHQ'6,#OIBGt$?5>,FOC7$$
%Nh(Z,?+\"'b&*$q8H7W<btjR9#'C:'Khmbhpe#u-\A1<+\dN?2WHW&]899Ob*/RQe'Nhg]Mgtsn]_:qm!#AliZV*?W77q^GXudub
%U?`FBFdV`Ff/L_*kdX=hiUXC:S=8(KLpX#>992L,$!Sn?%^_!ioT.%J\/U>R'KUB'U_/GT7QKpKKRb5D8()0%U@\:-YPQA"3m#9[
%S.2Zm55i.<q\K>R??Esfg\.SgRm\Fin4(3f1WLFE?J:@8mb)1!83'Y7_.UZ1M5'Bg@?:c^M_TMSZcD/,<W@RE.KO(om1I%TY24`n
%[KjDlX(8/D_gmf=CHY=b7DOm7F_BCoM?eq`(Pu=,Yr6[?Lk5,fqRPOi$C24IRjL>L0q.m>=k!l;B)S/X,f,VR823L%!&*pu@YDI#
%E4kL(eQaZl;W<dlS6O;:Sq8b*JbHU\i6@B$c:YrRZT7rV/Retj".(sC!8egcX`QiDi1U4oJ'i&(`&ml;9UIJ8VkZ_gM,`33]SQup
%.A7+_IrEW,N,eV$";k.UJS-,2IB`-/ME(Jfd\QYa'UY4JAOn%pAuXTa^[#>KfJ<<.YZLKe(N7%ec9:Tt.=Ol,-f<&N6jTQT,Z(=C
%rFk7';S,Eg:5el$qPkhe>sapT=%aWGOSR$t7Zh!":;X"QngUZ%R1GUumaK8nk49XrW\^6@FK\3[JPAlckUBlNo<-,@3s5Pb@gm!n
%,52>3Sqr]M_uX"a&*_+$)fS>D:+cpSnl@9Jn#D5@Nad``!i-K,_7#94qtN*LJkEFZN2Ua>Baa0f+FTLV&N&a.Mhf+ocO43YqRL31
%B7aY?P$Q`Pc_d^/R2Vl+5Z.77)R<L_&0m&\^]!2gU=[VA.i.27:Ug=Km&sJ4&)tSRMBiKnM#mI=K*ll6.^bdr3ZLU.EY'(gf[]qf
%S8$]Q'cAu68bR9D[auL21kQTk6ts<2XJrbH\BW\#,t!>VG4?C9)k/<f%T1fF.$K(WVeW@e2md02APQ+(f*VkOoB>(D8r$H"c27:>
%.-j!aRFW'%>J4g`(b;b=ht>T:%gY<:l=kMS%;JGSd`j&/MRd?c9K&u0;Kj_eM\aqWp6fQ_'LVui!V).=U,bajasDA`>?l?fofKi_
%9g'uGO*OL4("<gDjd6DW^T:d77P4cYM&.((O684!QNi2\5\t3f;FO'uF6IbGSaW:3p3CBL^1uW1L.d$0p39CIQ_K5DG,N+-C24bI
%)_,G[1s<gF4r.+YWf62o_Nthf!n7b78C+S9Bo"6nH/+rU&$)E@6q44QMXcTC/mB7TSUS<I(oI8alK&@tL*3hWoI]qUMugt\/#kkn
%Sf>P$k8aq7Np=r\E)q<6#gb?L-#%fWBCfp:Iak:QRX\T(dY$N4Bs56CO;3UcX_?Hk-6iehQ448?2Bl00Ju>6/KB,r-GC%CN3U+S+
%r&t=KegG,u3X0N_aE7o`fd='b0J50]XG:3eT;'On]^3OQRo)X_(L0MF3B5:*]ENhi*1%-D78BC-Eaq7siequgAU^XI#T=iB=OlZG
%fiCAWZoOg2TdaiDg$lXH+gMr)](MUD"c7+q8J9cLJsVA4IYGA`T9#QBl>(5>PYo8>SOEXhi-$o="\VKflf^?:aXOMLFdqPf[qHFt
%.U!lV/Zg&q*\9(EDRNJ,9<5D1Rmg7%bnI/.FRZE.\fs^qm$dbB&ZZdu2pNMXWOb-^\k(VUR3UNn*T4qYb5i5=]E($50n,XlI#$DT
%2R'Z;r/fl#\/>!_ll5MXK`'Z5E/U+$pr"l%O1l85N+sk@JRbc%B_/rsU$j_D_;Fet*0eFUQ`),t7CVV)JkCcK.VGe3,Ql6g>K:#0
%(15?*W*XMX%c#mmIYE2r8k;LeM:$i'8$Mi\J5sq\r&mj!/0^#S4t[)o6\pV\3ckd/7Q5jCIlsKQVR59EC1=8_Ag&LcEU`F$olMXI
%FFVeQnfCIW48;$$;"Z=#K2@C2>="1[gp(#TV\Ye$>R7/GNU&?XDhuI41rV>X$dt+8@?CgC5AMPCeg95K&%f$>>7e`g?p05Tl3[#U
%;J&5NdEO!rBrSVeP6AF2gl7H3@@R$??gDZCRt*/,WDjd%AlOUT'fO9p37o0p/BJrXF329T6_t.X8FBa2hoDQr3tqt@2l8\'lgP]N
%Pj%bHM]KPgr&94(J(2-c[=,sFb0J+/?c"["NcJ:tkRaFU?*!2^P@h$s9Yq2)5!eXLceD6j99*jCcX0<&re7j`h/&"%'7rN!OKGCQ
%#*Y&,Vtr1ajYT^8V4lS^Z7--22YUff@Kq>hgOerdb&cS-0K\$oPGB%[P*5p?+q'JW49A$0Iu1)4"WjfOKYO.`>enM&(^b^M!_-8`
%9=p"=!M&PRYP6MFKagF,@,`6#3[*krMTuCF$TEiVq@"KbO<8Q.(A<lK5,=XB"HMb$8=t&r0ZXf\b/W_iI*dmrHl9Yo#CY0jRfWT1
%&e+3>BmM:Y*JP=!R;nSq[p@CX2)+d"GCdbSEAZadi,U5N/6ak<G*#VAOD:_.;l515f3VdngM^]692Nih)$U5@p;0\o-Yn<e6)?M`
%26*sC3g4a#llPM@%B=0;?R'lRd-04+H0<M*d?^O0Pt4)BZoM0c^gYDi"Cn8Pp7\OFVEY[EqeV5q`p^276HuXLa)qFQ)*.e!`3^?l
%ft*eNO+.?F#_k.?"AR/`lWE,6VeLu8Kmj>;MI$EX8%:WF3p`^<+3_2JNSp#o(&[7iqVcZZ31WO;P#8s0H/6>6!A8h#I%^jOYq$OZ
%F=&(hOci]-E''lL7.PoW)1j.`YZhbqU5s&HPdFFl$MNaRgHGqa/#))GrKZ;cT.pPGJsP=)rI=a9i/6+CPi1[>.HegU8G22:JLZcX
%)bDD*oOS_(8(ATOMVNli'@LGu$$VCu0kOg;gV,5X@\M:M9-XdRL1X=s.PYai2Z`4nqUbN1d7i!nC2h+\ea,>,nlt?PR3/?,.eL3a
%&/E5L\dPRN/A#1aE>%HIN)Q@sL8]"#p=[ao%m9mP0lXo-kP"@opsX^TJ+LSTn)(c<%);\kDn^Z"Dr6'9?f/QsrjTZ<p93A$I/ii`
%TDlcj^]2LI?VfR.s8K5%rTEY,5Q17>s85)`Gj'P5GJF$m^\lQ!J+LE$_HQ%~>
%AI9_PrivateDataEnd
